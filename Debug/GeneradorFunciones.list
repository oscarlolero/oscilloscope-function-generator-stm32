
GeneradorFunciones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003668  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003854  08003854  00013854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800385c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000230  2000000c  08003868  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000023c  08003868  0002023c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019c54  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003607  00000000  00000000  00039c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c131  00000000  00000000  0003d297  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f48  00000000  00000000  000493c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000014b8  00000000  00000000  0004a310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008fa3  00000000  00000000  0004b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006562  00000000  00000000  0005476b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005accd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c00  00000000  00000000  0005ad4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037d8 	.word	0x080037d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080037d8 	.word	0x080037d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d8:	b510      	push	{r4, lr}
  ADC_MultiModeTypeDef multimode = {0};
 80004da:	2400      	movs	r4, #0
{
 80004dc:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 80004de:	2218      	movs	r2, #24
 80004e0:	4621      	mov	r1, r4
 80004e2:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 80004e4:	9401      	str	r4, [sp, #4]
 80004e6:	9402      	str	r4, [sp, #8]
 80004e8:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004ea:	f003 f96d 	bl	80037c8 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80004ee:	481c      	ldr	r0, [pc, #112]	; (8000560 <MX_ADC1_Init+0x88>)
 80004f0:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MX_ADC1_Init+0x8c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f2:	6084      	str	r4, [r0, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f4:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004f8:	2308      	movs	r3, #8
 80004fa:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004fc:	2301      	movs	r3, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fe:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000500:	6104      	str	r4, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000502:	7604      	strb	r4, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000504:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000506:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000508:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800050c:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050e:	6284      	str	r4, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000510:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000512:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000516:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000518:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800051c:	f000 fb7e 	bl	8000c1c <HAL_ADC_Init>
 8000520:	b108      	cbz	r0, 8000526 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000522:	f000 f9fb 	bl	800091c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000526:	a901      	add	r1, sp, #4
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <MX_ADC1_Init+0x88>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800052a:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800052c:	f000 ffb2 	bl	8001494 <HAL_ADCEx_MultiModeConfigChannel>
 8000530:	b108      	cbz	r0, 8000536 <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 8000532:	f000 f9f3 	bl	800091c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_ADC1_Init+0x90>)
 8000538:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800053a:	2306      	movs	r3, #6
 800053c:	9305      	str	r3, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800053e:	2307      	movs	r3, #7
 8000540:	9306      	str	r3, [sp, #24]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000542:	237f      	movs	r3, #127	; 0x7f
 8000544:	9307      	str	r3, [sp, #28]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000546:	2304      	movs	r3, #4
 8000548:	9308      	str	r3, [sp, #32]
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054a:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 800054c:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_ADC1_Init+0x88>)
  sConfig.Offset = 0;
 8000550:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000552:	f000 fc8d 	bl	8000e70 <HAL_ADC_ConfigChannel>
 8000556:	b108      	cbz	r0, 800055c <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 8000558:	f000 f9e0 	bl	800091c <Error_Handler>
  }

}
 800055c:	b00a      	add	sp, #40	; 0x28
 800055e:	bd10      	pop	{r4, pc}
 8000560:	20000028 	.word	0x20000028
 8000564:	50040000 	.word	0x50040000
 8000568:	19200040 	.word	0x19200040

0800056c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	4605      	mov	r5, r0
 8000570:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	2214      	movs	r2, #20
 8000574:	2100      	movs	r1, #0
 8000576:	a803      	add	r0, sp, #12
 8000578:	f003 f926 	bl	80037c8 <memset>
  if(adcHandle->Instance==ADC1)
 800057c:	682a      	ldr	r2, [r5, #0]
 800057e:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <HAL_ADC_MspInit+0x90>)
 8000580:	429a      	cmp	r2, r3
 8000582:	d138      	bne.n	80005f6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000584:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8000588:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800058c:	4c1c      	ldr	r4, [pc, #112]	; (8000600 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC_CLK_ENABLE();
 800058e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000594:	64da      	str	r2, [r3, #76]	; 0x4c
 8000596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000598:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005a2:	f042 0201 	orr.w	r2, r2, #1
 80005a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b2:	2302      	movs	r3, #2
 80005b4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005ba:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005be:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f001 fafc 	bl	8001bbc <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Instance = DMA1_Channel1;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <HAL_ADC_MspInit+0x98>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005ce:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 80005d4:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005d6:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80005d8:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005da:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005dc:	4620      	mov	r0, r4
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80005de:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005e0:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e2:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005e4:	61e2      	str	r2, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005e6:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005e8:	f001 f9fc 	bl	80019e4 <HAL_DMA_Init>
 80005ec:	b108      	cbz	r0, 80005f2 <HAL_ADC_MspInit+0x86>
    {
      Error_Handler();
 80005ee:	f000 f995 	bl	800091c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005f2:	64ec      	str	r4, [r5, #76]	; 0x4c
 80005f4:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f6:	b009      	add	sp, #36	; 0x24
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	bf00      	nop
 80005fc:	50040000 	.word	0x50040000
 8000600:	2000008c 	.word	0x2000008c
 8000604:	40020008 	.word	0x40020008

08000608 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000608:	b500      	push	{lr}
 800060a:	b08b      	sub	sp, #44	; 0x2c
  DAC_ChannelConfTypeDef sConfig = {0};
 800060c:	2224      	movs	r2, #36	; 0x24
 800060e:	2100      	movs	r1, #0
 8000610:	a801      	add	r0, sp, #4
 8000612:	f003 f8d9 	bl	80037c8 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000616:	480f      	ldr	r0, [pc, #60]	; (8000654 <MX_DAC1_Init+0x4c>)
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_DAC1_Init+0x50>)
 800061a:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800061c:	f001 f81c 	bl	8001658 <HAL_DAC_Init>
 8000620:	b108      	cbz	r0, 8000626 <MX_DAC1_Init+0x1e>
  {
    Error_Handler();
 8000622:	f000 f97b 	bl	800091c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000626:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000628:	2324      	movs	r3, #36	; 0x24
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800062a:	a901      	add	r1, sp, #4
 800062c:	4809      	ldr	r0, [pc, #36]	; (8000654 <MX_DAC1_Init+0x4c>)
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800062e:	9201      	str	r2, [sp, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000630:	9302      	str	r3, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000632:	9203      	str	r2, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000634:	9204      	str	r2, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000636:	9205      	str	r2, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000638:	f001 f8aa 	bl	8001790 <HAL_DAC_ConfigChannel>
 800063c:	b108      	cbz	r0, 8000642 <MX_DAC1_Init+0x3a>
  {
    Error_Handler();
 800063e:	f000 f96d 	bl	800091c <Error_Handler>
  }
  HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1);
 8000642:	2200      	movs	r2, #0
 8000644:	a901      	add	r1, sp, #4
 8000646:	4803      	ldr	r0, [pc, #12]	; (8000654 <MX_DAC1_Init+0x4c>)
 8000648:	f001 f92e 	bl	80018a8 <HAL_DACEx_SelfCalibrate>
}
 800064c:	b00b      	add	sp, #44	; 0x2c
 800064e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000652:	bf00      	nop
 8000654:	200000d4 	.word	0x200000d4
 8000658:	40007400 	.word	0x40007400

0800065c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	4605      	mov	r5, r0
 8000660:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	2214      	movs	r2, #20
 8000664:	2100      	movs	r1, #0
 8000666:	a803      	add	r0, sp, #12
 8000668:	f003 f8ae 	bl	80037c8 <memset>
  if(dacHandle->Instance==DAC1)
 800066c:	682a      	ldr	r2, [r5, #0]
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <HAL_DAC_MspInit+0x8c>)
 8000670:	429a      	cmp	r2, r3
 8000672:	d137      	bne.n	80006e4 <HAL_DAC_MspInit+0x88>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000674:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000678:	2610      	movs	r6, #16
    __HAL_RCC_DAC1_CLK_ENABLE();
 800067a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800067c:	4c1b      	ldr	r4, [pc, #108]	; (80006ec <HAL_DAC_MspInit+0x90>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 800067e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000682:	659a      	str	r2, [r3, #88]	; 0x58
 8000684:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000686:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800068a:	9201      	str	r2, [sp, #4]
 800068c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000690:	f042 0201 	orr.w	r2, r2, #1
 8000694:	64da      	str	r2, [r3, #76]	; 0x4c
 8000696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000698:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	9302      	str	r3, [sp, #8]
 80006a0:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006aa:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f001 fa86 	bl	8001bbc <HAL_GPIO_Init>
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80006b0:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <HAL_DAC_MspInit+0x94>)
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006b2:	60a6      	str	r6, [r4, #8]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80006b4:	2306      	movs	r3, #6
 80006b6:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	6122      	str	r2, [r4, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c2:	6162      	str	r2, [r4, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c8:	2300      	movs	r3, #0
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006ca:	61a2      	str	r2, [r4, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80006cc:	4620      	mov	r0, r4
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80006ce:	2220      	movs	r2, #32
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006d0:	60e3      	str	r3, [r4, #12]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80006d2:	61e2      	str	r2, [r4, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80006d4:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80006d6:	f001 f985 	bl	80019e4 <HAL_DMA_Init>
 80006da:	b108      	cbz	r0, 80006e0 <HAL_DAC_MspInit+0x84>
    {
      Error_Handler();
 80006dc:	f000 f91e 	bl	800091c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 80006e0:	60ac      	str	r4, [r5, #8]
 80006e2:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80006e4:	b008      	add	sp, #32
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	40007400 	.word	0x40007400
 80006ec:	200000e8 	.word	0x200000e8
 80006f0:	40020030 	.word	0x40020030

080006f4 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_DMA_Init+0x3c>)
{
 80006f6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80006fa:	f042 0201 	orr.w	r2, r2, #1
 80006fe:	649a      	str	r2, [r3, #72]	; 0x48
 8000700:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000704:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000708:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800070c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000710:	f000 ff4a 	bl	80015a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000714:	200b      	movs	r0, #11
 8000716:	f000 ff7b 	bl	8001610 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	4611      	mov	r1, r2
 800071e:	200d      	movs	r0, #13
 8000720:	f000 ff42 	bl	80015a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000724:	200d      	movs	r0, #13
 8000726:	f000 ff73 	bl	8001610 <HAL_NVIC_EnableIRQ>

}
 800072a:	b003      	add	sp, #12
 800072c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000730:	40021000 	.word	0x40021000

08000734 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000734:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	2214      	movs	r2, #20
{
 8000738:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	eb0d 0002 	add.w	r0, sp, r2
 800073e:	2100      	movs	r1, #0
 8000740:	f003 f842 	bl	80037c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_GPIO_Init+0x98>)
 8000746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000748:	f042 0204 	orr.w	r2, r2, #4
 800074c:	64da      	str	r2, [r3, #76]	; 0x4c
 800074e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000750:	f002 0204 	and.w	r2, r2, #4
 8000754:	9201      	str	r2, [sp, #4]
 8000756:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800075a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800075e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000762:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000766:	9202      	str	r2, [sp, #8]
 8000768:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800076c:	f042 0201 	orr.w	r2, r2, #1
 8000770:	64da      	str	r2, [r3, #76]	; 0x4c
 8000772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000774:	f002 0201 	and.w	r2, r2, #1
 8000778:	9203      	str	r2, [sp, #12]
 800077a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800077e:	f042 0202 	orr.w	r2, r2, #2
 8000782:	64da      	str	r2, [r3, #76]	; 0x4c
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800078e:	2120      	movs	r1, #32
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000796:	f001 faed 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 80007a0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_GPIO_Init+0x9c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f001 fa06 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b0:	2320      	movs	r3, #32
 80007b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f001 f9fb 	bl	8001bbc <HAL_GPIO_Init>

}
 80007c6:	b00a      	add	sp, #40	; 0x28
 80007c8:	bd10      	pop	{r4, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000
 80007d0:	10210000 	.word	0x10210000
 80007d4:	48000800 	.word	0x48000800

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007da:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007dc:	2244      	movs	r2, #68	; 0x44
 80007de:	2100      	movs	r1, #0
 80007e0:	a805      	add	r0, sp, #20
 80007e2:	f002 fff1 	bl	80037c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e6:	2214      	movs	r2, #20
 80007e8:	2100      	movs	r1, #0
 80007ea:	4668      	mov	r0, sp
 80007ec:	f002 ffec 	bl	80037c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f0:	2288      	movs	r2, #136	; 0x88
 80007f2:	2100      	movs	r1, #0
 80007f4:	a816      	add	r0, sp, #88	; 0x58
 80007f6:	f002 ffe7 	bl	80037c8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fe:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000802:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000806:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000808:	230a      	movs	r3, #10
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800080a:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	a805      	add	r0, sp, #20
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000810:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000812:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000816:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000818:	9711      	str	r7, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800081a:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081c:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081e:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f001 fb7c 	bl	8001f1c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000826:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	e88d 002c 	stmia.w	sp, {r2, r3, r5}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000830:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000834:	f001 fdf8 	bl	8002428 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000838:	f244 0302 	movw	r3, #16386	; 0x4002
 800083c:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800083e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000842:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000844:	2308      	movs	r3, #8
 8000846:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000848:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800084a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800084e:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000850:	9525      	str	r5, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000852:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000854:	9718      	str	r7, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000856:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000858:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800085a:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	f001 ffaa 	bl	80027b4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000860:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000864:	f001 fa94 	bl	8001d90 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8000868:	b039      	add	sp, #228	; 0xe4
 800086a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800086c <main>:
{
 800086c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_Init();
 800086e:	f000 f97f 	bl	8000b70 <HAL_Init>
  SystemClock_Config();
 8000872:	f7ff ffb1 	bl	80007d8 <SystemClock_Config>
  MX_GPIO_Init();
 8000876:	f7ff ff5d 	bl	8000734 <MX_GPIO_Init>
  MX_DMA_Init();
 800087a:	f7ff ff3b 	bl	80006f4 <MX_DMA_Init>
  MX_DAC1_Init();
 800087e:	f7ff fec3 	bl	8000608 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000882:	f000 f89f 	bl	80009c4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000886:	f000 f8fd 	bl	8000a84 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800088a:	f7ff fe25 	bl	80004d8 <MX_ADC1_Init>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800088e:	217f      	movs	r1, #127	; 0x7f
 8000890:	481b      	ldr	r0, [pc, #108]	; (8000900 <main+0x94>)
 8000892:	f000 fdb5 	bl	8001400 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_Buffer, 1);
 8000896:	491b      	ldr	r1, [pc, #108]	; (8000904 <main+0x98>)
 8000898:	4819      	ldr	r0, [pc, #100]	; (8000900 <main+0x94>)
 800089a:	2201      	movs	r2, #1
 800089c:	f000 fcf6 	bl	800128c <HAL_ADC_Start_DMA>
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <main+0x9c>)
	for(int i=0; i<N; i++) {
 80008a2:	2400      	movs	r4, #0
			DAC_Buffer[i] = 4095;
 80008a4:	1d19      	adds	r1, r3, #4
 80008a6:	f640 70ff 	movw	r0, #4095	; 0xfff
			DAC_Buffer[i] = 2048;
 80008aa:	f44f 6500 	mov.w	r5, #2048	; 0x800
		if(i == 0) {
 80008ae:	b9bc      	cbnz	r4, 80008e0 <main+0x74>
			DAC_Buffer[i] = 2048;
 80008b0:	600d      	str	r5, [r1, #0]
	for(int i=0; i<N; i++) {
 80008b2:	3401      	adds	r4, #1
 80008b4:	2c10      	cmp	r4, #16
 80008b6:	f103 0304 	add.w	r3, r3, #4
 80008ba:	d1f8      	bne.n	80008ae <main+0x42>
    HAL_TIM_Base_Start(&htim2);
 80008bc:	4813      	ldr	r0, [pc, #76]	; (800090c <main+0xa0>)
 80008be:	f002 fa8d 	bl	8002ddc <HAL_TIM_Base_Start>
    TimerData=(uint32_t)(80000000/(N*F));
 80008c2:	4a13      	ldr	r2, [pc, #76]	; (8000910 <main+0xa4>)
    HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 80008c4:	4813      	ldr	r0, [pc, #76]	; (8000914 <main+0xa8>)
    TimerData=(uint32_t)(80000000/(N*F));
 80008c6:	f248 2335 	movw	r3, #33333	; 0x8235
 80008ca:	6013      	str	r3, [r2, #0]
    TIM2->ARR=TimerData;
 80008cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 80008d0:	2100      	movs	r1, #0
    TIM2->ARR=TimerData;
 80008d2:	62d3      	str	r3, [r2, #44]	; 0x2c
    HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 80008d4:	9100      	str	r1, [sp, #0]
 80008d6:	4623      	mov	r3, r4
 80008d8:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <main+0xac>)
 80008da:	f000 fed1 	bl	8001680 <HAL_DAC_Start_DMA>
 80008de:	e7fe      	b.n	80008de <main+0x72>
		} else if(i >= 1 && i < N/2) {
 80008e0:	1e62      	subs	r2, r4, #1
 80008e2:	2a06      	cmp	r2, #6
 80008e4:	d804      	bhi.n	80008f0 <main+0x84>
			DAC_Buffer[i] = DAC_Buffer[i - 1] + (2048/N)*2;
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	f502 7280 	add.w	r2, r2, #256	; 0x100
			DAC_Buffer[i] = DAC_Buffer[i - 1] - (2048/N)*2;
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	e7e0      	b.n	80008b2 <main+0x46>
		} else if(i == N/2) {
 80008f0:	2c08      	cmp	r4, #8
 80008f2:	d101      	bne.n	80008f8 <main+0x8c>
			DAC_Buffer[i] = 4095;
 80008f4:	6208      	str	r0, [r1, #32]
 80008f6:	e7dc      	b.n	80008b2 <main+0x46>
			DAC_Buffer[i] = DAC_Buffer[i - 1] - (2048/N)*2;
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80008fe:	e7f5      	b.n	80008ec <main+0x80>
 8000900:	20000028 	.word	0x20000028
 8000904:	20000130 	.word	0x20000130
 8000908:	20000134 	.word	0x20000134
 800090c:	20000178 	.word	0x20000178
 8000910:	20000134 	.word	0x20000134
 8000914:	200000d4 	.word	0x200000d4
 8000918:	20000138 	.word	0x20000138

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	4770      	bx	lr
	...

08000920 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <HAL_MspInit+0x2c>)
 8000922:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000924:	f042 0201 	orr.w	r2, r2, #1
 8000928:	661a      	str	r2, [r3, #96]	; 0x60
 800092a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800092c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	f002 0201 	and.w	r2, r2, #1
 8000932:	9200      	str	r2, [sp, #0]
 8000934:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000938:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800093c:	659a      	str	r2, [r3, #88]	; 0x58
 800093e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000948:	b002      	add	sp, #8
 800094a:	4770      	bx	lr
 800094c:	40021000 	.word	0x40021000

08000950 <NMI_Handler>:
 8000950:	4770      	bx	lr

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler>

0800095a <SVC_Handler>:
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	4770      	bx	lr

08000960 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 b91c 	b.w	8000b9c <HAL_IncTick>

08000964 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000964:	4801      	ldr	r0, [pc, #4]	; (800096c <DMA1_Channel1_IRQHandler+0x8>)
 8000966:	f001 b8df 	b.w	8001b28 <HAL_DMA_IRQHandler>
 800096a:	bf00      	nop
 800096c:	2000008c 	.word	0x2000008c

08000970 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000970:	4801      	ldr	r0, [pc, #4]	; (8000978 <DMA1_Channel3_IRQHandler+0x8>)
 8000972:	f001 b8d9 	b.w	8001b28 <HAL_DMA_IRQHandler>
 8000976:	bf00      	nop
 8000978:	200000e8 	.word	0x200000e8

0800097c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800097c:	490f      	ldr	r1, [pc, #60]	; (80009bc <SystemInit+0x40>)
 800097e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000982:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <SystemInit+0x44>)
 800098c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800098e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8000990:	f042 0201 	orr.w	r2, r2, #1
 8000994:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8000996:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800099e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80009a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009b0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009b2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009b8:	608b      	str	r3, [r1, #8]
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00
 80009c0:	40021000 	.word	0x40021000

080009c4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009c4:	b510      	push	{r4, lr}
 80009c6:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c8:	2210      	movs	r2, #16
 80009ca:	2100      	movs	r1, #0
 80009cc:	a803      	add	r0, sp, #12
 80009ce:	f002 fefb 	bl	80037c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d2:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d4:	221c      	movs	r2, #28
 80009d6:	eb0d 0002 	add.w	r0, sp, r2
 80009da:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	9400      	str	r4, [sp, #0]
 80009de:	9401      	str	r4, [sp, #4]
 80009e0:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e2:	f002 fef1 	bl	80037c8 <memset>

  htim2.Instance = TIM2;
 80009e6:	481c      	ldr	r0, [pc, #112]	; (8000a58 <MX_TIM2_Init+0x94>)
  htim2.Init.Prescaler = 79;
 80009e8:	234f      	movs	r3, #79	; 0x4f
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ee:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999999;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_TIM2_Init+0x98>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 999999;
 80009f6:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fc:	f002 fa6e 	bl	8002edc <HAL_TIM_Base_Init>
 8000a00:	b108      	cbz	r0, 8000a06 <MX_TIM2_Init+0x42>
  {
    Error_Handler();
 8000a02:	f7ff ff8b 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a0a:	a903      	add	r1, sp, #12
 8000a0c:	4812      	ldr	r0, [pc, #72]	; (8000a58 <MX_TIM2_Init+0x94>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a10:	f002 fb20 	bl	8003054 <HAL_TIM_ConfigClockSource>
 8000a14:	b108      	cbz	r0, 8000a1a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a16:	f7ff ff81 	bl	800091c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000a1a:	480f      	ldr	r0, [pc, #60]	; (8000a58 <MX_TIM2_Init+0x94>)
 8000a1c:	f002 fa78 	bl	8002f10 <HAL_TIM_OC_Init>
 8000a20:	b108      	cbz	r0, 8000a26 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000a22:	f7ff ff7b 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a26:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a28:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a2a:	4669      	mov	r1, sp
 8000a2c:	480a      	ldr	r0, [pc, #40]	; (8000a58 <MX_TIM2_Init+0x94>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a2e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a30:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a32:	f002 fba3 	bl	800317c <HAL_TIMEx_MasterConfigSynchronization>
 8000a36:	b108      	cbz	r0, 8000a3c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a38:	f7ff ff70 	bl	800091c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	a907      	add	r1, sp, #28
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_TIM2_Init+0x94>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a42:	9407      	str	r4, [sp, #28]
  sConfigOC.Pulse = 0;
 8000a44:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a46:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a48:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a4a:	f002 fac1 	bl	8002fd0 <HAL_TIM_OC_ConfigChannel>
 8000a4e:	b108      	cbz	r0, 8000a54 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a50:	f7ff ff64 	bl	800091c <Error_Handler>
  }

}
 8000a54:	b00e      	add	sp, #56	; 0x38
 8000a56:	bd10      	pop	{r4, pc}
 8000a58:	20000178 	.word	0x20000178
 8000a5c:	000f423f 	.word	0x000f423f

08000a60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8000a60:	6803      	ldr	r3, [r0, #0]
 8000a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8000a66:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 8000a68:	d10a      	bne.n	8000a80 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a6a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000a6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a70:	f042 0201 	orr.w	r2, r2, #1
 8000a74:	659a      	str	r2, [r3, #88]	; 0x58
 8000a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a80:	b002      	add	sp, #8
 8000a82:	4770      	bx	lr

08000a84 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a84:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8000a86:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_USART2_UART_Init+0x38>)
 8000a8a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8000a8e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a92:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a94:	2300      	movs	r3, #0
 8000a96:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a98:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa6:	f002 fe12 	bl	80036ce <HAL_UART_Init>
 8000aaa:	b118      	cbz	r0, 8000ab4 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8000aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000ab0:	f7ff bf34 	b.w	800091c <Error_Handler>
 8000ab4:	bd08      	pop	{r3, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200001b8 	.word	0x200001b8
 8000abc:	40004400 	.word	0x40004400

08000ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ac0:	b510      	push	{r4, lr}
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	2214      	movs	r2, #20
 8000ac8:	2100      	movs	r1, #0
 8000aca:	a803      	add	r0, sp, #12
 8000acc:	f002 fe7c 	bl	80037c8 <memset>
  if(uartHandle->Instance==USART2)
 8000ad0:	6822      	ldr	r2, [r4, #0]
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_UART_MspInit+0x60>)
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d120      	bne.n	8000b1a <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ae0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ae4:	659a      	str	r2, [r3, #88]	; 0x58
 8000ae6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ae8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000aec:	9201      	str	r2, [sp, #4]
 8000aee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000af2:	f042 0201 	orr.w	r2, r2, #1
 8000af6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	9302      	str	r3, [sp, #8]
 8000b00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b02:	230c      	movs	r3, #12
 8000b04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b12:	2307      	movs	r3, #7
 8000b14:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f001 f851 	bl	8001bbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b1a:	b008      	add	sp, #32
 8000b1c:	bd10      	pop	{r4, pc}
 8000b1e:	bf00      	nop
 8000b20:	40004400 	.word	0x40004400

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_InitTick+0x40>)
{
 8000b28:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	b908      	cbnz	r0, 8000b32 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b2e:	2001      	movs	r0, #1
 8000b30:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b32:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <HAL_InitTick+0x44>)
 8000b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b38:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b3c:	6810      	ldr	r0, [r2, #0]
 8000b3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b42:	f000 fd73 	bl	800162c <HAL_SYSTICK_Config>
 8000b46:	4604      	mov	r4, r0
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d1f0      	bne.n	8000b2e <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4c:	2d0f      	cmp	r5, #15
 8000b4e:	d8ee      	bhi.n	8000b2e <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	4602      	mov	r2, r0
 8000b52:	4629      	mov	r1, r5
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f000 fd26 	bl	80015a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_InitTick+0x48>)
 8000b5e:	4620      	mov	r0, r4
 8000b60:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000b62:	bd38      	pop	{r3, r4, r5, pc}
 8000b64:	20000004 	.word	0x20000004
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000008 	.word	0x20000008

08000b70 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4a09      	ldr	r2, [pc, #36]	; (8000b98 <HAL_Init+0x28>)
 8000b72:	6813      	ldr	r3, [r2, #0]
 8000b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000b78:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7e:	f000 fd01 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff ffce 	bl	8000b24 <HAL_InitTick>
 8000b88:	4604      	mov	r4, r0
 8000b8a:	b918      	cbnz	r0, 8000b94 <HAL_Init+0x24>
    HAL_MspInit();
 8000b8c:	f7ff fec8 	bl	8000920 <HAL_MspInit>
}
 8000b90:	4620      	mov	r0, r4
 8000b92:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000b94:	2401      	movs	r4, #1
 8000b96:	e7fb      	b.n	8000b90 <HAL_Init+0x20>
 8000b98:	40022000 	.word	0x40022000

08000b9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b9c:	4a03      	ldr	r2, [pc, #12]	; (8000bac <HAL_IncTick+0x10>)
 8000b9e:	4904      	ldr	r1, [pc, #16]	; (8000bb0 <HAL_IncTick+0x14>)
 8000ba0:	6813      	ldr	r3, [r2, #0]
 8000ba2:	6809      	ldr	r1, [r1, #0]
 8000ba4:	440b      	add	r3, r1
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000238 	.word	0x20000238
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bb4:	4b01      	ldr	r3, [pc, #4]	; (8000bbc <HAL_GetTick+0x8>)
 8000bb6:	6818      	ldr	r0, [r3, #0]
}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000238 	.word	0x20000238

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b538      	push	{r3, r4, r5, lr}
 8000bc2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bc4:	f7ff fff6 	bl	8000bb4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000bca:	bf1c      	itt	ne
 8000bcc:	4b05      	ldrne	r3, [pc, #20]	; (8000be4 <HAL_Delay+0x24>)
 8000bce:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000bd2:	bf18      	it	ne
 8000bd4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bd6:	f7ff ffed 	bl	8000bb4 <HAL_GetTick>
 8000bda:	1b40      	subs	r0, r0, r5
 8000bdc:	4284      	cmp	r4, r0
 8000bde:	d8fa      	bhi.n	8000bd6 <HAL_Delay+0x16>
  {
  }
}
 8000be0:	bd38      	pop	{r3, r4, r5, pc}
 8000be2:	bf00      	nop
 8000be4:	20000004 	.word	0x20000004

08000be8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000be8:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000bea:	0dcc      	lsrs	r4, r1, #23
 8000bec:	f004 0404 	and.w	r4, r4, #4
 8000bf0:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8000bf2:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8000bf6:	5823      	ldr	r3, [r4, r0]
 8000bf8:	2507      	movs	r5, #7
 8000bfa:	408d      	lsls	r5, r1
 8000bfc:	ea23 0305 	bic.w	r3, r3, r5
 8000c00:	fa02 f101 	lsl.w	r1, r2, r1
 8000c04:	4319      	orrs	r1, r3
 8000c06:	5021      	str	r1, [r4, r0]
 8000c08:	bd30      	pop	{r4, r5, pc}

08000c0a <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c0a:	6880      	ldr	r0, [r0, #8]
}
 8000c0c:	f000 0001 	and.w	r0, r0, #1
 8000c10:	4770      	bx	lr

08000c12 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c12:	6880      	ldr	r0, [r0, #8]
}
 8000c14:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000c18:	4770      	bx	lr
	...

08000c1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000c22:	4604      	mov	r4, r0
 8000c24:	2800      	cmp	r0, #0
 8000c26:	f000 8085 	beq.w	8000d34 <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c2a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000c2c:	b925      	cbnz	r5, 8000c38 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c2e:	f7ff fc9d 	bl	800056c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c32:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c34:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000c38:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c3a:	6883      	ldr	r3, [r0, #8]
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	d47b      	bmi.n	8000d38 <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c40:	6883      	ldr	r3, [r0, #8]
 8000c42:	00dd      	lsls	r5, r3, #3
 8000c44:	d57f      	bpl.n	8000d46 <HAL_ADC_Init+0x12a>
 8000c46:	6883      	ldr	r3, [r0, #8]
 8000c48:	00d9      	lsls	r1, r3, #3
 8000c4a:	f140 808a 	bpl.w	8000d62 <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c4e:	2100      	movs	r1, #0

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c50:	f7ff ffdf 	bl	8000c12 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c56:	f013 0f10 	tst.w	r3, #16
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c5c:	d167      	bne.n	8000d2e <HAL_ADC_Init+0x112>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d165      	bne.n	8000d2e <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 8000c62:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c6c:	6820      	ldr	r0, [r4, #0]
 8000c6e:	f7ff ffcc 	bl	8000c0a <LL_ADC_IsEnabled>
 8000c72:	b998      	cbnz	r0, 8000c9c <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c74:	4852      	ldr	r0, [pc, #328]	; (8000dc0 <HAL_ADC_Init+0x1a4>)
 8000c76:	f7ff ffc8 	bl	8000c0a <LL_ADC_IsEnabled>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4851      	ldr	r0, [pc, #324]	; (8000dc4 <HAL_ADC_Init+0x1a8>)
 8000c7e:	f7ff ffc4 	bl	8000c0a <LL_ADC_IsEnabled>
 8000c82:	4303      	orrs	r3, r0
 8000c84:	4850      	ldr	r0, [pc, #320]	; (8000dc8 <HAL_ADC_Init+0x1ac>)
 8000c86:	f7ff ffc0 	bl	8000c0a <LL_ADC_IsEnabled>
 8000c8a:	4303      	orrs	r3, r0
 8000c8c:	d106      	bne.n	8000c9c <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c8e:	4a4f      	ldr	r2, [pc, #316]	; (8000dcc <HAL_ADC_Init+0x1b0>)
 8000c90:	6860      	ldr	r0, [r4, #4]
 8000c92:	6893      	ldr	r3, [r2, #8]
 8000c94:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8000c9c:	68e0      	ldr	r0, [r4, #12]
 8000c9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ca0:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8000ca4:	4303      	orrs	r3, r0
 8000ca6:	68a0      	ldr	r0, [r4, #8]
 8000ca8:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000caa:	7e60      	ldrb	r0, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cac:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 8000cae:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000cb6:	bf02      	ittt	eq
 8000cb8:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8000cba:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000cbe:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000cc4:	b122      	cbz	r2, 8000cd0 <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8000cc6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cc8:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000ccc:	4302      	orrs	r2, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cce:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000cd0:	6820      	ldr	r0, [r4, #0]
 8000cd2:	4a3f      	ldr	r2, [pc, #252]	; (8000dd0 <HAL_ADC_Init+0x1b4>)
 8000cd4:	68c5      	ldr	r5, [r0, #12]
 8000cd6:	402a      	ands	r2, r5
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cdc:	f7ff ff99 	bl	8000c12 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ce0:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	0712      	lsls	r2, r2, #28
 8000ce6:	d546      	bpl.n	8000d76 <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ce8:	6922      	ldr	r2, [r4, #16]
 8000cea:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000cec:	bf05      	ittet	eq
 8000cee:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8000cf0:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000cf2:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000cf4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000cf8:	bf06      	itte	eq
 8000cfa:	f020 000f 	biceq.w	r0, r0, #15
 8000cfe:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d00:	f022 020f 	bicne.w	r2, r2, #15
 8000d04:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d08:	f023 0303 	bic.w	r3, r3, #3
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000d12:	4608      	mov	r0, r1
 8000d14:	b003      	add	sp, #12
 8000d16:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8000d18:	9b01      	ldr	r3, [sp, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000d1e:	9b01      	ldr	r3, [sp, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f9      	bne.n	8000d18 <HAL_ADC_Init+0xfc>
 8000d24:	e78f      	b.n	8000c46 <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d26:	691a      	ldr	r2, [r3, #16]
 8000d28:	f022 0201 	bic.w	r2, r2, #1
 8000d2c:	e045      	b.n	8000dba <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8000d34:	2101      	movs	r1, #1
 8000d36:	e7ec      	b.n	8000d12 <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d38:	6883      	ldr	r3, [r0, #8]
 8000d3a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d42:	6083      	str	r3, [r0, #8]
 8000d44:	e77c      	b.n	8000c40 <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 8000d46:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000d48:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <HAL_ADC_Init+0x1b8>)
 8000d4a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000d4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d56:	6083      	str	r3, [r0, #8]
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <HAL_ADC_Init+0x1bc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d60:	e7dc      	b.n	8000d1c <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d64:	f043 0310 	orr.w	r3, r3, #16
 8000d68:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000d72:	2101      	movs	r1, #1
 8000d74:	e76c      	b.n	8000c50 <HAL_ADC_Init+0x34>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d1b6      	bne.n	8000ce8 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d7a:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d7c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d80:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d82:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d84:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d88:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d8c:	f020 0002 	bic.w	r0, r0, #2
 8000d90:	4302      	orrs	r2, r0
 8000d92:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000d94:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8000d98:	2a01      	cmp	r2, #1
 8000d9a:	d1c4      	bne.n	8000d26 <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 8000d9c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8000d9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000da0:	6918      	ldr	r0, [r3, #16]
 8000da2:	432a      	orrs	r2, r5
 8000da4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8000da6:	f042 0201 	orr.w	r2, r2, #1
 8000daa:	432a      	orrs	r2, r5
 8000dac:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000dae:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8000db2:	432a      	orrs	r2, r5
 8000db4:	f020 0004 	bic.w	r0, r0, #4
 8000db8:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	e794      	b.n	8000ce8 <HAL_ADC_Init+0xcc>
 8000dbe:	bf00      	nop
 8000dc0:	50040000 	.word	0x50040000
 8000dc4:	50040100 	.word	0x50040100
 8000dc8:	50040200 	.word	0x50040200
 8000dcc:	50040300 	.word	0x50040300
 8000dd0:	fff0c007 	.word	0xfff0c007
 8000dd4:	00030d40 	.word	0x00030d40
 8000dd8:	20000000 	.word	0x20000000

08000ddc <HAL_ADC_ConvCpltCallback>:
 8000ddc:	4770      	bx	lr

08000dde <HAL_ADC_ConvHalfCpltCallback>:
 8000dde:	4770      	bx	lr

08000de0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000de0:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000de2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000de4:	f7ff fffb 	bl	8000dde <HAL_ADC_ConvHalfCpltCallback>
 8000de8:	bd08      	pop	{r3, pc}

08000dea <HAL_ADC_ErrorCallback>:
{
 8000dea:	4770      	bx	lr

08000dec <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000dec:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8000dee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000df0:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8000df4:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000df6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8000df8:	d121      	bne.n	8000e3e <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dfe:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	6811      	ldr	r1, [r2, #0]
 8000e04:	0708      	lsls	r0, r1, #28
 8000e06:	d507      	bpl.n	8000e18 <ADC_DMAConvCplt+0x2c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e08:	68d1      	ldr	r1, [r2, #12]
 8000e0a:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8000e0e:	d112      	bne.n	8000e36 <ADC_DMAConvCplt+0x4a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8000e10:	68d2      	ldr	r2, [r2, #12]
 8000e12:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8000e16:	e002      	b.n	8000e1e <ADC_DMAConvCplt+0x32>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8000e18:	68d2      	ldr	r2, [r2, #12]
 8000e1a:	f012 0f02 	tst.w	r2, #2
 8000e1e:	d10a      	bne.n	8000e36 <ADC_DMAConvCplt+0x4a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000e22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e26:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000e2a:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e2c:	bf5e      	ittt	pl
 8000e2e:	6d5a      	ldrpl	r2, [r3, #84]	; 0x54
 8000e30:	f042 0201 	orrpl.w	r2, r2, #1
 8000e34:	655a      	strpl	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ffd0 	bl	8000ddc <HAL_ADC_ConvCpltCallback>
 8000e3c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000e3e:	06d2      	lsls	r2, r2, #27
 8000e40:	d503      	bpl.n	8000e4a <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ffd1 	bl	8000dea <HAL_ADC_ErrorCallback>
 8000e48:	bd10      	pop	{r4, pc}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e52:	4718      	bx	r3

08000e54 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e54:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8000e56:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000e58:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000e60:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000e68:	f7ff ffbf 	bl	8000dea <HAL_ADC_ErrorCallback>
 8000e6c:	bd08      	pop	{r3, pc}
	...

08000e70 <HAL_ADC_ConfigChannel>:
{
 8000e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000e76:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000e7a:	2b01      	cmp	r3, #1
{
 8000e7c:	4605      	mov	r5, r0
 8000e7e:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8000e80:	f000 8184 	beq.w	800118c <HAL_ADC_ConfigChannel+0x31c>
 8000e84:	2301      	movs	r3, #1
 8000e86:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e8a:	6800      	ldr	r0, [r0, #0]
 8000e8c:	f7ff fec1 	bl	8000c12 <LL_ADC_REG_IsConversionOngoing>
 8000e90:	2800      	cmp	r0, #0
 8000e92:	f040 8175 	bne.w	8001180 <HAL_ADC_ConfigChannel+0x310>
    if (sConfig->Rank <= 5U)
 8000e96:	684b      	ldr	r3, [r1, #4]
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d808      	bhi.n	8000eae <HAL_ADC_ConfigChannel+0x3e>
      switch (sConfig->Rank)
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d866      	bhi.n	8000f70 <HAL_ADC_ConfigChannel+0x100>
 8000ea2:	e8df f003 	tbb	[pc, r3]
 8000ea6:	5e02      	.short	0x5e02
 8000ea8:	6260      	.short	0x6260
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8000eaa:	230c      	movs	r3, #12
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8000eac:	6063      	str	r3, [r4, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000eae:	6862      	ldr	r2, [r4, #4]
 8000eb0:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8000eb2:	6823      	ldr	r3, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000eb4:	0991      	lsrs	r1, r2, #6
 8000eb6:	f001 010c 	and.w	r1, r1, #12
 8000eba:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 8000ebe:	f002 021f 	and.w	r2, r2, #31
 8000ec2:	59ce      	ldr	r6, [r1, r7]
 8000ec4:	f04f 0e1f 	mov.w	lr, #31
 8000ec8:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	fa0e f202 	lsl.w	r2, lr, r2
 8000ed2:	ea26 0202 	bic.w	r2, r6, r2
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	51cb      	str	r3, [r1, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000eda:	f7ff fe9a 	bl	8000c12 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ede:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	0711      	lsls	r1, r2, #28
 8000ee4:	f140 8154 	bpl.w	8001190 <HAL_ADC_ConfigChannel+0x320>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ee8:	6828      	ldr	r0, [r5, #0]
 8000eea:	f7ff fe8e 	bl	8000c0a <LL_ADC_IsEnabled>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	f040 80d3 	bne.w	800109a <HAL_ADC_ConfigChannel+0x22a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000ef4:	68e6      	ldr	r6, [r4, #12]
 8000ef6:	6828      	ldr	r0, [r5, #0]
 8000ef8:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8000efa:	4aba      	ldr	r2, [pc, #744]	; (80011e4 <HAL_ADC_ConfigChannel+0x374>)
 8000efc:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8000f00:	f006 0e18 	and.w	lr, r6, #24
 8000f04:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8000f08:	fa22 f20e 	lsr.w	r2, r2, lr
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	ea21 0107 	bic.w	r1, r1, r7
 8000f12:	430a      	orrs	r2, r1
 8000f14:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000f18:	4ab3      	ldr	r2, [pc, #716]	; (80011e8 <HAL_ADC_ConfigChannel+0x378>)
 8000f1a:	4296      	cmp	r6, r2
 8000f1c:	f040 80bd 	bne.w	800109a <HAL_ADC_ConfigChannel+0x22a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f20:	2f00      	cmp	r7, #0
 8000f22:	f040 808f 	bne.w	8001044 <HAL_ADC_ConfigChannel+0x1d4>
 8000f26:	0e9e      	lsrs	r6, r3, #26
 8000f28:	3601      	adds	r6, #1
 8000f2a:	f006 021f 	and.w	r2, r6, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f2e:	2a09      	cmp	r2, #9
 8000f30:	f04f 0101 	mov.w	r1, #1
 8000f34:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8000f38:	f240 809e 	bls.w	8001078 <HAL_ADC_ConfigChannel+0x208>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f3c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000f40:	4091      	lsls	r1, r2
 8000f42:	ea41 0206 	orr.w	r2, r1, r6
 8000f46:	2f00      	cmp	r7, #0
 8000f48:	f040 80c7 	bne.w	80010da <HAL_ADC_ConfigChannel+0x26a>
 8000f4c:	0e9b      	lsrs	r3, r3, #26
 8000f4e:	3301      	adds	r3, #1
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000f58:	391e      	subs	r1, #30
 8000f5a:	0509      	lsls	r1, r1, #20
 8000f5c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000f60:	e097      	b.n	8001092 <HAL_ADC_ConfigChannel+0x222>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8000f62:	2312      	movs	r3, #18
 8000f64:	e7a2      	b.n	8000eac <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000f66:	2318      	movs	r3, #24
 8000f68:	e7a0      	b.n	8000eac <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6e:	e79d      	b.n	8000eac <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8000f70:	2306      	movs	r3, #6
 8000f72:	e79b      	b.n	8000eac <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f74:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8000f76:	6e19      	ldr	r1, [r3, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f78:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8000f7c:	f3c1 6184 	ubfx	r1, r1, #26, #5
 8000f80:	2e00      	cmp	r6, #0
 8000f82:	d13e      	bne.n	8001002 <HAL_ADC_ConfigChannel+0x192>
 8000f84:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000f88:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 8000f8a:	bf02      	ittt	eq
 8000f8c:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000f8e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000f92:	661a      	streq	r2, [r3, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f96:	6822      	ldr	r2, [r4, #0]
 8000f98:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8000f9a:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8000f9e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8000fa2:	f100 010c 	add.w	r1, r0, #12
 8000fa6:	bb8f      	cbnz	r7, 800100c <HAL_ADC_ConfigChannel+0x19c>
 8000fa8:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8000fac:	42be      	cmp	r6, r7
 8000fae:	f040 8112 	bne.w	80011d6 <HAL_ADC_ConfigChannel+0x366>
  MODIFY_REG(*preg,
 8000fb2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000fb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fb8:	665a      	str	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000fba:	6822      	ldr	r2, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fbc:	6883      	ldr	r3, [r0, #8]
 8000fbe:	6883      	ldr	r3, [r0, #8]
 8000fc0:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fc4:	f100 0608 	add.w	r6, r0, #8
 8000fc8:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000fcc:	bb57      	cbnz	r7, 8001024 <HAL_ADC_ConfigChannel+0x1b4>
 8000fce:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	f040 811c 	bne.w	8001210 <HAL_ADC_ConfigChannel+0x3a0>
  MODIFY_REG(*preg,
 8000fd8:	6833      	ldr	r3, [r6, #0]
 8000fda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fde:	6033      	str	r3, [r6, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fe0:	68c3      	ldr	r3, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	68c2      	ldr	r2, [r0, #12]
 8000fe6:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8000fea:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000fee:	bb20      	cbnz	r0, 800103a <HAL_ADC_ConfigChannel+0x1ca>
 8000ff0:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000ff4:	4293      	cmp	r3, r2
  MODIFY_REG(*preg,
 8000ff6:	bf02      	ittt	eq
 8000ff8:	680b      	ldreq	r3, [r1, #0]
 8000ffa:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8000ffe:	600b      	streq	r3, [r1, #0]
 8001000:	e772      	b.n	8000ee8 <HAL_ADC_ConfigChannel+0x78>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001006:	fab2 f282 	clz	r2, r2
 800100a:	e7bd      	b.n	8000f88 <HAL_ADC_ConfigChannel+0x118>
 800100c:	fa92 f7a2 	rbit	r7, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001010:	fab7 f787 	clz	r7, r7
 8001014:	42be      	cmp	r6, r7
 8001016:	d0cc      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x142>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001018:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800101c:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 800101e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001020:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001024:	fa92 f2a2 	rbit	r2, r2
 8001028:	fab2 f282 	clz	r2, r2
 800102c:	429a      	cmp	r2, r3
 800102e:	d0d3      	beq.n	8000fd8 <HAL_ADC_ConfigChannel+0x168>
 8001030:	68c3      	ldr	r3, [r0, #12]
 8001032:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	fab3 f383 	clz	r3, r3
 8001042:	e7d7      	b.n	8000ff4 <HAL_ADC_ConfigChannel+0x184>
 8001044:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001048:	fab2 f282 	clz	r2, r2
 800104c:	3201      	adds	r2, #1
 800104e:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001052:	2a09      	cmp	r2, #9
 8001054:	d830      	bhi.n	80010b8 <HAL_ADC_ConfigChannel+0x248>
 8001056:	fa93 f6a3 	rbit	r6, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800105a:	fab6 f686 	clz	r6, r6
 800105e:	3601      	adds	r6, #1
 8001060:	06b6      	lsls	r6, r6, #26
 8001062:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001066:	fa93 f1a3 	rbit	r1, r3
 800106a:	fab1 f181 	clz	r1, r1
 800106e:	3101      	adds	r1, #1
 8001070:	f001 021f 	and.w	r2, r1, #31
 8001074:	2101      	movs	r1, #1
 8001076:	e001      	b.n	800107c <HAL_ADC_ConfigChannel+0x20c>
 8001078:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800107c:	4091      	lsls	r1, r2
 800107e:	ea41 0206 	orr.w	r2, r1, r6
 8001082:	b9a7      	cbnz	r7, 80010ae <HAL_ADC_ConfigChannel+0x23e>
 8001084:	0e99      	lsrs	r1, r3, #26
 8001086:	3101      	adds	r1, #1
 8001088:	f001 011f 	and.w	r1, r1, #31
 800108c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001090:	0509      	lsls	r1, r1, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001092:	4311      	orrs	r1, r2
 8001094:	68a2      	ldr	r2, [r4, #8]
 8001096:	f7ff fda7 	bl	8000be8 <LL_ADC_SetChannelSamplingTime>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800109a:	6822      	ldr	r2, [r4, #0]
 800109c:	4b53      	ldr	r3, [pc, #332]	; (80011ec <HAL_ADC_ConfigChannel+0x37c>)
 800109e:	421a      	tst	r2, r3
 80010a0:	d120      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x274>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80010a4:	2300      	movs	r3, #0
 80010a6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 80010aa:	b003      	add	sp, #12
 80010ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ae:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010b2:	fab1 f181 	clz	r1, r1
 80010b6:	e7e6      	b.n	8001086 <HAL_ADC_ConfigChannel+0x216>
 80010b8:	fa93 f2a3 	rbit	r2, r3
 80010bc:	fab2 f282 	clz	r2, r2
 80010c0:	3201      	adds	r2, #1
 80010c2:	0692      	lsls	r2, r2, #26
 80010c4:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 80010c8:	fa93 f1a3 	rbit	r1, r3
 80010cc:	fab1 f181 	clz	r1, r1
 80010d0:	3101      	adds	r1, #1
 80010d2:	f001 021f 	and.w	r2, r1, #31
 80010d6:	2101      	movs	r1, #1
 80010d8:	e732      	b.n	8000f40 <HAL_ADC_ConfigChannel+0xd0>
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	fab3 f383 	clz	r3, r3
 80010e2:	e734      	b.n	8000f4e <HAL_ADC_ConfigChannel+0xde>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010e4:	4942      	ldr	r1, [pc, #264]	; (80011f0 <HAL_ADC_ConfigChannel+0x380>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80010e6:	4b43      	ldr	r3, [pc, #268]	; (80011f4 <HAL_ADC_ConfigChannel+0x384>)
 80010e8:	6888      	ldr	r0, [r1, #8]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80010f0:	460c      	mov	r4, r1
 80010f2:	d11e      	bne.n	8001132 <HAL_ADC_ConfigChannel+0x2c2>
 80010f4:	0202      	lsls	r2, r0, #8
 80010f6:	d4d4      	bmi.n	80010a2 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80010f8:	682b      	ldr	r3, [r5, #0]
 80010fa:	4a3f      	ldr	r2, [pc, #252]	; (80011f8 <HAL_ADC_ConfigChannel+0x388>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d003      	beq.n	8001108 <HAL_ADC_ConfigChannel+0x298>
 8001100:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001104:	4293      	cmp	r3, r2
 8001106:	d1cc      	bne.n	80010a2 <HAL_ADC_ConfigChannel+0x232>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001108:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800110a:	4a3c      	ldr	r2, [pc, #240]	; (80011fc <HAL_ADC_ConfigChannel+0x38c>)
 800110c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001110:	4333      	orrs	r3, r6
 8001112:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001116:	60a3      	str	r3, [r4, #8]
 8001118:	4b39      	ldr	r3, [pc, #228]	; (8001200 <HAL_ADC_ConfigChannel+0x390>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001120:	230c      	movs	r3, #12
 8001122:	4353      	muls	r3, r2
            wait_loop_index--;
 8001124:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001126:	9b01      	ldr	r3, [sp, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0ba      	beq.n	80010a2 <HAL_ADC_ConfigChannel+0x232>
            wait_loop_index--;
 800112c:	9b01      	ldr	r3, [sp, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	e7f8      	b.n	8001124 <HAL_ADC_ConfigChannel+0x2b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001132:	4b34      	ldr	r3, [pc, #208]	; (8001204 <HAL_ADC_ConfigChannel+0x394>)
 8001134:	429a      	cmp	r2, r3
 8001136:	d111      	bne.n	800115c <HAL_ADC_ConfigChannel+0x2ec>
 8001138:	01c3      	lsls	r3, r0, #7
 800113a:	d4b2      	bmi.n	80010a2 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800113c:	682b      	ldr	r3, [r5, #0]
 800113e:	4a2e      	ldr	r2, [pc, #184]	; (80011f8 <HAL_ADC_ConfigChannel+0x388>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d003      	beq.n	800114c <HAL_ADC_ConfigChannel+0x2dc>
 8001144:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001148:	4293      	cmp	r3, r2
 800114a:	d1aa      	bne.n	80010a2 <HAL_ADC_ConfigChannel+0x232>
 800114c:	68a3      	ldr	r3, [r4, #8]
 800114e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001152:	4333      	orrs	r3, r6
 8001154:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001158:	60a3      	str	r3, [r4, #8]
 800115a:	e7a2      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x232>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800115c:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <HAL_ADC_ConfigChannel+0x398>)
 800115e:	429a      	cmp	r2, r3
 8001160:	d19f      	bne.n	80010a2 <HAL_ADC_ConfigChannel+0x232>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001162:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001166:	d19c      	bne.n	80010a2 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001168:	682a      	ldr	r2, [r5, #0]
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <HAL_ADC_ConfigChannel+0x388>)
 800116c:	429a      	cmp	r2, r3
 800116e:	d198      	bne.n	80010a2 <HAL_ADC_ConfigChannel+0x232>
 8001170:	688b      	ldr	r3, [r1, #8]
 8001172:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001176:	4333      	orrs	r3, r6
 8001178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800117c:	608b      	str	r3, [r1, #8]
 800117e:	e791      	b.n	80010a4 <HAL_ADC_ConfigChannel+0x234>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001180:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8001182:	f042 0220 	orr.w	r2, r2, #32
 8001186:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001188:	4618      	mov	r0, r3
 800118a:	e78b      	b.n	80010a4 <HAL_ADC_ConfigChannel+0x234>
  __HAL_LOCK(hadc);
 800118c:	2002      	movs	r0, #2
 800118e:	e78c      	b.n	80010aa <HAL_ADC_ConfigChannel+0x23a>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001190:	2800      	cmp	r0, #0
 8001192:	f47f aea9 	bne.w	8000ee8 <HAL_ADC_ConfigChannel+0x78>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001196:	4618      	mov	r0, r3
 8001198:	68a2      	ldr	r2, [r4, #8]
 800119a:	6821      	ldr	r1, [r4, #0]
 800119c:	f7ff fd24 	bl	8000be8 <LL_ADC_SetChannelSamplingTime>
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011a0:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80011a2:	682b      	ldr	r3, [r5, #0]
 80011a4:	6822      	ldr	r2, [r4, #0]
 80011a6:	68d9      	ldr	r1, [r3, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011a8:	2e04      	cmp	r6, #4
 80011aa:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80011ae:	f43f aee1 	beq.w	8000f74 <HAL_ADC_ConfigChannel+0x104>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80011b2:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 80011b6:	0059      	lsls	r1, r3, #1
 80011b8:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(*preg,
 80011ba:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80011be:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80011c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011c6:	408b      	lsls	r3, r1
 80011c8:	4313      	orrs	r3, r2
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_ADC_ConfigChannel+0x39c>)
 80011cc:	403a      	ands	r2, r7
 80011ce:	4313      	orrs	r3, r2
 80011d0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
 80011d4:	e688      	b.n	8000ee8 <HAL_ADC_ConfigChannel+0x78>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011d6:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011da:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80011dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011de:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80011e2:	e6f4      	b.n	8000fce <HAL_ADC_ConfigChannel+0x15e>
 80011e4:	0007ffff 	.word	0x0007ffff
 80011e8:	407f0000 	.word	0x407f0000
 80011ec:	80080000 	.word	0x80080000
 80011f0:	50040300 	.word	0x50040300
 80011f4:	c7520000 	.word	0xc7520000
 80011f8:	50040000 	.word	0x50040000
 80011fc:	00030d40 	.word	0x00030d40
 8001200:	20000000 	.word	0x20000000
 8001204:	cb840000 	.word	0xcb840000
 8001208:	80000001 	.word	0x80000001
 800120c:	03fff000 	.word	0x03fff000
 8001210:	68c3      	ldr	r3, [r0, #12]
 8001212:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800121a:	e6e9      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x180>

0800121c <ADC_Enable>:
{
 800121c:	b570      	push	{r4, r5, r6, lr}
 800121e:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001220:	6800      	ldr	r0, [r0, #0]
 8001222:	f7ff fcf2 	bl	8000c0a <LL_ADC_IsEnabled>
 8001226:	b108      	cbz	r0, 800122c <ADC_Enable+0x10>
  return HAL_OK;
 8001228:	2000      	movs	r0, #0
 800122a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800122c:	6822      	ldr	r2, [r4, #0]
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <ADC_Enable+0x68>)
 8001230:	6891      	ldr	r1, [r2, #8]
 8001232:	4219      	tst	r1, r3
 8001234:	d009      	beq.n	800124a <ADC_Enable+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001236:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001238:	f043 0310 	orr.w	r3, r3, #16
 800123c:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8001246:	2001      	movs	r0, #1
 8001248:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800124a:	6893      	ldr	r3, [r2, #8]
 800124c:	4d0e      	ldr	r5, [pc, #56]	; (8001288 <ADC_Enable+0x6c>)
 800124e:	402b      	ands	r3, r5
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001256:	f7ff fcad 	bl	8000bb4 <HAL_GetTick>
 800125a:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800125c:	6820      	ldr	r0, [r4, #0]
 800125e:	6803      	ldr	r3, [r0, #0]
 8001260:	07db      	lsls	r3, r3, #31
 8001262:	d4e1      	bmi.n	8001228 <ADC_Enable+0xc>
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001264:	f7ff fcd1 	bl	8000c0a <LL_ADC_IsEnabled>
 8001268:	b928      	cbnz	r0, 8001276 <ADC_Enable+0x5a>
        LL_ADC_Enable(hadc->Instance);
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	6893      	ldr	r3, [r2, #8]
 800126e:	402b      	ands	r3, r5
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6093      	str	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001276:	f7ff fc9d 	bl	8000bb4 <HAL_GetTick>
 800127a:	1b80      	subs	r0, r0, r6
 800127c:	2802      	cmp	r0, #2
 800127e:	d9ed      	bls.n	800125c <ADC_Enable+0x40>
 8001280:	e7d9      	b.n	8001236 <ADC_Enable+0x1a>
 8001282:	bf00      	nop
 8001284:	8000003f 	.word	0x8000003f
 8001288:	7fffffc0 	.word	0x7fffffc0

0800128c <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800128c:	4b39      	ldr	r3, [pc, #228]	; (8001374 <HAL_ADC_Start_DMA+0xe8>)
{
 800128e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001292:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001294:	6800      	ldr	r0, [r0, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
{
 8001298:	460e      	mov	r6, r1
 800129a:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800129c:	f7ff fcb9 	bl	8000c12 <LL_ADC_REG_IsConversionOngoing>
 80012a0:	2800      	cmp	r0, #0
 80012a2:	d15f      	bne.n	8001364 <HAL_ADC_Start_DMA+0xd8>
    __HAL_LOCK(hadc);
 80012a4:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80012a8:	2a01      	cmp	r2, #1
 80012aa:	d05b      	beq.n	8001364 <HAL_ADC_Start_DMA+0xd8>
 80012ac:	f003 081f 	and.w	r8, r3, #31
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012b0:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 80012b4:	f04f 0301 	mov.w	r3, #1
 80012b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012bc:	bf9e      	ittt	ls
 80012be:	f240 2321 	movwls	r3, #545	; 0x221
 80012c2:	fa23 f308 	lsrls.w	r3, r3, r8
 80012c6:	43db      	mvnls	r3, r3
 80012c8:	f013 0501 	ands.w	r5, r3, #1
 80012cc:	d144      	bne.n	8001358 <HAL_ADC_Start_DMA+0xcc>
      tmp_hal_status = ADC_Enable(hadc);
 80012ce:	4620      	mov	r0, r4
 80012d0:	f7ff ffa4 	bl	800121c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d13b      	bne.n	8001350 <HAL_ADC_Start_DMA+0xc4>
        ADC_STATE_CLR_SET(hadc->State,
 80012d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012da:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80012dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_ADC_Start_DMA+0xec>)
 80012ec:	4299      	cmp	r1, r3
 80012ee:	d03c      	beq.n	800136a <HAL_ADC_Start_DMA+0xde>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012f6:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80012f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012fa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80012fc:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001300:	bf1c      	itt	ne
 8001302:	6da3      	ldrne	r3, [r4, #88]	; 0x58
 8001304:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8001308:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_ADC_Start_DMA+0xf0>)
 800130c:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <HAL_ADC_Start_DMA+0xf4>)
 8001310:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <HAL_ADC_Start_DMA+0xf8>)
 8001314:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001316:	231c      	movs	r3, #28
 8001318:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 800131a:	2300      	movs	r3, #0
 800131c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001320:	684b      	ldr	r3, [r1, #4]
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001328:	68cb      	ldr	r3, [r1, #12]
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001330:	4632      	mov	r2, r6
 8001332:	463b      	mov	r3, r7
 8001334:	3140      	adds	r1, #64	; 0x40
 8001336:	f000 fbb7 	bl	8001aa8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800133a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800133c:	6893      	ldr	r3, [r2, #8]
 800133e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001342:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6093      	str	r3, [r2, #8]
 800134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8001350:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8001354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UNLOCK(hadc);
 8001358:	2300      	movs	r3, #0
 800135a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 800135e:	2001      	movs	r0, #1
 8001360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 8001364:	2002      	movs	r0, #2
 8001366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800136a:	f1b8 0f00 	cmp.w	r8, #0
 800136e:	d0bf      	beq.n	80012f0 <HAL_ADC_Start_DMA+0x64>
 8001370:	e7c2      	b.n	80012f8 <HAL_ADC_Start_DMA+0x6c>
 8001372:	bf00      	nop
 8001374:	50040300 	.word	0x50040300
 8001378:	50040100 	.word	0x50040100
 800137c:	08000ded 	.word	0x08000ded
 8001380:	08000de1 	.word	0x08000de1
 8001384:	08000e55 	.word	0x08000e55

08001388 <ADC_Disable>:
{
 8001388:	b538      	push	{r3, r4, r5, lr}
 800138a:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800138c:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800138e:	6883      	ldr	r3, [r0, #8]
 8001390:	f003 0302 	and.w	r3, r3, #2
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001394:	f7ff fc39 	bl	8000c0a <LL_ADC_IsEnabled>
 8001398:	b908      	cbnz	r0, 800139e <ADC_Disable+0x16>
  return HAL_OK;
 800139a:	2000      	movs	r0, #0
 800139c:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1fb      	bne.n	800139a <ADC_Disable+0x12>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80013a2:	6822      	ldr	r2, [r4, #0]
 80013a4:	6893      	ldr	r3, [r2, #8]
 80013a6:	f003 030d 	and.w	r3, r3, #13
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d115      	bne.n	80013da <ADC_Disable+0x52>
  MODIFY_REG(ADCx->CR,
 80013ae:	6893      	ldr	r3, [r2, #8]
 80013b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80013be:	2303      	movs	r3, #3
 80013c0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80013c2:	f7ff fbf7 	bl	8000bb4 <HAL_GetTick>
 80013c6:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	07db      	lsls	r3, r3, #31
 80013ce:	d5e4      	bpl.n	800139a <ADC_Disable+0x12>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013d0:	f7ff fbf0 	bl	8000bb4 <HAL_GetTick>
 80013d4:	1b40      	subs	r0, r0, r5
 80013d6:	2802      	cmp	r0, #2
 80013d8:	d9f6      	bls.n	80013c8 <ADC_Disable+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80013ea:	2001      	movs	r0, #1
 80013ec:	bd38      	pop	{r3, r4, r5, pc}

080013ee <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013ee:	6880      	ldr	r0, [r0, #8]
}
 80013f0:	f000 0001 	and.w	r0, r0, #1
 80013f4:	4770      	bx	lr

080013f6 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013f6:	6880      	ldr	r0, [r0, #8]
}
 80013f8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80013fc:	4770      	bx	lr
	...

08001400 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001400:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001402:	2300      	movs	r3, #0
 8001404:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001406:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800140a:	2b01      	cmp	r3, #1
{
 800140c:	4604      	mov	r4, r0
 800140e:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8001410:	d036      	beq.n	8001480 <HAL_ADCEx_Calibration_Start+0x80>
 8001412:	2301      	movs	r3, #1
 8001414:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001418:	f7ff ffb6 	bl	8001388 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800141c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (tmp_hal_status == HAL_OK)
 800141e:	bb40      	cbnz	r0, 8001472 <HAL_ADCEx_Calibration_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 8001420:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001424:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001428:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	6563      	str	r3, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8001430:	6891      	ldr	r1, [r2, #8]
 8001432:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8001436:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800143a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800143e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001442:	430d      	orrs	r5, r1

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001444:	4912      	ldr	r1, [pc, #72]	; (8001490 <HAL_ADCEx_Calibration_Start+0x90>)
 8001446:	6095      	str	r5, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001448:	6893      	ldr	r3, [r2, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	da1a      	bge.n	8001484 <HAL_ADCEx_Calibration_Start+0x84>
      wait_loop_index++;
 800144e:	9b01      	ldr	r3, [sp, #4]
 8001450:	3301      	adds	r3, #1
 8001452:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001454:	9b01      	ldr	r3, [sp, #4]
 8001456:	428b      	cmp	r3, r1
 8001458:	d9f6      	bls.n	8001448 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800145a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800145c:	f023 0312 	bic.w	r3, r3, #18
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	6563      	str	r3, [r4, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001466:	2300      	movs	r3, #0
 8001468:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

        return HAL_ERROR;
 800146c:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800146e:	b003      	add	sp, #12
 8001470:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001472:	f043 0310 	orr.w	r3, r3, #16
 8001476:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8001478:	2300      	movs	r3, #0
 800147a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return tmp_hal_status;
 800147e:	e7f6      	b.n	800146e <HAL_ADCEx_Calibration_Start+0x6e>
  __HAL_LOCK(hadc);
 8001480:	2002      	movs	r0, #2
 8001482:	e7f4      	b.n	800146e <HAL_ADCEx_Calibration_Start+0x6e>
    ADC_STATE_CLR_SET(hadc->State,
 8001484:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	e7f2      	b.n	8001476 <HAL_ADCEx_Calibration_Start+0x76>
 8001490:	000487ff 	.word	0x000487ff

08001494 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001494:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001496:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800149a:	2b01      	cmp	r3, #1
{
 800149c:	b09b      	sub	sp, #108	; 0x6c
 800149e:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80014a0:	d066      	beq.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 80014a2:	2301      	movs	r3, #1
 80014a4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80014a8:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80014aa:	6800      	ldr	r0, [r0, #0]
 80014ac:	4298      	cmp	r0, r3
 80014ae:	bf0c      	ite	eq
 80014b0:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 80014b4:	2300      	movne	r3, #0
 80014b6:	9301      	str	r3, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 80014b8:	9801      	ldr	r0, [sp, #4]
 80014ba:	b940      	cbnz	r0, 80014ce <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014bc:	6d53      	ldr	r3, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014be:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	6553      	str	r3, [r2, #84]	; 0x54

    return HAL_ERROR;
 80014c8:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80014ca:	b01b      	add	sp, #108	; 0x6c
 80014cc:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80014ce:	f7ff ff92 	bl	80013f6 <LL_ADC_REG_IsConversionOngoing>
 80014d2:	4603      	mov	r3, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014d4:	6810      	ldr	r0, [r2, #0]
 80014d6:	f7ff ff8e 	bl	80013f6 <LL_ADC_REG_IsConversionOngoing>
 80014da:	2800      	cmp	r0, #0
 80014dc:	d142      	bne.n	8001564 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d140      	bne.n	8001564 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80014e2:	680b      	ldr	r3, [r1, #0]
 80014e4:	4c24      	ldr	r4, [pc, #144]	; (8001578 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80014e6:	b333      	cbz	r3, 8001536 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80014e8:	68a3      	ldr	r3, [r4, #8]
 80014ea:	6848      	ldr	r0, [r1, #4]
 80014ec:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014f0:	4303      	orrs	r3, r0
 80014f2:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 80014f6:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 80014fa:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014fc:	481d      	ldr	r0, [pc, #116]	; (8001574 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80014fe:	f7ff ff76 	bl	80013ee <LL_ADC_IsEnabled>
 8001502:	4603      	mov	r3, r0
 8001504:	481d      	ldr	r0, [pc, #116]	; (800157c <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8001506:	f7ff ff72 	bl	80013ee <LL_ADC_IsEnabled>
 800150a:	4303      	orrs	r3, r0
 800150c:	481c      	ldr	r0, [pc, #112]	; (8001580 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 800150e:	f7ff ff6e 	bl	80013ee <LL_ADC_IsEnabled>
 8001512:	4318      	orrs	r0, r3
 8001514:	d004      	beq.n	8001520 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001516:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001518:	2300      	movs	r3, #0
 800151a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 800151e:	e7d4      	b.n	80014ca <HAL_ADCEx_MultiModeConfigChannel+0x36>
        MODIFY_REG(tmpADC_Common->CCR,
 8001520:	680b      	ldr	r3, [r1, #0]
 8001522:	68a5      	ldr	r5, [r4, #8]
 8001524:	6889      	ldr	r1, [r1, #8]
 8001526:	430b      	orrs	r3, r1
 8001528:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 800152c:	f021 010f 	bic.w	r1, r1, #15
 8001530:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001532:	60a3      	str	r3, [r4, #8]
 8001534:	e7f0      	b.n	8001518 <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001536:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001538:	480e      	ldr	r0, [pc, #56]	; (8001574 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800153a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800153e:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001540:	f7ff ff55 	bl	80013ee <LL_ADC_IsEnabled>
 8001544:	4603      	mov	r3, r0
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8001548:	f7ff ff51 	bl	80013ee <LL_ADC_IsEnabled>
 800154c:	4303      	orrs	r3, r0
 800154e:	480c      	ldr	r0, [pc, #48]	; (8001580 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8001550:	f7ff ff4d 	bl	80013ee <LL_ADC_IsEnabled>
 8001554:	4318      	orrs	r0, r3
 8001556:	d1de      	bne.n	8001516 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001558:	68a3      	ldr	r3, [r4, #8]
 800155a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800155e:	f023 030f 	bic.w	r3, r3, #15
 8001562:	e7e6      	b.n	8001532 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001564:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001566:	f043 0320 	orr.w	r3, r3, #32
 800156a:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800156c:	2001      	movs	r0, #1
 800156e:	e7d3      	b.n	8001518 <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8001570:	2002      	movs	r0, #2
 8001572:	e7aa      	b.n	80014ca <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001574:	50040000 	.word	0x50040000
 8001578:	50040300 	.word	0x50040300
 800157c:	50040100 	.word	0x50040100
 8001580:	50040200 	.word	0x50040200

08001584 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001586:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001588:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800158c:	041b      	lsls	r3, r3, #16
 800158e:	0c1b      	lsrs	r3, r3, #16
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001594:	0200      	lsls	r0, r0, #8
 8001596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800159e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80015a0:	60d3      	str	r3, [r2, #12]
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015aa:	b530      	push	{r4, r5, lr}
 80015ac:	68dc      	ldr	r4, [r3, #12]
 80015ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	bf28      	it	cs
 80015bc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 0501 	mov.w	r5, #1
 80015c4:	fa05 f303 	lsl.w	r3, r5, r3
 80015c8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015cc:	bf8c      	ite	hi
 80015ce:	3c03      	subhi	r4, #3
 80015d0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d2:	4019      	ands	r1, r3
 80015d4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d6:	fa05 f404 	lsl.w	r4, r5, r4
 80015da:	3c01      	subs	r4, #1
 80015dc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80015de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	ea42 0201 	orr.w	r2, r2, r1
 80015e4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	bfad      	iteet	ge
 80015ea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	f000 000f 	andlt.w	r0, r0, #15
 80015f2:	4b06      	ldrlt	r3, [pc, #24]	; (800160c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	bfb5      	itete	lt
 80015fa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001604:	bd30      	pop	{r4, r5, pc}
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00
 800160c:	e000ed14 	.word	0xe000ed14

08001610 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001610:	2800      	cmp	r0, #0
 8001612:	db08      	blt.n	8001626 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001614:	0942      	lsrs	r2, r0, #5
 8001616:	2301      	movs	r3, #1
 8001618:	f000 001f 	and.w	r0, r0, #31
 800161c:	fa03 f000 	lsl.w	r0, r3, r0
 8001620:	4b01      	ldr	r3, [pc, #4]	; (8001628 <HAL_NVIC_EnableIRQ+0x18>)
 8001622:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100

0800162c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	3801      	subs	r0, #1
 800162e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001632:	d20a      	bcs.n	800164a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001638:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	21f0      	movs	r1, #240	; 0xf0
 800163c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001658:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 800165a:	4604      	mov	r4, r0
 800165c:	b168      	cbz	r0, 800167a <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800165e:	7903      	ldrb	r3, [r0, #4]
 8001660:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001664:	b913      	cbnz	r3, 800166c <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001666:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001668:	f7fe fff8 	bl	800065c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800166c:	2302      	movs	r3, #2
 800166e:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001670:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001672:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001674:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001676:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8001678:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800167a:	2001      	movs	r0, #1
}
 800167c:	bd10      	pop	{r4, pc}
	...

08001680 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001682:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001684:	7940      	ldrb	r0, [r0, #5]
 8001686:	2801      	cmp	r0, #1
{
 8001688:	460e      	mov	r6, r1
 800168a:	f04f 0002 	mov.w	r0, #2
 800168e:	4611      	mov	r1, r2
 8001690:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 8001692:	d054      	beq.n	800173e <HAL_DAC_Start_DMA+0xbe>
 8001694:	2401      	movs	r4, #1
 8001696:	716c      	strb	r4, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001698:	7128      	strb	r0, [r5, #4]
 800169a:	682c      	ldr	r4, [r5, #0]

  if (Channel == DAC_CHANNEL_1)
 800169c:	b9e6      	cbnz	r6, 80016d8 <HAL_DAC_Start_DMA+0x58>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800169e:	68a8      	ldr	r0, [r5, #8]
 80016a0:	4f27      	ldr	r7, [pc, #156]	; (8001740 <HAL_DAC_Start_DMA+0xc0>)
 80016a2:	62c7      	str	r7, [r0, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80016a4:	4f27      	ldr	r7, [pc, #156]	; (8001744 <HAL_DAC_Start_DMA+0xc4>)
 80016a6:	6307      	str	r7, [r0, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80016a8:	4f27      	ldr	r7, [pc, #156]	; (8001748 <HAL_DAC_Start_DMA+0xc8>)
 80016aa:	6347      	str	r7, [r0, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80016ac:	6827      	ldr	r7, [r4, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80016ae:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80016b0:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 80016b4:	6027      	str	r7, [r4, #0]
    switch (Alignment)
 80016b6:	d009      	beq.n	80016cc <HAL_DAC_Start_DMA+0x4c>
 80016b8:	2a08      	cmp	r2, #8
 80016ba:	d00a      	beq.n	80016d2 <HAL_DAC_Start_DMA+0x52>
 80016bc:	2a00      	cmp	r2, #0
 80016be:	d13c      	bne.n	800173a <HAL_DAC_Start_DMA+0xba>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80016c0:	f104 0208 	add.w	r2, r4, #8

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80016c4:	6827      	ldr	r7, [r4, #0]
 80016c6:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 80016ca:	e01a      	b.n	8001702 <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80016cc:	f104 020c 	add.w	r2, r4, #12
        break;
 80016d0:	e7f8      	b.n	80016c4 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80016d2:	f104 0210 	add.w	r2, r4, #16
        break;
 80016d6:	e7f5      	b.n	80016c4 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80016d8:	68e8      	ldr	r0, [r5, #12]
 80016da:	4f1c      	ldr	r7, [pc, #112]	; (800174c <HAL_DAC_Start_DMA+0xcc>)
 80016dc:	62c7      	str	r7, [r0, #44]	; 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80016de:	4f1c      	ldr	r7, [pc, #112]	; (8001750 <HAL_DAC_Start_DMA+0xd0>)
 80016e0:	6307      	str	r7, [r0, #48]	; 0x30
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80016e2:	4f1c      	ldr	r7, [pc, #112]	; (8001754 <HAL_DAC_Start_DMA+0xd4>)
 80016e4:	6347      	str	r7, [r0, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80016e6:	6827      	ldr	r7, [r4, #0]
    switch (Alignment)
 80016e8:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80016ea:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 80016ee:	6027      	str	r7, [r4, #0]
    switch (Alignment)
 80016f0:	d016      	beq.n	8001720 <HAL_DAC_Start_DMA+0xa0>
 80016f2:	2a08      	cmp	r2, #8
 80016f4:	d017      	beq.n	8001726 <HAL_DAC_Start_DMA+0xa6>
 80016f6:	b9f2      	cbnz	r2, 8001736 <HAL_DAC_Start_DMA+0xb6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80016f8:	f104 0214 	add.w	r2, r4, #20
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80016fc:	6827      	ldr	r7, [r4, #0]
 80016fe:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001702:	6027      	str	r7, [r4, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001704:	f000 f9d0 	bl	8001aa8 <HAL_DMA_Start_IT>
    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001708:	2300      	movs	r3, #0
 800170a:	716b      	strb	r3, [r5, #5]

  if (status == HAL_OK)
 800170c:	b970      	cbnz	r0, 800172c <HAL_DAC_Start_DMA+0xac>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800170e:	682b      	ldr	r3, [r5, #0]
 8001710:	f006 0110 	and.w	r1, r6, #16
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	2601      	movs	r6, #1
 8001718:	408e      	lsls	r6, r1
 800171a:	4316      	orrs	r6, r2
 800171c:	601e      	str	r6, [r3, #0]
 800171e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001720:	f104 0218 	add.w	r2, r4, #24
        break;
 8001724:	e7ea      	b.n	80016fc <HAL_DAC_Start_DMA+0x7c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001726:	f104 021c 	add.w	r2, r4, #28
        break;
 800172a:	e7e7      	b.n	80016fc <HAL_DAC_Start_DMA+0x7c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800172c:	692b      	ldr	r3, [r5, #16]
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	612b      	str	r3, [r5, #16]
 8001734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpreg = 0U;
 8001736:	2200      	movs	r2, #0
 8001738:	e7e0      	b.n	80016fc <HAL_DAC_Start_DMA+0x7c>
 800173a:	4632      	mov	r2, r6
 800173c:	e7c2      	b.n	80016c4 <HAL_DAC_Start_DMA+0x44>
  }

  /* Return function status */
  return status;
}
 800173e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001740:	0800175b 	.word	0x0800175b
 8001744:	0800176d 	.word	0x0800176d
 8001748:	08001779 	.word	0x08001779
 800174c:	080019b3 	.word	0x080019b3
 8001750:	080019c3 	.word	0x080019c3
 8001754:	080019cd 	.word	0x080019cd

08001758 <HAL_DAC_ConvCpltCallbackCh1>:
 8001758:	4770      	bx	lr

0800175a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800175a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800175c:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff fffa 	bl	8001758 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001764:	2301      	movs	r3, #1
 8001766:	7123      	strb	r3, [r4, #4]
 8001768:	bd10      	pop	{r4, pc}

0800176a <HAL_DAC_ConvHalfCpltCallbackCh1>:
 800176a:	4770      	bx	lr

0800176c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800176c:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800176e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001770:	f7ff fffb 	bl	800176a <HAL_DAC_ConvHalfCpltCallbackCh1>
 8001774:	bd08      	pop	{r3, pc}

08001776 <HAL_DAC_ErrorCallbackCh1>:
 8001776:	4770      	bx	lr

08001778 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001778:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800177a:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800177c:	6923      	ldr	r3, [r4, #16]
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff fff6 	bl	8001776 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800178a:	2301      	movs	r3, #1
 800178c:	7123      	strb	r3, [r4, #4]
 800178e:	bd10      	pop	{r4, pc}

08001790 <HAL_DAC_ConfigChannel>:
{
 8001790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 8001792:	7943      	ldrb	r3, [r0, #5]
 8001794:	2b01      	cmp	r3, #1
{
 8001796:	4604      	mov	r4, r0
 8001798:	460d      	mov	r5, r1
 800179a:	4616      	mov	r6, r2
 800179c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 80017a0:	d063      	beq.n	800186a <HAL_DAC_ConfigChannel+0xda>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80017a2:	680b      	ldr	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80017a4:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 80017a6:	2201      	movs	r2, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80017a8:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 80017aa:	7162      	strb	r2, [r4, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80017ac:	d125      	bne.n	80017fa <HAL_DAC_ConfigChannel+0x6a>
    if (Channel == DAC_CHANNEL_1)
 80017ae:	2e00      	cmp	r6, #0
 80017b0:	d16c      	bne.n	800188c <HAL_DAC_ConfigChannel+0xfc>
      tickstart = HAL_GetTick();
 80017b2:	f7ff f9ff 	bl	8000bb4 <HAL_GetTick>
 80017b6:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017bc:	041b      	lsls	r3, r3, #16
 80017be:	d455      	bmi.n	800186c <HAL_DAC_ConfigChannel+0xdc>
      HAL_Delay(1);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff f9fd 	bl	8000bc0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	69aa      	ldr	r2, [r5, #24]
 80017ca:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80017cc:	6821      	ldr	r1, [r4, #0]
 80017ce:	f006 0010 	and.w	r0, r6, #16
 80017d2:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80017d4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80017d8:	4083      	lsls	r3, r0
 80017da:	ea22 0203 	bic.w	r2, r2, r3
 80017de:	69eb      	ldr	r3, [r5, #28]
 80017e0:	4083      	lsls	r3, r0
 80017e2:	431a      	orrs	r2, r3
 80017e4:	648a      	str	r2, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80017e6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80017e8:	22ff      	movs	r2, #255	; 0xff
 80017ea:	4082      	lsls	r2, r0
 80017ec:	ea23 0302 	bic.w	r3, r3, r2
 80017f0:	6a2a      	ldr	r2, [r5, #32]
 80017f2:	fa02 f000 	lsl.w	r0, r2, r0
 80017f6:	4303      	orrs	r3, r0
 80017f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80017fa:	692b      	ldr	r3, [r5, #16]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	f006 0210 	and.w	r2, r6, #16
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	d108      	bne.n	8001818 <HAL_DAC_ConfigChannel+0x88>
  tmpreg1 = hdac->Instance->CCR;
 8001806:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001808:	201f      	movs	r0, #31
 800180a:	4090      	lsls	r0, r2
 800180c:	ea21 0000 	bic.w	r0, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001810:	6969      	ldr	r1, [r5, #20]
 8001812:	4091      	lsls	r1, r2
 8001814:	4301      	orrs	r1, r0
  hdac->Instance->CCR = tmpreg1;
 8001816:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg1 = hdac->Instance->MCR;
 8001818:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800181a:	68ae      	ldr	r6, [r5, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800181c:	2007      	movs	r0, #7
 800181e:	4090      	lsls	r0, r2
 8001820:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001824:	6829      	ldr	r1, [r5, #0]
 8001826:	4331      	orrs	r1, r6
 8001828:	68ee      	ldr	r6, [r5, #12]
 800182a:	4331      	orrs	r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800182c:	4091      	lsls	r1, r2
 800182e:	4301      	orrs	r1, r0
  hdac->Instance->MCR = tmpreg1;
 8001830:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001832:	6819      	ldr	r1, [r3, #0]
 8001834:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001838:	4090      	lsls	r0, r2
 800183a:	ea21 0100 	bic.w	r1, r1, r0
 800183e:	6019      	str	r1, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8001840:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001842:	f640 70fc 	movw	r0, #4092	; 0xffc
 8001846:	4090      	lsls	r0, r2
 8001848:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800184c:	6869      	ldr	r1, [r5, #4]
 800184e:	4091      	lsls	r1, r2
 8001850:	4301      	orrs	r1, r0
  hdac->Instance->CR = tmpreg1;
 8001852:	6019      	str	r1, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001854:	6819      	ldr	r1, [r3, #0]
 8001856:	20c0      	movs	r0, #192	; 0xc0
 8001858:	fa00 f202 	lsl.w	r2, r0, r2
 800185c:	ea21 0202 	bic.w	r2, r1, r2
 8001860:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hdac);
 8001862:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001864:	2301      	movs	r3, #1
 8001866:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001868:	7160      	strb	r0, [r4, #5]
}
 800186a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800186c:	f7ff f9a2 	bl	8000bb4 <HAL_GetTick>
 8001870:	1bc0      	subs	r0, r0, r7
 8001872:	2801      	cmp	r0, #1
 8001874:	d9a0      	bls.n	80017b8 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001876:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001878:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800187a:	f043 0308 	orr.w	r3, r3, #8
 800187e:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001880:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8001882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001884:	f7ff f996 	bl	8000bb4 <HAL_GetTick>
 8001888:	2801      	cmp	r0, #1
 800188a:	d8f4      	bhi.n	8001876 <HAL_DAC_ConfigChannel+0xe6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	2b00      	cmp	r3, #0
 8001892:	dbf7      	blt.n	8001884 <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1U);
 8001894:	2001      	movs	r0, #1
 8001896:	f7ff f993 	bl	8000bc0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800189a:	6823      	ldr	r3, [r4, #0]
 800189c:	69aa      	ldr	r2, [r5, #24]
 800189e:	645a      	str	r2, [r3, #68]	; 0x44
 80018a0:	e794      	b.n	80017cc <HAL_DAC_ConfigChannel+0x3c>

080018a2 <HAL_DACEx_ConvCpltCallbackCh2>:
 80018a2:	4770      	bx	lr

080018a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80018a4:	4770      	bx	lr

080018a6 <HAL_DACEx_ErrorCallbackCh2>:
 80018a6:	4770      	bx	lr

080018a8 <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80018a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018ac:	4688      	mov	r8, r1
 80018ae:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

 /* Check the DAC handle allocation */
 /* Check if DAC running */
  if (hdac == NULL)
 80018b0:	4605      	mov	r5, r0
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d079      	beq.n	80019aa <HAL_DACEx_SelfCalibrate+0x102>
  {
    status = HAL_ERROR;
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 80018b6:	7903      	ldrb	r3, [r0, #4]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d076      	beq.n	80019aa <HAL_DACEx_SelfCalibrate+0x102>
    status = HAL_ERROR;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 80018bc:	7943      	ldrb	r3, [r0, #5]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d075      	beq.n	80019ae <HAL_DACEx_SelfCalibrate+0x106>

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 80018c2:	6829      	ldr	r1, [r5, #0]
 80018c4:	f002 0b10 	and.w	fp, r2, #16
 80018c8:	2307      	movs	r3, #7
 80018ca:	6bce      	ldr	r6, [r1, #60]	; 0x3c
    __HAL_LOCK(hdac);
 80018cc:	2001      	movs	r0, #1
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 80018ce:	fa03 f70b 	lsl.w	r7, r3, fp

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 80018d2:	680b      	ldr	r3, [r1, #0]
    __HAL_LOCK(hdac);
 80018d4:	7168      	strb	r0, [r5, #5]
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 80018d6:	fa00 f00b 	lsl.w	r0, r0, fp
 80018da:	ea23 0000 	bic.w	r0, r3, r0
 80018de:	6008      	str	r0, [r1, #0]

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 80018e0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80018e2:	ea23 0307 	bic.w	r3, r3, r7
 80018e6:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 80018e8:	9103      	str	r1, [sp, #12]
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
    if(Channel == DAC_CHANNEL_1)
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 80018ea:	9b03      	ldr	r3, [sp, #12]
    if(Channel == DAC_CHANNEL_1)
 80018ec:	2a00      	cmp	r2, #0
 80018ee:	d15a      	bne.n	80019a6 <HAL_DACEx_SelfCalibrate+0xfe>
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 80018f0:	3308      	adds	r3, #8
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 80018f2:	9303      	str	r3, [sp, #12]
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
#if defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
    tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
#endif /* STM32L451xx STM32L452xx STM32L462xx */
    *(__IO uint32_t *) tmp = 0x0800U;
 80018f4:	9b03      	ldr	r3, [sp, #12]
 80018f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018fa:	601a      	str	r2, [r3, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 80018fc:	680b      	ldr	r3, [r1, #0]
 80018fe:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 8001902:	fa0a fa0b 	lsl.w	sl, sl, fp
    trimmingvalue = 16U;
    delta = 8U;
    while (delta != 0U)
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8001906:	241f      	movs	r4, #31
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8001908:	ea43 030a 	orr.w	r3, r3, sl
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800190c:	fa04 f40b 	lsl.w	r4, r4, fp
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8001910:	600b      	str	r3, [r1, #0]
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8001912:	43e4      	mvns	r4, r4
 8001914:	2104      	movs	r1, #4
    delta = 8U;
 8001916:	2208      	movs	r2, #8
    trimmingvalue = 16U;
 8001918:	f04f 0910 	mov.w	r9, #16
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800191c:	6828      	ldr	r0, [r5, #0]
 800191e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001920:	fa09 fe0b 	lsl.w	lr, r9, fp
 8001924:	4023      	ands	r3, r4
 8001926:	ea43 030e 	orr.w	r3, r3, lr
 800192a:	6383      	str	r3, [r0, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 800192c:	2001      	movs	r0, #1
 800192e:	e88d 0006 	stmia.w	sp, {r1, r2}
 8001932:	f7ff f945 	bl	8000bc0 <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8001936:	6828      	ldr	r0, [r5, #0]
 8001938:	e89d 0006 	ldmia.w	sp, {r1, r2}
 800193c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800193e:	ea3a 0303 	bics.w	r3, sl, r3
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 8001942:	bf0c      	ite	eq
 8001944:	eba9 0902 	subeq.w	r9, r9, r2
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8001948:	4491      	addne	r9, r2
    while (delta != 0U)
 800194a:	3901      	subs	r1, #1
      }
      delta >>= 1U;
 800194c:	ea4f 0252 	mov.w	r2, r2, lsr #1
    while (delta != 0U)
 8001950:	d1e4      	bne.n	800191c <HAL_DACEx_SelfCalibrate+0x74>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8001952:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001954:	fa09 f20b 	lsl.w	r2, r9, fp
 8001958:	4023      	ands	r3, r4
 800195a:	4313      	orrs	r3, r2
 800195c:	6383      	str	r3, [r0, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 800195e:	2001      	movs	r0, #1
 8001960:	f7ff f92e 	bl	8000bc0 <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8001964:	682a      	ldr	r2, [r5, #0]
 8001966:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001968:	ea1a 0f03 	tst.w	sl, r3
 800196c:	d107      	bne.n	800197e <HAL_DACEx_SelfCalibrate+0xd6>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvalue++;
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800196e:	6b93      	ldr	r3, [r2, #56]	; 0x38
      trimmingvalue++;
 8001970:	f109 0901 	add.w	r9, r9, #1
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8001974:	401c      	ands	r4, r3
 8001976:	fa09 f30b 	lsl.w	r3, r9, fp
 800197a:	4323      	orrs	r3, r4
 800197c:	6393      	str	r3, [r2, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 800197e:	6813      	ldr	r3, [r2, #0]
 8001980:	ea23 030a 	bic.w	r3, r3, sl
 8001984:	6013      	str	r3, [r2, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8001986:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    sConfig->DAC_TrimmingValue = trimmingvalue;
 8001988:	f8c8 9014 	str.w	r9, [r8, #20]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 800198c:	2301      	movs	r3, #1
 800198e:	f8c8 3010 	str.w	r3, [r8, #16]
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8001992:	ea86 0301 	eor.w	r3, r6, r1
 8001996:	403b      	ands	r3, r7
 8001998:	404b      	eors	r3, r1

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 800199a:	2000      	movs	r0, #0
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 800199c:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_UNLOCK(hdac);
 800199e:	7168      	strb	r0, [r5, #5]
  }

  return status;
}
 80019a0:	b005      	add	sp, #20
 80019a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 80019a6:	3314      	adds	r3, #20
 80019a8:	e7a3      	b.n	80018f2 <HAL_DACEx_SelfCalibrate+0x4a>
    status = HAL_ERROR;
 80019aa:	2001      	movs	r0, #1
 80019ac:	e7f8      	b.n	80019a0 <HAL_DACEx_SelfCalibrate+0xf8>
    __HAL_LOCK(hdac);
 80019ae:	2002      	movs	r0, #2
 80019b0:	e7f6      	b.n	80019a0 <HAL_DACEx_SelfCalibrate+0xf8>

080019b2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80019b2:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019b4:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80019b6:	4620      	mov	r0, r4
 80019b8:	f7ff ff73 	bl	80018a2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019bc:	2301      	movs	r3, #1
 80019be:	7123      	strb	r3, [r4, #4]
 80019c0:	bd10      	pop	{r4, pc}

080019c2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80019c2:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80019c4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80019c6:	f7ff ff6d 	bl	80018a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
 80019ca:	bd08      	pop	{r3, pc}

080019cc <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80019cc:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019ce:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80019d0:	6923      	ldr	r3, [r4, #16]
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff ff64 	bl	80018a6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019de:	2301      	movs	r3, #1
 80019e0:	7123      	strb	r3, [r4, #4]
 80019e2:	bd10      	pop	{r4, pc}

080019e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019e4:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d04e      	beq.n	8001a88 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019ea:	6801      	ldr	r1, [r0, #0]
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_DMA_Init+0xa8>)
 80019ee:	4299      	cmp	r1, r3
 80019f0:	f04f 0414 	mov.w	r4, #20
 80019f4:	d840      	bhi.n	8001a78 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019f6:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <HAL_DMA_Init+0xac>)
 80019f8:	440a      	add	r2, r1
 80019fa:	fbb2 f2f4 	udiv	r2, r2, r4
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a02:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8001a06:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a0e:	6884      	ldr	r4, [r0, #8]
 8001a10:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a12:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8001a14:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8001a16:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a18:	432b      	orrs	r3, r5
 8001a1a:	6945      	ldr	r5, [r0, #20]
 8001a1c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1e:	6985      	ldr	r5, [r0, #24]
 8001a20:	432b      	orrs	r3, r5
 8001a22:	69c5      	ldr	r5, [r0, #28]
 8001a24:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a26:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a28:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001a2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a30:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8001a32:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a34:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8001a38:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a3a:	d014      	beq.n	8001a66 <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001a3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_DMA_Init+0xb0>)
 8001a40:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a42:	bf0c      	ite	eq
 8001a44:	4914      	ldreq	r1, [pc, #80]	; (8001a98 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a46:	4915      	ldrne	r1, [pc, #84]	; (8001a9c <HAL_DMA_Init+0xb8>)
 8001a48:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a4a:	680a      	ldr	r2, [r1, #0]
 8001a4c:	f003 031c 	and.w	r3, r3, #28
 8001a50:	240f      	movs	r4, #15
 8001a52:	409c      	lsls	r4, r3
 8001a54:	ea22 0204 	bic.w	r2, r2, r4
 8001a58:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a5a:	6842      	ldr	r2, [r0, #4]
 8001a5c:	680c      	ldr	r4, [r1, #0]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	4323      	orrs	r3, r4
 8001a64:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a66:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a68:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a6a:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a6c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8001a70:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_DMA_Init+0xbc>)
 8001a7a:	440b      	add	r3, r1
 8001a7c:	fbb3 f3f4 	udiv	r3, r3, r4
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <HAL_DMA_Init+0xc0>)
 8001a86:	e7be      	b.n	8001a06 <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 8001a88:	2001      	movs	r0, #1
}
 8001a8a:	bd30      	pop	{r4, r5, pc}
 8001a8c:	40020407 	.word	0x40020407
 8001a90:	bffdfff8 	.word	0xbffdfff8
 8001a94:	40020000 	.word	0x40020000
 8001a98:	400200a8 	.word	0x400200a8
 8001a9c:	400204a8 	.word	0x400204a8
 8001aa0:	bffdfbf8 	.word	0xbffdfbf8
 8001aa4:	40020400 	.word	0x40020400

08001aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001aaa:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001aae:	2c01      	cmp	r4, #1
 8001ab0:	d038      	beq.n	8001b24 <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ab2:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8001ab6:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ab8:	b2ed      	uxtb	r5, r5
 8001aba:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8001abc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8001ac0:	f04f 0600 	mov.w	r6, #0
 8001ac4:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ac8:	d12a      	bne.n	8001b20 <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aca:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ace:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad0:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001ad2:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ad4:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001ad6:	f026 0601 	bic.w	r6, r6, #1
 8001ada:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001adc:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001ade:	f006 061c 	and.w	r6, r6, #28
 8001ae2:	40b5      	lsls	r5, r6
 8001ae4:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ae6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ae8:	6883      	ldr	r3, [r0, #8]
 8001aea:	6805      	ldr	r5, [r0, #0]
 8001aec:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001aee:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001af0:	bf0b      	itete	eq
 8001af2:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001af4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001af6:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001af8:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001afa:	b14b      	cbz	r3, 8001b10 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b02:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b04:	682b      	ldr	r3, [r5, #0]
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	f023 0304 	bic.w	r3, r3, #4
 8001b16:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	f043 030a 	orr.w	r3, r3, #10
 8001b1e:	e7f0      	b.n	8001b02 <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 8001b20:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001b24:	2002      	movs	r0, #2
}
 8001b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b28 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b28:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b2a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001b2c:	6803      	ldr	r3, [r0, #0]
{
 8001b2e:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b30:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b34:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001b36:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b38:	2404      	movs	r4, #4
 8001b3a:	4094      	lsls	r4, r2
 8001b3c:	4226      	tst	r6, r4
 8001b3e:	d00e      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x36>
 8001b40:	f015 0f04 	tst.w	r5, #4
 8001b44:	d00b      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b4a:	bf5e      	ittt	pl
 8001b4c:	681a      	ldrpl	r2, [r3, #0]
 8001b4e:	f022 0204 	bicpl.w	r2, r2, #4
 8001b52:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001b54:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b56:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001b58:	b373      	cbz	r3, 8001bb8 <HAL_DMA_IRQHandler+0x90>
}
 8001b5a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001b5c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b5e:	2402      	movs	r4, #2
 8001b60:	4094      	lsls	r4, r2
 8001b62:	4226      	tst	r6, r4
 8001b64:	d012      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x64>
 8001b66:	f015 0f02 	tst.w	r5, #2
 8001b6a:	d00f      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	0695      	lsls	r5, r2, #26
 8001b70:	d406      	bmi.n	8001b80 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	f022 020a 	bic.w	r2, r2, #10
 8001b78:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001b80:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b82:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001b84:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001b88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b8a:	e7e5      	b.n	8001b58 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b8c:	2408      	movs	r4, #8
 8001b8e:	4094      	lsls	r4, r2
 8001b90:	4234      	tst	r4, r6
 8001b92:	d011      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x90>
 8001b94:	072c      	lsls	r4, r5, #28
 8001b96:	d50f      	bpl.n	8001bb8 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b98:	681c      	ldr	r4, [r3, #0]
 8001b9a:	f024 040e 	bic.w	r4, r4, #14
 8001b9e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	fa03 f202 	lsl.w	r2, r3, r2
 8001ba6:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ba8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001baa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001bb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001bb6:	e7cf      	b.n	8001b58 <HAL_DMA_IRQHandler+0x30>
}
 8001bb8:	bc70      	pop	{r4, r5, r6}
 8001bba:	4770      	bx	lr

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001d70 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bc8:	4c67      	ldr	r4, [pc, #412]	; (8001d68 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bca:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001bcc:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bce:	9a01      	ldr	r2, [sp, #4]
 8001bd0:	40da      	lsrs	r2, r3
 8001bd2:	d102      	bne.n	8001bda <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001bd4:	b005      	add	sp, #20
 8001bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bda:	2701      	movs	r7, #1
    if (iocurrent != 0x00u)
 8001bdc:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bde:	409f      	lsls	r7, r3
    if (iocurrent != 0x00u)
 8001be0:	ea12 0e07 	ands.w	lr, r2, r7
 8001be4:	f000 80b1 	beq.w	8001d4a <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be8:	684a      	ldr	r2, [r1, #4]
 8001bea:	f022 0810 	bic.w	r8, r2, #16
 8001bee:	f108 35ff 	add.w	r5, r8, #4294967295
 8001bf2:	2d01      	cmp	r5, #1
 8001bf4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001bf8:	d812      	bhi.n	8001c20 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR;
 8001bfa:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bfc:	2503      	movs	r5, #3
 8001bfe:	fa05 f50c 	lsl.w	r5, r5, ip
 8001c02:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c06:	68cd      	ldr	r5, [r1, #12]
 8001c08:	fa05 f50c 	lsl.w	r5, r5, ip
 8001c0c:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001c0e:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c10:	6846      	ldr	r6, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c12:	f3c2 1500 	ubfx	r5, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c16:	ea26 0607 	bic.w	r6, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c1a:	409d      	lsls	r5, r3
 8001c1c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001c1e:	6045      	str	r5, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c20:	f002 0603 	and.w	r6, r2, #3
 8001c24:	2e03      	cmp	r6, #3
 8001c26:	d107      	bne.n	8001c38 <HAL_GPIO_Init+0x7c>
        temp = GPIOx->ASCR;
 8001c28:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c2a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c2e:	f3c2 05c0 	ubfx	r5, r2, #3, #1
 8001c32:	409d      	lsls	r5, r3
 8001c34:	432f      	orrs	r7, r5
        GPIOx->ASCR = temp;
 8001c36:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c38:	2503      	movs	r5, #3
      temp = GPIOx->PUPDR;
 8001c3a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c3c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001c40:	43ed      	mvns	r5, r5
 8001c42:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c46:	688f      	ldr	r7, [r1, #8]
 8001c48:	fa07 f70c 	lsl.w	r7, r7, ip
 8001c4c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c50:	f1b8 0f02 	cmp.w	r8, #2
      GPIOx->PUPDR = temp;
 8001c54:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c56:	d116      	bne.n	8001c86 <HAL_GPIO_Init+0xca>
        temp = GPIOx->AFR[position >> 3u];
 8001c58:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001c5c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c60:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001c64:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c68:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001c6c:	f04f 080f 	mov.w	r8, #15
 8001c70:	fa08 f80b 	lsl.w	r8, r8, fp
 8001c74:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c78:	690f      	ldr	r7, [r1, #16]
 8001c7a:	fa07 f70b 	lsl.w	r7, r7, fp
 8001c7e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 8001c82:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8001c86:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c88:	fa06 f60c 	lsl.w	r6, r6, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c8c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c8e:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8001c90:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c92:	00d5      	lsls	r5, r2, #3
 8001c94:	d559      	bpl.n	8001d4a <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c96:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8001c9a:	f045 0501 	orr.w	r5, r5, #1
 8001c9e:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8001ca2:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8001ca6:	f023 0603 	bic.w	r6, r3, #3
 8001caa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001cae:	f005 0501 	and.w	r5, r5, #1
 8001cb2:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001cb6:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cb8:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbc:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001cbe:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cc0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001cc4:	270f      	movs	r7, #15
 8001cc6:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cca:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cce:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd2:	d03c      	beq.n	8001d4e <HAL_GPIO_Init+0x192>
 8001cd4:	4d25      	ldr	r5, [pc, #148]	; (8001d6c <HAL_GPIO_Init+0x1b0>)
 8001cd6:	42a8      	cmp	r0, r5
 8001cd8:	d03b      	beq.n	8001d52 <HAL_GPIO_Init+0x196>
 8001cda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cde:	42a8      	cmp	r0, r5
 8001ce0:	d039      	beq.n	8001d56 <HAL_GPIO_Init+0x19a>
 8001ce2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ce6:	42a8      	cmp	r0, r5
 8001ce8:	d037      	beq.n	8001d5a <HAL_GPIO_Init+0x19e>
 8001cea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cee:	42a8      	cmp	r0, r5
 8001cf0:	d035      	beq.n	8001d5e <HAL_GPIO_Init+0x1a2>
 8001cf2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cf6:	42a8      	cmp	r0, r5
 8001cf8:	d033      	beq.n	8001d62 <HAL_GPIO_Init+0x1a6>
 8001cfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cfe:	42a8      	cmp	r0, r5
 8001d00:	bf14      	ite	ne
 8001d02:	2507      	movne	r5, #7
 8001d04:	2506      	moveq	r5, #6
 8001d06:	fa05 f50c 	lsl.w	r5, r5, ip
 8001d0a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d0c:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001d0e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001d10:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d14:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001d16:	bf54      	ite	pl
 8001d18:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001d1a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001d1e:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001d20:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d22:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001d24:	bf54      	ite	pl
 8001d26:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001d28:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001d2c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001d2e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d30:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001d32:	bf54      	ite	pl
 8001d34:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001d36:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8001d3a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001d3c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d3e:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001d40:	bf54      	ite	pl
 8001d42:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001d44:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001d48:	60e5      	str	r5, [r4, #12]
    position++;
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	e73f      	b.n	8001bce <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d4e:	2500      	movs	r5, #0
 8001d50:	e7d9      	b.n	8001d06 <HAL_GPIO_Init+0x14a>
 8001d52:	2501      	movs	r5, #1
 8001d54:	e7d7      	b.n	8001d06 <HAL_GPIO_Init+0x14a>
 8001d56:	2502      	movs	r5, #2
 8001d58:	e7d5      	b.n	8001d06 <HAL_GPIO_Init+0x14a>
 8001d5a:	2503      	movs	r5, #3
 8001d5c:	e7d3      	b.n	8001d06 <HAL_GPIO_Init+0x14a>
 8001d5e:	2504      	movs	r5, #4
 8001d60:	e7d1      	b.n	8001d06 <HAL_GPIO_Init+0x14a>
 8001d62:	2505      	movs	r5, #5
 8001d64:	e7cf      	b.n	8001d06 <HAL_GPIO_Init+0x14a>
 8001d66:	bf00      	nop
 8001d68:	40010400 	.word	0x40010400
 8001d6c:	48000400 	.word	0x48000400
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d74:	b10a      	cbz	r2, 8001d7a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d76:	6181      	str	r1, [r0, #24]
 8001d78:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7a:	6281      	str	r1, [r0, #40]	; 0x28
 8001d7c:	4770      	bx	lr
	...

08001d80 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d80:	4b02      	ldr	r3, [pc, #8]	; (8001d8c <HAL_PWREx_GetVoltageRange+0xc>)
 8001d82:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001d84:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40007000 	.word	0x40007000

08001d90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d92:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d94:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d98:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d9c:	d11c      	bne.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d9e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001da2:	d015      	beq.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dae:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001db0:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001db2:	6811      	ldr	r1, [r2, #0]
 8001db4:	2232      	movs	r2, #50	; 0x32
 8001db6:	434a      	muls	r2, r1
 8001db8:	490f      	ldr	r1, [pc, #60]	; (8001df8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001dba:	fbb2 f2f1 	udiv	r2, r2, r1
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dc2:	6958      	ldr	r0, [r3, #20]
 8001dc4:	0540      	lsls	r0, r0, #21
 8001dc6:	d500      	bpl.n	8001dca <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001dc8:	b922      	cbnz	r2, 8001dd4 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dca:	694b      	ldr	r3, [r1, #20]
 8001dcc:	055b      	lsls	r3, r3, #21
 8001dce:	d40d      	bmi.n	8001dec <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	4770      	bx	lr
        wait_loop_index--;
 8001dd4:	3a01      	subs	r2, #1
 8001dd6:	e7f4      	b.n	8001dc2 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dd8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ddc:	bf1f      	itttt	ne
 8001dde:	681a      	ldrne	r2, [r3, #0]
 8001de0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001de4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001de8:	601a      	strne	r2, [r3, #0]
 8001dea:	e7f1      	b.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001dec:	2003      	movs	r0, #3
}
 8001dee:	4770      	bx	lr
 8001df0:	40007000 	.word	0x40007000
 8001df4:	20000000 	.word	0x20000000
 8001df8:	000f4240 	.word	0x000f4240

08001dfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dfe:	4d1e      	ldr	r5, [pc, #120]	; (8001e78 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001e00:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e02:	00da      	lsls	r2, r3, #3
{
 8001e04:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e06:	d518      	bpl.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e08:	f7ff ffba 	bl	8001d80 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001e10:	d123      	bne.n	8001e5a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e12:	2c80      	cmp	r4, #128	; 0x80
 8001e14:	d929      	bls.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e16:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e18:	bf8c      	ite	hi
 8001e1a:	2002      	movhi	r0, #2
 8001e1c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001e20:	6813      	ldr	r3, [r2, #0]
 8001e22:	f023 0307 	bic.w	r3, r3, #7
 8001e26:	4303      	orrs	r3, r0
 8001e28:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001e30:	1a18      	subs	r0, r3, r0
 8001e32:	bf18      	it	ne
 8001e34:	2001      	movne	r0, #1
 8001e36:	b003      	add	sp, #12
 8001e38:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e40:	65ab      	str	r3, [r5, #88]	; 0x58
 8001e42:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001e4c:	f7ff ff98 	bl	8001d80 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e50:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e56:	65ab      	str	r3, [r5, #88]	; 0x58
 8001e58:	e7d8      	b.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001e5a:	2c80      	cmp	r4, #128	; 0x80
 8001e5c:	d807      	bhi.n	8001e6e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001e5e:	d008      	beq.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001e60:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001e64:	4258      	negs	r0, r3
 8001e66:	4158      	adcs	r0, r3
 8001e68:	e7d9      	b.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	e7d7      	b.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e6e:	2003      	movs	r0, #3
 8001e70:	e7d5      	b.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e72:	2002      	movs	r0, #2
 8001e74:	e7d3      	b.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40022000 	.word	0x40022000

08001e80 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x8c>)
 8001e82:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e84:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e86:	f012 020c 	ands.w	r2, r2, #12
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x18>
 8001e8c:	2a0c      	cmp	r2, #12
 8001e8e:	d115      	bne.n	8001ebc <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e90:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e94:	2901      	cmp	r1, #1
 8001e96:	d118      	bne.n	8001eca <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e98:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001e9a:	481d      	ldr	r0, [pc, #116]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e9c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e9e:	bf55      	itete	pl
 8001ea0:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ea4:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ea6:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eaa:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001eae:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eb2:	b34a      	cbz	r2, 8001f08 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001eb4:	2a0c      	cmp	r2, #12
 8001eb6:	d009      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x4c>
 8001eb8:	2000      	movs	r0, #0
  return sysclockfreq;
 8001eba:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ebc:	2a04      	cmp	r2, #4
 8001ebe:	d022      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0x86>
 8001ec0:	2a08      	cmp	r2, #8
 8001ec2:	4814      	ldr	r0, [pc, #80]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ec4:	bf18      	it	ne
 8001ec6:	2000      	movne	r0, #0
 8001ec8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eca:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001ed2:	2a02      	cmp	r2, #2
 8001ed4:	d015      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8001ed6:	490f      	ldr	r1, [pc, #60]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ed8:	2a03      	cmp	r2, #3
 8001eda:	bf08      	it	eq
 8001edc:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ede:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ee0:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ee8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eec:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ef0:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ef2:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef4:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ef6:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ef8:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8001efc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f00:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f04:	e7eb      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001f06:	4804      	ldr	r0, [pc, #16]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	08003808 	.word	0x08003808
 8001f14:	007a1200 	.word	0x007a1200
 8001f18:	00f42400 	.word	0x00f42400

08001f1c <HAL_RCC_OscConfig>:
{
 8001f1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001f20:	4605      	mov	r5, r0
 8001f22:	b918      	cbnz	r0, 8001f2c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001f24:	2001      	movs	r0, #1
}
 8001f26:	b003      	add	sp, #12
 8001f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2c:	4ca7      	ldr	r4, [pc, #668]	; (80021cc <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f2e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f30:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f32:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f34:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f36:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f3a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f3e:	d53d      	bpl.n	8001fbc <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f40:	b11e      	cbz	r6, 8001f4a <HAL_RCC_OscConfig+0x2e>
 8001f42:	2e0c      	cmp	r6, #12
 8001f44:	d166      	bne.n	8002014 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f46:	2f01      	cmp	r7, #1
 8001f48:	d164      	bne.n	8002014 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	0799      	lsls	r1, r3, #30
 8001f4e:	d502      	bpl.n	8001f56 <HAL_RCC_OscConfig+0x3a>
 8001f50:	69ab      	ldr	r3, [r5, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0e6      	beq.n	8001f24 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	6a28      	ldr	r0, [r5, #32]
 8001f5a:	071a      	lsls	r2, r3, #28
 8001f5c:	bf56      	itet	pl
 8001f5e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001f62:	6823      	ldrmi	r3, [r4, #0]
 8001f64:	091b      	lsrpl	r3, r3, #4
 8001f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f6a:	4283      	cmp	r3, r0
 8001f6c:	d23b      	bcs.n	8001fe6 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f6e:	f7ff ff45 	bl	8001dfc <RCC_SetFlashLatencyFromMSIRange>
 8001f72:	2800      	cmp	r0, #0
 8001f74:	d1d6      	bne.n	8001f24 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	f043 0308 	orr.w	r3, r3, #8
 8001f7c:	6023      	str	r3, [r4, #0]
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	6a2a      	ldr	r2, [r5, #32]
 8001f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f86:	4313      	orrs	r3, r2
 8001f88:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f8a:	6863      	ldr	r3, [r4, #4]
 8001f8c:	69ea      	ldr	r2, [r5, #28]
 8001f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f96:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f98:	f7ff ff72 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001f9c:	68a3      	ldr	r3, [r4, #8]
 8001f9e:	4a8c      	ldr	r2, [pc, #560]	; (80021d0 <HAL_RCC_OscConfig+0x2b4>)
 8001fa0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fa4:	5cd3      	ldrb	r3, [r2, r3]
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	40d8      	lsrs	r0, r3
 8001fac:	4b89      	ldr	r3, [pc, #548]	; (80021d4 <HAL_RCC_OscConfig+0x2b8>)
 8001fae:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001fb0:	4b89      	ldr	r3, [pc, #548]	; (80021d8 <HAL_RCC_OscConfig+0x2bc>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	f7fe fdb6 	bl	8000b24 <HAL_InitTick>
        if(status != HAL_OK)
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d1b4      	bne.n	8001f26 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbc:	682b      	ldr	r3, [r5, #0]
 8001fbe:	07d9      	lsls	r1, r3, #31
 8001fc0:	d45f      	bmi.n	8002082 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	682b      	ldr	r3, [r5, #0]
 8001fc4:	079a      	lsls	r2, r3, #30
 8001fc6:	f100 809e 	bmi.w	8002106 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fca:	682b      	ldr	r3, [r5, #0]
 8001fcc:	0719      	lsls	r1, r3, #28
 8001fce:	f100 80d2 	bmi.w	8002176 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd2:	682b      	ldr	r3, [r5, #0]
 8001fd4:	075a      	lsls	r2, r3, #29
 8001fd6:	f100 8101 	bmi.w	80021dc <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fda:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f040 816a 	bne.w	80022b6 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	e79f      	b.n	8001f26 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	f043 0308 	orr.w	r3, r3, #8
 8001fec:	6023      	str	r3, [r4, #0]
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ff4:	4303      	orrs	r3, r0
 8001ff6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff8:	6863      	ldr	r3, [r4, #4]
 8001ffa:	69ea      	ldr	r2, [r5, #28]
 8001ffc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002000:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002004:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002006:	2e00      	cmp	r6, #0
 8002008:	d1c6      	bne.n	8001f98 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800200a:	f7ff fef7 	bl	8001dfc <RCC_SetFlashLatencyFromMSIRange>
 800200e:	2800      	cmp	r0, #0
 8002010:	d0c2      	beq.n	8001f98 <HAL_RCC_OscConfig+0x7c>
 8002012:	e787      	b.n	8001f24 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002014:	69ab      	ldr	r3, [r5, #24]
 8002016:	b31b      	cbz	r3, 8002060 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002020:	f7fe fdc8 	bl	8000bb4 <HAL_GetTick>
 8002024:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002026:	6823      	ldr	r3, [r4, #0]
 8002028:	079b      	lsls	r3, r3, #30
 800202a:	d511      	bpl.n	8002050 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	f043 0308 	orr.w	r3, r3, #8
 8002032:	6023      	str	r3, [r4, #0]
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	6a2a      	ldr	r2, [r5, #32]
 8002038:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800203c:	4313      	orrs	r3, r2
 800203e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002040:	6863      	ldr	r3, [r4, #4]
 8002042:	69ea      	ldr	r2, [r5, #28]
 8002044:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002048:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800204c:	6063      	str	r3, [r4, #4]
 800204e:	e7b5      	b.n	8001fbc <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002050:	f7fe fdb0 	bl	8000bb4 <HAL_GetTick>
 8002054:	eba0 0008 	sub.w	r0, r0, r8
 8002058:	2802      	cmp	r0, #2
 800205a:	d9e4      	bls.n	8002026 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 800205c:	2003      	movs	r0, #3
 800205e:	e762      	b.n	8001f26 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002068:	f7fe fda4 	bl	8000bb4 <HAL_GetTick>
 800206c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	0798      	lsls	r0, r3, #30
 8002072:	d5a3      	bpl.n	8001fbc <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002074:	f7fe fd9e 	bl	8000bb4 <HAL_GetTick>
 8002078:	eba0 0008 	sub.w	r0, r0, r8
 800207c:	2802      	cmp	r0, #2
 800207e:	d9f6      	bls.n	800206e <HAL_RCC_OscConfig+0x152>
 8002080:	e7ec      	b.n	800205c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002082:	2e08      	cmp	r6, #8
 8002084:	d003      	beq.n	800208e <HAL_RCC_OscConfig+0x172>
 8002086:	2e0c      	cmp	r6, #12
 8002088:	d108      	bne.n	800209c <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800208a:	2f03      	cmp	r7, #3
 800208c:	d106      	bne.n	800209c <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	039b      	lsls	r3, r3, #14
 8002092:	d596      	bpl.n	8001fc2 <HAL_RCC_OscConfig+0xa6>
 8002094:	686b      	ldr	r3, [r5, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d193      	bne.n	8001fc2 <HAL_RCC_OscConfig+0xa6>
 800209a:	e743      	b.n	8001f24 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209c:	686b      	ldr	r3, [r5, #4]
 800209e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a2:	d110      	bne.n	80020c6 <HAL_RCC_OscConfig+0x1aa>
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80020ac:	f7fe fd82 	bl	8000bb4 <HAL_GetTick>
 80020b0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	0398      	lsls	r0, r3, #14
 80020b6:	d484      	bmi.n	8001fc2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7fe fd7c 	bl	8000bb4 <HAL_GetTick>
 80020bc:	eba0 0008 	sub.w	r0, r0, r8
 80020c0:	2864      	cmp	r0, #100	; 0x64
 80020c2:	d9f6      	bls.n	80020b2 <HAL_RCC_OscConfig+0x196>
 80020c4:	e7ca      	b.n	800205c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ca:	d104      	bne.n	80020d6 <HAL_RCC_OscConfig+0x1ba>
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d2:	6023      	str	r3, [r4, #0]
 80020d4:	e7e6      	b.n	80020a4 <HAL_RCC_OscConfig+0x188>
 80020d6:	6822      	ldr	r2, [r4, #0]
 80020d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020dc:	6022      	str	r2, [r4, #0]
 80020de:	6822      	ldr	r2, [r4, #0]
 80020e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020e4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1e0      	bne.n	80020ac <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 80020ea:	f7fe fd63 	bl	8000bb4 <HAL_GetTick>
 80020ee:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	0399      	lsls	r1, r3, #14
 80020f4:	f57f af65 	bpl.w	8001fc2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f8:	f7fe fd5c 	bl	8000bb4 <HAL_GetTick>
 80020fc:	eba0 0008 	sub.w	r0, r0, r8
 8002100:	2864      	cmp	r0, #100	; 0x64
 8002102:	d9f5      	bls.n	80020f0 <HAL_RCC_OscConfig+0x1d4>
 8002104:	e7aa      	b.n	800205c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002106:	2e04      	cmp	r6, #4
 8002108:	d003      	beq.n	8002112 <HAL_RCC_OscConfig+0x1f6>
 800210a:	2e0c      	cmp	r6, #12
 800210c:	d110      	bne.n	8002130 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800210e:	2f02      	cmp	r7, #2
 8002110:	d10e      	bne.n	8002130 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	055a      	lsls	r2, r3, #21
 8002116:	d503      	bpl.n	8002120 <HAL_RCC_OscConfig+0x204>
 8002118:	68eb      	ldr	r3, [r5, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f43f af02 	beq.w	8001f24 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002120:	6863      	ldr	r3, [r4, #4]
 8002122:	692a      	ldr	r2, [r5, #16]
 8002124:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002128:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800212c:	6063      	str	r3, [r4, #4]
 800212e:	e74c      	b.n	8001fca <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002130:	68eb      	ldr	r3, [r5, #12]
 8002132:	b17b      	cbz	r3, 8002154 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800213c:	f7fe fd3a 	bl	8000bb4 <HAL_GetTick>
 8002140:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	055b      	lsls	r3, r3, #21
 8002146:	d4eb      	bmi.n	8002120 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7fe fd34 	bl	8000bb4 <HAL_GetTick>
 800214c:	1bc0      	subs	r0, r0, r7
 800214e:	2802      	cmp	r0, #2
 8002150:	d9f7      	bls.n	8002142 <HAL_RCC_OscConfig+0x226>
 8002152:	e783      	b.n	800205c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800215a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800215c:	f7fe fd2a 	bl	8000bb4 <HAL_GetTick>
 8002160:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	0558      	lsls	r0, r3, #21
 8002166:	f57f af30 	bpl.w	8001fca <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216a:	f7fe fd23 	bl	8000bb4 <HAL_GetTick>
 800216e:	1bc0      	subs	r0, r0, r7
 8002170:	2802      	cmp	r0, #2
 8002172:	d9f6      	bls.n	8002162 <HAL_RCC_OscConfig+0x246>
 8002174:	e772      	b.n	800205c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002176:	696b      	ldr	r3, [r5, #20]
 8002178:	b19b      	cbz	r3, 80021a2 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 800217a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002186:	f7fe fd15 	bl	8000bb4 <HAL_GetTick>
 800218a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800218c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002190:	079b      	lsls	r3, r3, #30
 8002192:	f53f af1e 	bmi.w	8001fd2 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002196:	f7fe fd0d 	bl	8000bb4 <HAL_GetTick>
 800219a:	1bc0      	subs	r0, r0, r7
 800219c:	2802      	cmp	r0, #2
 800219e:	d9f5      	bls.n	800218c <HAL_RCC_OscConfig+0x270>
 80021a0:	e75c      	b.n	800205c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 80021a2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80021ae:	f7fe fd01 	bl	8000bb4 <HAL_GetTick>
 80021b2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80021b8:	0798      	lsls	r0, r3, #30
 80021ba:	f57f af0a 	bpl.w	8001fd2 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021be:	f7fe fcf9 	bl	8000bb4 <HAL_GetTick>
 80021c2:	1bc0      	subs	r0, r0, r7
 80021c4:	2802      	cmp	r0, #2
 80021c6:	d9f5      	bls.n	80021b4 <HAL_RCC_OscConfig+0x298>
 80021c8:	e748      	b.n	800205c <HAL_RCC_OscConfig+0x140>
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	080037f0 	.word	0x080037f0
 80021d4:	20000000 	.word	0x20000000
 80021d8:	20000008 	.word	0x20000008
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021de:	00d9      	lsls	r1, r3, #3
 80021e0:	d429      	bmi.n	8002236 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80021ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021f4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f8:	4f89      	ldr	r7, [pc, #548]	; (8002420 <HAL_RCC_OscConfig+0x504>)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	05da      	lsls	r2, r3, #23
 80021fe:	d51d      	bpl.n	800223c <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002200:	68ab      	ldr	r3, [r5, #8]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d12b      	bne.n	800225e <HAL_RCC_OscConfig+0x342>
 8002206:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002212:	f7fe fccf 	bl	8000bb4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800221a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002220:	0798      	lsls	r0, r3, #30
 8002222:	d542      	bpl.n	80022aa <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8002224:	f1b8 0f00 	cmp.w	r8, #0
 8002228:	f43f aed7 	beq.w	8001fda <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 800222c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800222e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002232:	65a3      	str	r3, [r4, #88]	; 0x58
 8002234:	e6d1      	b.n	8001fda <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8002236:	f04f 0800 	mov.w	r8, #0
 800223a:	e7dd      	b.n	80021f8 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002242:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002244:	f7fe fcb6 	bl	8000bb4 <HAL_GetTick>
 8002248:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	05db      	lsls	r3, r3, #23
 800224e:	d4d7      	bmi.n	8002200 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002250:	f7fe fcb0 	bl	8000bb4 <HAL_GetTick>
 8002254:	eba0 0009 	sub.w	r0, r0, r9
 8002258:	2802      	cmp	r0, #2
 800225a:	d9f6      	bls.n	800224a <HAL_RCC_OscConfig+0x32e>
 800225c:	e6fe      	b.n	800205c <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800225e:	2b05      	cmp	r3, #5
 8002260:	d106      	bne.n	8002270 <HAL_RCC_OscConfig+0x354>
 8002262:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800226e:	e7ca      	b.n	8002206 <HAL_RCC_OscConfig+0x2ea>
 8002270:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002274:	f022 0201 	bic.w	r2, r2, #1
 8002278:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800227c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002280:	f022 0204 	bic.w	r2, r2, #4
 8002284:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1c2      	bne.n	8002212 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800228c:	f7fe fc92 	bl	8000bb4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002290:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002294:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002296:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800229a:	0799      	lsls	r1, r3, #30
 800229c:	d5c2      	bpl.n	8002224 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe fc89 	bl	8000bb4 <HAL_GetTick>
 80022a2:	1bc0      	subs	r0, r0, r7
 80022a4:	4548      	cmp	r0, r9
 80022a6:	d9f6      	bls.n	8002296 <HAL_RCC_OscConfig+0x37a>
 80022a8:	e6d8      	b.n	800205c <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7fe fc83 	bl	8000bb4 <HAL_GetTick>
 80022ae:	1bc0      	subs	r0, r0, r7
 80022b0:	4548      	cmp	r0, r9
 80022b2:	d9b3      	bls.n	800221c <HAL_RCC_OscConfig+0x300>
 80022b4:	e6d2      	b.n	800205c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	f040 808f 	bne.w	80023da <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 80022bc:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80022c0:	f003 0103 	and.w	r1, r3, #3
 80022c4:	4291      	cmp	r1, r2
 80022c6:	d124      	bne.n	8002312 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022c8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80022ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022ce:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80022d4:	d11d      	bne.n	8002312 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80022d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022dc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80022e0:	d117      	bne.n	8002312 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022e2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80022e4:	3a07      	subs	r2, #7
 80022e6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80022ea:	bf18      	it	ne
 80022ec:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ee:	4291      	cmp	r1, r2
 80022f0:	d10f      	bne.n	8002312 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80022f4:	0852      	lsrs	r2, r2, #1
 80022f6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80022fa:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022fc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002300:	d107      	bne.n	8002312 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002302:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002304:	0852      	lsrs	r2, r2, #1
 8002306:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800230a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800230c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002310:	d04a      	beq.n	80023a8 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002312:	2e0c      	cmp	r6, #12
 8002314:	f43f ae06 	beq.w	8001f24 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	f53f ae02 	bmi.w	8001f24 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	f53f adfe 	bmi.w	8001f24 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800232e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002330:	f7fe fc40 	bl	8000bb4 <HAL_GetTick>
 8002334:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	019f      	lsls	r7, r3, #6
 800233a:	d42f      	bmi.n	800239c <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233c:	68e2      	ldr	r2, [r4, #12]
 800233e:	4b39      	ldr	r3, [pc, #228]	; (8002424 <HAL_RCC_OscConfig+0x508>)
 8002340:	4013      	ands	r3, r2
 8002342:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002344:	4313      	orrs	r3, r2
 8002346:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002348:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800234c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800234e:	3a01      	subs	r2, #1
 8002350:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002354:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002356:	0912      	lsrs	r2, r2, #4
 8002358:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800235c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800235e:	0852      	lsrs	r2, r2, #1
 8002360:	3a01      	subs	r2, #1
 8002362:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002366:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002368:	0852      	lsrs	r2, r2, #1
 800236a:	3a01      	subs	r2, #1
 800236c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002370:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002372:	6823      	ldr	r3, [r4, #0]
 8002374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002378:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800237a:	68e3      	ldr	r3, [r4, #12]
 800237c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002380:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002382:	f7fe fc17 	bl	8000bb4 <HAL_GetTick>
 8002386:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	0198      	lsls	r0, r3, #6
 800238c:	f53f ae29 	bmi.w	8001fe2 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fc10 	bl	8000bb4 <HAL_GetTick>
 8002394:	1b40      	subs	r0, r0, r5
 8002396:	2802      	cmp	r0, #2
 8002398:	d9f6      	bls.n	8002388 <HAL_RCC_OscConfig+0x46c>
 800239a:	e65f      	b.n	800205c <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe fc0a 	bl	8000bb4 <HAL_GetTick>
 80023a0:	1b80      	subs	r0, r0, r6
 80023a2:	2802      	cmp	r0, #2
 80023a4:	d9c7      	bls.n	8002336 <HAL_RCC_OscConfig+0x41a>
 80023a6:	e659      	b.n	800205c <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	0199      	lsls	r1, r3, #6
 80023ac:	f53f ae19 	bmi.w	8001fe2 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b8:	68e3      	ldr	r3, [r4, #12]
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023be:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80023c0:	f7fe fbf8 	bl	8000bb4 <HAL_GetTick>
 80023c4:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	019a      	lsls	r2, r3, #6
 80023ca:	f53f ae0a 	bmi.w	8001fe2 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fbf1 	bl	8000bb4 <HAL_GetTick>
 80023d2:	1b40      	subs	r0, r0, r5
 80023d4:	2802      	cmp	r0, #2
 80023d6:	d9f6      	bls.n	80023c6 <HAL_RCC_OscConfig+0x4aa>
 80023d8:	e640      	b.n	800205c <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023da:	2e0c      	cmp	r6, #12
 80023dc:	f43f ada2 	beq.w	8001f24 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023e6:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023ee:	bf02      	ittt	eq
 80023f0:	68e3      	ldreq	r3, [r4, #12]
 80023f2:	f023 0303 	biceq.w	r3, r3, #3
 80023f6:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023f8:	68e3      	ldr	r3, [r4, #12]
 80023fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002402:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002404:	f7fe fbd6 	bl	8000bb4 <HAL_GetTick>
 8002408:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	f57f ade8 	bpl.w	8001fe2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe fbcf 	bl	8000bb4 <HAL_GetTick>
 8002416:	1b40      	subs	r0, r0, r5
 8002418:	2802      	cmp	r0, #2
 800241a:	d9f6      	bls.n	800240a <HAL_RCC_OscConfig+0x4ee>
 800241c:	e61e      	b.n	800205c <HAL_RCC_OscConfig+0x140>
 800241e:	bf00      	nop
 8002420:	40007000 	.word	0x40007000
 8002424:	f99d808c 	.word	0xf99d808c

08002428 <HAL_RCC_ClockConfig>:
{
 8002428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800242c:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800242e:	4604      	mov	r4, r0
 8002430:	b910      	cbnz	r0, 8002438 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002432:	2001      	movs	r0, #1
 8002434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4a41      	ldr	r2, [pc, #260]	; (8002540 <HAL_RCC_ClockConfig+0x118>)
 800243a:	6813      	ldr	r3, [r2, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	428b      	cmp	r3, r1
 8002442:	d32a      	bcc.n	800249a <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	07d9      	lsls	r1, r3, #31
 8002448:	d432      	bmi.n	80024b0 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244a:	6821      	ldr	r1, [r4, #0]
 800244c:	078a      	lsls	r2, r1, #30
 800244e:	d45c      	bmi.n	800250a <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002450:	4a3b      	ldr	r2, [pc, #236]	; (8002540 <HAL_RCC_ClockConfig+0x118>)
 8002452:	6813      	ldr	r3, [r2, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	429e      	cmp	r6, r3
 800245a:	d35e      	bcc.n	800251a <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	f011 0f04 	tst.w	r1, #4
 8002460:	4d38      	ldr	r5, [pc, #224]	; (8002544 <HAL_RCC_ClockConfig+0x11c>)
 8002462:	d165      	bne.n	8002530 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002464:	070b      	lsls	r3, r1, #28
 8002466:	d506      	bpl.n	8002476 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002468:	68ab      	ldr	r3, [r5, #8]
 800246a:	6922      	ldr	r2, [r4, #16]
 800246c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002470:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002474:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002476:	f7ff fd03 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 800247a:	68ab      	ldr	r3, [r5, #8]
 800247c:	4a32      	ldr	r2, [pc, #200]	; (8002548 <HAL_RCC_ClockConfig+0x120>)
 800247e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	40d8      	lsrs	r0, r3
 800248e:	4b2f      	ldr	r3, [pc, #188]	; (800254c <HAL_RCC_ClockConfig+0x124>)
 8002490:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002492:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <HAL_RCC_ClockConfig+0x128>)
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	f7fe bb45 	b.w	8000b24 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	6813      	ldr	r3, [r2, #0]
 800249c:	f023 0307 	bic.w	r3, r3, #7
 80024a0:	430b      	orrs	r3, r1
 80024a2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a4:	6813      	ldr	r3, [r2, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	4299      	cmp	r1, r3
 80024ac:	d1c1      	bne.n	8002432 <HAL_RCC_ClockConfig+0xa>
 80024ae:	e7c9      	b.n	8002444 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b0:	6862      	ldr	r2, [r4, #4]
 80024b2:	4d24      	ldr	r5, [pc, #144]	; (8002544 <HAL_RCC_ClockConfig+0x11c>)
 80024b4:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b6:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b8:	d11b      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024be:	d0b8      	beq.n	8002432 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c0:	68ab      	ldr	r3, [r5, #8]
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80024ca:	f7fe fb73 	bl	8000bb4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ce:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80024d2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d4:	68ab      	ldr	r3, [r5, #8]
 80024d6:	6862      	ldr	r2, [r4, #4]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80024e0:	d0b3      	beq.n	800244a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e2:	f7fe fb67 	bl	8000bb4 <HAL_GetTick>
 80024e6:	1bc0      	subs	r0, r0, r7
 80024e8:	4540      	cmp	r0, r8
 80024ea:	d9f3      	bls.n	80024d4 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 80024ec:	2003      	movs	r0, #3
}
 80024ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	2a02      	cmp	r2, #2
 80024f4:	d102      	bne.n	80024fc <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80024fa:	e7e0      	b.n	80024be <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024fc:	b912      	cbnz	r2, 8002504 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024fe:	f013 0f02 	tst.w	r3, #2
 8002502:	e7dc      	b.n	80024be <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002504:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002508:	e7d9      	b.n	80024be <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800250a:	4a0e      	ldr	r2, [pc, #56]	; (8002544 <HAL_RCC_ClockConfig+0x11c>)
 800250c:	68a0      	ldr	r0, [r4, #8]
 800250e:	6893      	ldr	r3, [r2, #8]
 8002510:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002514:	4303      	orrs	r3, r0
 8002516:	6093      	str	r3, [r2, #8]
 8002518:	e79a      	b.n	8002450 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	6813      	ldr	r3, [r2, #0]
 800251c:	f023 0307 	bic.w	r3, r3, #7
 8002520:	4333      	orrs	r3, r6
 8002522:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002524:	6813      	ldr	r3, [r2, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	429e      	cmp	r6, r3
 800252c:	d181      	bne.n	8002432 <HAL_RCC_ClockConfig+0xa>
 800252e:	e795      	b.n	800245c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002530:	68ab      	ldr	r3, [r5, #8]
 8002532:	68e2      	ldr	r2, [r4, #12]
 8002534:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002538:	4313      	orrs	r3, r2
 800253a:	60ab      	str	r3, [r5, #8]
 800253c:	e792      	b.n	8002464 <HAL_RCC_ClockConfig+0x3c>
 800253e:	bf00      	nop
 8002540:	40022000 	.word	0x40022000
 8002544:	40021000 	.word	0x40021000
 8002548:	080037f0 	.word	0x080037f0
 800254c:	20000000 	.word	0x20000000
 8002550:	20000008 	.word	0x20000008

08002554 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002556:	4a06      	ldr	r2, [pc, #24]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800255e:	5cd3      	ldrb	r3, [r2, r3]
 8002560:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002562:	6810      	ldr	r0, [r2, #0]
 8002564:	f003 031f 	and.w	r3, r3, #31
}
 8002568:	40d8      	lsrs	r0, r3
 800256a:	4770      	bx	lr
 800256c:	40021000 	.word	0x40021000
 8002570:	08003800 	.word	0x08003800
 8002574:	20000000 	.word	0x20000000

08002578 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RCC_GetPCLK2Freq+0x18>)
 800257a:	4a06      	ldr	r2, [pc, #24]	; (8002594 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002586:	6810      	ldr	r0, [r2, #0]
 8002588:	f003 031f 	and.w	r3, r3, #31
}
 800258c:	40d8      	lsrs	r0, r3
 800258e:	4770      	bx	lr
 8002590:	40021000 	.word	0x40021000
 8002594:	08003800 	.word	0x08003800
 8002598:	20000000 	.word	0x20000000

0800259c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800259e:	4b45      	ldr	r3, [pc, #276]	; (80026b4 <RCCEx_PLLSAI1_Config+0x118>)
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	f012 0f03 	tst.w	r2, #3
{
 80025a6:	4605      	mov	r5, r0
 80025a8:	460e      	mov	r6, r1
 80025aa:	461c      	mov	r4, r3
 80025ac:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ae:	d02a      	beq.n	8002606 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	f002 0203 	and.w	r2, r2, #3
 80025b6:	4282      	cmp	r2, r0
 80025b8:	d13c      	bne.n	8002634 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80025ba:	2a00      	cmp	r2, #0
 80025bc:	d03a      	beq.n	8002634 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025be:	68db      	ldr	r3, [r3, #12]
       ||
 80025c0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025c2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80025c6:	3301      	adds	r3, #1
       ||
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d133      	bne.n	8002634 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025d2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d4:	f7fe faee 	bl	8000bb4 <HAL_GetTick>
 80025d8:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	011a      	lsls	r2, r3, #4
 80025de:	d432      	bmi.n	8002646 <RCCEx_PLLSAI1_Config+0xaa>
 80025e0:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025e2:	2e00      	cmp	r6, #0
 80025e4:	d036      	beq.n	8002654 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025e6:	2e01      	cmp	r6, #1
 80025e8:	d150      	bne.n	800268c <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ea:	6922      	ldr	r2, [r4, #16]
 80025ec:	6928      	ldr	r0, [r5, #16]
 80025ee:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80025f2:	0840      	lsrs	r0, r0, #1
 80025f4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80025f8:	3801      	subs	r0, #1
 80025fa:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80025fe:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8002602:	6122      	str	r2, [r4, #16]
 8002604:	e032      	b.n	800266c <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8002606:	2802      	cmp	r0, #2
 8002608:	d010      	beq.n	800262c <RCCEx_PLLSAI1_Config+0x90>
 800260a:	2803      	cmp	r0, #3
 800260c:	d014      	beq.n	8002638 <RCCEx_PLLSAI1_Config+0x9c>
 800260e:	2801      	cmp	r0, #1
 8002610:	d110      	bne.n	8002634 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	079f      	lsls	r7, r3, #30
 8002616:	d538      	bpl.n	800268a <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002618:	68e3      	ldr	r3, [r4, #12]
 800261a:	686a      	ldr	r2, [r5, #4]
 800261c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002620:	3a01      	subs	r2, #1
 8002622:	4318      	orrs	r0, r3
 8002624:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002628:	60e0      	str	r0, [r4, #12]
 800262a:	e7cf      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002632:	d1f1      	bne.n	8002618 <RCCEx_PLLSAI1_Config+0x7c>
 8002634:	2001      	movs	r0, #1
 8002636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	0391      	lsls	r1, r2, #14
 800263c:	d4ec      	bmi.n	8002618 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002644:	e7f5      	b.n	8002632 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002646:	f7fe fab5 	bl	8000bb4 <HAL_GetTick>
 800264a:	1bc0      	subs	r0, r0, r7
 800264c:	2802      	cmp	r0, #2
 800264e:	d9c4      	bls.n	80025da <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002650:	2003      	movs	r0, #3
 8002652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002654:	6921      	ldr	r1, [r4, #16]
 8002656:	68eb      	ldr	r3, [r5, #12]
 8002658:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800265c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002660:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800266a:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002672:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe fa9e 	bl	8000bb4 <HAL_GetTick>
 8002678:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	d513      	bpl.n	80026a8 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002680:	6923      	ldr	r3, [r4, #16]
 8002682:	69aa      	ldr	r2, [r5, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	6123      	str	r3, [r4, #16]
 8002688:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800268a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800268c:	6923      	ldr	r3, [r4, #16]
 800268e:	6968      	ldr	r0, [r5, #20]
 8002690:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002694:	0840      	lsrs	r0, r0, #1
 8002696:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800269a:	3801      	subs	r0, #1
 800269c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80026a0:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80026a4:	6123      	str	r3, [r4, #16]
 80026a6:	e7e1      	b.n	800266c <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026a8:	f7fe fa84 	bl	8000bb4 <HAL_GetTick>
 80026ac:	1b80      	subs	r0, r0, r6
 80026ae:	2802      	cmp	r0, #2
 80026b0:	d9e3      	bls.n	800267a <RCCEx_PLLSAI1_Config+0xde>
 80026b2:	e7cd      	b.n	8002650 <RCCEx_PLLSAI1_Config+0xb4>
 80026b4:	40021000 	.word	0x40021000

080026b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ba:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <RCCEx_PLLSAI2_Config+0xf8>)
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	f012 0f03 	tst.w	r2, #3
{
 80026c2:	4605      	mov	r5, r0
 80026c4:	460e      	mov	r6, r1
 80026c6:	461c      	mov	r4, r3
 80026c8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ca:	d028      	beq.n	800271e <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	f002 0203 	and.w	r2, r2, #3
 80026d2:	4282      	cmp	r2, r0
 80026d4:	d13a      	bne.n	800274c <RCCEx_PLLSAI2_Config+0x94>
       ||
 80026d6:	2a00      	cmp	r2, #0
 80026d8:	d038      	beq.n	800274c <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026da:	68db      	ldr	r3, [r3, #12]
       ||
 80026dc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026de:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80026e2:	3301      	adds	r3, #1
       ||
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d131      	bne.n	800274c <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f0:	f7fe fa60 	bl	8000bb4 <HAL_GetTick>
 80026f4:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	009a      	lsls	r2, r3, #2
 80026fa:	d430      	bmi.n	800275e <RCCEx_PLLSAI2_Config+0xa6>
 80026fc:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026fe:	2e00      	cmp	r6, #0
 8002700:	d034      	beq.n	800276c <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002702:	6963      	ldr	r3, [r4, #20]
 8002704:	6929      	ldr	r1, [r5, #16]
 8002706:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800270a:	0849      	lsrs	r1, r1, #1
 800270c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002710:	3901      	subs	r1, #1
 8002712:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002716:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800271a:	6163      	str	r3, [r4, #20]
 800271c:	e032      	b.n	8002784 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800271e:	2802      	cmp	r0, #2
 8002720:	d010      	beq.n	8002744 <RCCEx_PLLSAI2_Config+0x8c>
 8002722:	2803      	cmp	r0, #3
 8002724:	d014      	beq.n	8002750 <RCCEx_PLLSAI2_Config+0x98>
 8002726:	2801      	cmp	r0, #1
 8002728:	d110      	bne.n	800274c <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	079f      	lsls	r7, r3, #30
 800272e:	d538      	bpl.n	80027a2 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002730:	68e3      	ldr	r3, [r4, #12]
 8002732:	686a      	ldr	r2, [r5, #4]
 8002734:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002738:	3a01      	subs	r2, #1
 800273a:	4318      	orrs	r0, r3
 800273c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002740:	60e0      	str	r0, [r4, #12]
 8002742:	e7d1      	b.n	80026e8 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800274a:	d1f1      	bne.n	8002730 <RCCEx_PLLSAI2_Config+0x78>
 800274c:	2001      	movs	r0, #1
 800274e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	0391      	lsls	r1, r2, #14
 8002754:	d4ec      	bmi.n	8002730 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800275c:	e7f5      	b.n	800274a <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800275e:	f7fe fa29 	bl	8000bb4 <HAL_GetTick>
 8002762:	1bc0      	subs	r0, r0, r7
 8002764:	2802      	cmp	r0, #2
 8002766:	d9c6      	bls.n	80026f6 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002768:	2003      	movs	r0, #3
 800276a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800276c:	6962      	ldr	r2, [r4, #20]
 800276e:	68eb      	ldr	r3, [r5, #12]
 8002770:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002774:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002778:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002782:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7fe fa12 	bl	8000bb4 <HAL_GetTick>
 8002790:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	d505      	bpl.n	80027a4 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002798:	6963      	ldr	r3, [r4, #20]
 800279a:	696a      	ldr	r2, [r5, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	6163      	str	r3, [r4, #20]
 80027a0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80027a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027a4:	f7fe fa06 	bl	8000bb4 <HAL_GetTick>
 80027a8:	1b80      	subs	r0, r0, r6
 80027aa:	2802      	cmp	r0, #2
 80027ac:	d9f1      	bls.n	8002792 <RCCEx_PLLSAI2_Config+0xda>
 80027ae:	e7db      	b.n	8002768 <RCCEx_PLLSAI2_Config+0xb0>
 80027b0:	40021000 	.word	0x40021000

080027b4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80027b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027b8:	6806      	ldr	r6, [r0, #0]
 80027ba:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80027be:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027c0:	d024      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80027c2:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80027c4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80027c8:	d02c      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80027ca:	d802      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80027cc:	b1c1      	cbz	r1, 8002800 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80027ce:	2601      	movs	r6, #1
 80027d0:	e01c      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80027d2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80027d6:	d00d      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80027d8:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80027dc:	d1f7      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027de:	4a4d      	ldr	r2, [pc, #308]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80027e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027ea:	430b      	orrs	r3, r1
 80027ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80027f0:	2600      	movs	r6, #0
 80027f2:	e00b      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027f4:	4a47      	ldr	r2, [pc, #284]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f6:	68d3      	ldr	r3, [r2, #12]
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	60d3      	str	r3, [r2, #12]
      break;
 80027fe:	e7ee      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002800:	3004      	adds	r0, #4
 8002802:	f7ff fecb 	bl	800259c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002806:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002808:	2800      	cmp	r0, #0
 800280a:	d0e8      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	04d8      	lsls	r0, r3, #19
 8002810:	d506      	bpl.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002812:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002814:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002818:	d074      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800281a:	d808      	bhi.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800281c:	b1a9      	cbz	r1, 800284a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800281e:	2601      	movs	r6, #1
 8002820:	4635      	mov	r5, r6
 8002822:	e021      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002824:	2100      	movs	r1, #0
 8002826:	3020      	adds	r0, #32
 8002828:	f7ff ff46 	bl	80026b8 <RCCEx_PLLSAI2_Config>
 800282c:	e7eb      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800282e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002832:	d004      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002834:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002838:	d1f1      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800283a:	4635      	mov	r5, r6
 800283c:	e009      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800283e:	4a35      	ldr	r2, [pc, #212]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002840:	68d3      	ldr	r3, [r2, #12]
 8002842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002846:	60d3      	str	r3, [r2, #12]
 8002848:	e7f7      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800284a:	1d20      	adds	r0, r4, #4
 800284c:	f7ff fea6 	bl	800259c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002850:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002852:	2d00      	cmp	r5, #0
 8002854:	d15c      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002856:	4a2f      	ldr	r2, [pc, #188]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002858:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800285a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800285e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002862:	430b      	orrs	r3, r1
 8002864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	0399      	lsls	r1, r3, #14
 800286c:	f140 814f 	bpl.w	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002870:	4f28      	ldr	r7, [pc, #160]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002874:	00da      	lsls	r2, r3, #3
 8002876:	f140 8176 	bpl.w	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 800287a:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800287e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002918 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8002882:	f8d9 3000 	ldr.w	r3, [r9]
 8002886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288a:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800288e:	f7fe f991 	bl	8000bb4 <HAL_GetTick>
 8002892:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002894:	f8d9 3000 	ldr.w	r3, [r9]
 8002898:	05db      	lsls	r3, r3, #23
 800289a:	d53f      	bpl.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 800289c:	2d00      	cmp	r5, #0
 800289e:	d144      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028a4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80028a8:	d015      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
 80028aa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d011      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80028ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80028d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028d6:	07d8      	lsls	r0, r3, #31
 80028d8:	d509      	bpl.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80028da:	f7fe f96b 	bl	8000bb4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80028e2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028e8:	0799      	lsls	r1, r3, #30
 80028ea:	f140 8109 	bpl.w	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028f2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80028f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002900:	4635      	mov	r5, r6
 8002902:	e012      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002904:	2100      	movs	r1, #0
 8002906:	f104 0020 	add.w	r0, r4, #32
 800290a:	f7ff fed5 	bl	80026b8 <RCCEx_PLLSAI2_Config>
 800290e:	e79f      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002910:	462e      	mov	r6, r5
 8002912:	e7a9      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002914:	40021000 	.word	0x40021000
 8002918:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291c:	f7fe f94a 	bl	8000bb4 <HAL_GetTick>
 8002920:	eba0 000a 	sub.w	r0, r0, sl
 8002924:	2802      	cmp	r0, #2
 8002926:	d9b5      	bls.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002928:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800292a:	f1b8 0f00 	cmp.w	r8, #0
 800292e:	d003      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002936:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	07da      	lsls	r2, r3, #31
 800293c:	d508      	bpl.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800293e:	4990      	ldr	r1, [pc, #576]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002940:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002942:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002946:	f022 0203 	bic.w	r2, r2, #3
 800294a:	4302      	orrs	r2, r0
 800294c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002950:	079f      	lsls	r7, r3, #30
 8002952:	d508      	bpl.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002954:	498a      	ldr	r1, [pc, #552]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002956:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002958:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800295c:	f022 020c 	bic.w	r2, r2, #12
 8002960:	4302      	orrs	r2, r0
 8002962:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002966:	075e      	lsls	r6, r3, #29
 8002968:	d508      	bpl.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800296a:	4985      	ldr	r1, [pc, #532]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800296c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800296e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002972:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002976:	4302      	orrs	r2, r0
 8002978:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800297c:	0718      	lsls	r0, r3, #28
 800297e:	d508      	bpl.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002980:	497f      	ldr	r1, [pc, #508]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002982:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002984:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002988:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800298c:	4302      	orrs	r2, r0
 800298e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002992:	06d9      	lsls	r1, r3, #27
 8002994:	d508      	bpl.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002996:	497a      	ldr	r1, [pc, #488]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002998:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800299a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800299e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029a2:	4302      	orrs	r2, r0
 80029a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029a8:	069a      	lsls	r2, r3, #26
 80029aa:	d508      	bpl.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029ac:	4974      	ldr	r1, [pc, #464]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029ae:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80029b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80029b8:	4302      	orrs	r2, r0
 80029ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029be:	059f      	lsls	r7, r3, #22
 80029c0:	d508      	bpl.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029c2:	496f      	ldr	r1, [pc, #444]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029c4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80029c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029ca:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80029ce:	4302      	orrs	r2, r0
 80029d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029d4:	055e      	lsls	r6, r3, #21
 80029d6:	d508      	bpl.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029d8:	4969      	ldr	r1, [pc, #420]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029da:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80029dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029e0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80029e4:	4302      	orrs	r2, r0
 80029e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ea:	0658      	lsls	r0, r3, #25
 80029ec:	d508      	bpl.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ee:	4964      	ldr	r1, [pc, #400]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80029f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80029fa:	4302      	orrs	r2, r0
 80029fc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a00:	0619      	lsls	r1, r3, #24
 8002a02:	d508      	bpl.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a04:	495e      	ldr	r1, [pc, #376]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a08:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a0c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002a10:	4302      	orrs	r2, r0
 8002a12:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a16:	05da      	lsls	r2, r3, #23
 8002a18:	d508      	bpl.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a1a:	4959      	ldr	r1, [pc, #356]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a1e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a22:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002a26:	4302      	orrs	r2, r0
 8002a28:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a2c:	049b      	lsls	r3, r3, #18
 8002a2e:	d50f      	bpl.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a30:	4a53      	ldr	r2, [pc, #332]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a32:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002a34:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a38:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002a3c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a3e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a46:	d164      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	68d3      	ldr	r3, [r2, #12]
 8002a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a4e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	031f      	lsls	r7, r3, #12
 8002a54:	d50f      	bpl.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a56:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a58:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002a5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a5e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002a62:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a64:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a6c:	d15c      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6e:	68d3      	ldr	r3, [r2, #12]
 8002a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a74:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	035e      	lsls	r6, r3, #13
 8002a7a:	d50f      	bpl.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a7c:	4a40      	ldr	r2, [pc, #256]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a7e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002a80:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a84:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002a88:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a8a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a92:	d154      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a94:	68d3      	ldr	r3, [r2, #12]
 8002a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a9a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	0458      	lsls	r0, r3, #17
 8002aa0:	d512      	bpl.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aa2:	4937      	ldr	r1, [pc, #220]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002aa4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002aa6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002aaa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002aae:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ab0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ab8:	d14c      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002aba:	2102      	movs	r1, #2
 8002abc:	1d20      	adds	r0, r4, #4
 8002abe:	f7ff fd6d 	bl	800259c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	bf18      	it	ne
 8002ac6:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ac8:	6822      	ldr	r2, [r4, #0]
 8002aca:	0411      	lsls	r1, r2, #16
 8002acc:	d508      	bpl.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ace:	492c      	ldr	r1, [pc, #176]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ad0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002ad2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002ad6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ada:	4303      	orrs	r3, r0
 8002adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ae0:	03d3      	lsls	r3, r2, #15
 8002ae2:	d509      	bpl.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ae4:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ae6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002aea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002aee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002af2:	430b      	orrs	r3, r1
 8002af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002af8:	4628      	mov	r0, r5
 8002afa:	b002      	add	sp, #8
 8002afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b00:	f7fe f858 	bl	8000bb4 <HAL_GetTick>
 8002b04:	1b40      	subs	r0, r0, r5
 8002b06:	4548      	cmp	r0, r9
 8002b08:	f67f aeec 	bls.w	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002b0c:	e70c      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002b0e:	4635      	mov	r5, r6
 8002b10:	e712      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b12:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002b16:	d19b      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b18:	2101      	movs	r1, #1
 8002b1a:	1d20      	adds	r0, r4, #4
 8002b1c:	f7ff fd3e 	bl	800259c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002b20:	2800      	cmp	r0, #0
 8002b22:	bf18      	it	ne
 8002b24:	4605      	movne	r5, r0
 8002b26:	e793      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b28:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002b2c:	d1a3      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b2e:	2101      	movs	r1, #1
 8002b30:	1d20      	adds	r0, r4, #4
 8002b32:	f7ff fd33 	bl	800259c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002b36:	2800      	cmp	r0, #0
 8002b38:	bf18      	it	ne
 8002b3a:	4605      	movne	r5, r0
 8002b3c:	e79b      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b3e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002b42:	d1ab      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b44:	2101      	movs	r1, #1
 8002b46:	1d20      	adds	r0, r4, #4
 8002b48:	f7ff fd28 	bl	800259c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	bf18      	it	ne
 8002b50:	4605      	movne	r5, r0
 8002b52:	e7a3      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b54:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002b58:	d1b6      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	f104 0020 	add.w	r0, r4, #32
 8002b60:	f7ff fdaa 	bl	80026b8 <RCCEx_PLLSAI2_Config>
 8002b64:	e7ad      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b78:	f04f 0801 	mov.w	r8, #1
 8002b7c:	e67f      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000

08002b84 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b84:	6a03      	ldr	r3, [r0, #32]
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b8c:	6a03      	ldr	r3, [r0, #32]
{
 8002b8e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b92:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b9a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002b9e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ba0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002ba2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002ba6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ba8:	4d1b      	ldr	r5, [pc, #108]	; (8002c18 <TIM_OC1_SetConfig+0x94>)
 8002baa:	42a8      	cmp	r0, r5
 8002bac:	d00f      	beq.n	8002bce <TIM_OC1_SetConfig+0x4a>
 8002bae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002bb2:	42a8      	cmp	r0, r5
 8002bb4:	d00b      	beq.n	8002bce <TIM_OC1_SetConfig+0x4a>
 8002bb6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002bba:	42a8      	cmp	r0, r5
 8002bbc:	d007      	beq.n	8002bce <TIM_OC1_SetConfig+0x4a>
 8002bbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002bc2:	42a8      	cmp	r0, r5
 8002bc4:	d003      	beq.n	8002bce <TIM_OC1_SetConfig+0x4a>
 8002bc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002bca:	42a8      	cmp	r0, r5
 8002bcc:	d11e      	bne.n	8002c0c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bd0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002bd4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd6:	4d10      	ldr	r5, [pc, #64]	; (8002c18 <TIM_OC1_SetConfig+0x94>)
 8002bd8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bda:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bde:	d00f      	beq.n	8002c00 <TIM_OC1_SetConfig+0x7c>
 8002be0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002be4:	42a8      	cmp	r0, r5
 8002be6:	d00b      	beq.n	8002c00 <TIM_OC1_SetConfig+0x7c>
 8002be8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002bec:	42a8      	cmp	r0, r5
 8002bee:	d007      	beq.n	8002c00 <TIM_OC1_SetConfig+0x7c>
 8002bf0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002bf4:	42a8      	cmp	r0, r5
 8002bf6:	d003      	beq.n	8002c00 <TIM_OC1_SetConfig+0x7c>
 8002bf8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002bfc:	42a8      	cmp	r0, r5
 8002bfe:	d105      	bne.n	8002c0c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c00:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c04:	698e      	ldr	r6, [r1, #24]
 8002c06:	694c      	ldr	r4, [r1, #20]
 8002c08:	4334      	orrs	r4, r6
 8002c0a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c0c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c0e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c10:	684a      	ldr	r2, [r1, #4]
 8002c12:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c14:	6203      	str	r3, [r0, #32]
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	40012c00 	.word	0x40012c00

08002c1c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c1c:	6a03      	ldr	r3, [r0, #32]
 8002c1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c22:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c24:	6a03      	ldr	r3, [r0, #32]
{
 8002c26:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c2a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c32:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002c36:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c38:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002c3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c3e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c42:	4d16      	ldr	r5, [pc, #88]	; (8002c9c <TIM_OC3_SetConfig+0x80>)
 8002c44:	42a8      	cmp	r0, r5
 8002c46:	d003      	beq.n	8002c50 <TIM_OC3_SetConfig+0x34>
 8002c48:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002c4c:	42a8      	cmp	r0, r5
 8002c4e:	d10d      	bne.n	8002c6c <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c50:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c5a:	4d10      	ldr	r5, [pc, #64]	; (8002c9c <TIM_OC3_SetConfig+0x80>)
 8002c5c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c62:	d00e      	beq.n	8002c82 <TIM_OC3_SetConfig+0x66>
 8002c64:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002c68:	42a8      	cmp	r0, r5
 8002c6a:	d00a      	beq.n	8002c82 <TIM_OC3_SetConfig+0x66>
 8002c6c:	4d0c      	ldr	r5, [pc, #48]	; (8002ca0 <TIM_OC3_SetConfig+0x84>)
 8002c6e:	42a8      	cmp	r0, r5
 8002c70:	d007      	beq.n	8002c82 <TIM_OC3_SetConfig+0x66>
 8002c72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c76:	42a8      	cmp	r0, r5
 8002c78:	d003      	beq.n	8002c82 <TIM_OC3_SetConfig+0x66>
 8002c7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c7e:	42a8      	cmp	r0, r5
 8002c80:	d106      	bne.n	8002c90 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c82:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c86:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c88:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c8a:	4334      	orrs	r4, r6
 8002c8c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c90:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c92:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c94:	684a      	ldr	r2, [r1, #4]
 8002c96:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c98:	6203      	str	r3, [r0, #32]
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
 8002c9c:	40012c00 	.word	0x40012c00
 8002ca0:	40014000 	.word	0x40014000

08002ca4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ca4:	6a03      	ldr	r3, [r0, #32]
 8002ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002caa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cac:	6a03      	ldr	r3, [r0, #32]
{
 8002cae:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cb2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cb4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cb6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002cba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cbe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cc2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002cc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cc8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ccc:	4d0e      	ldr	r5, [pc, #56]	; (8002d08 <TIM_OC4_SetConfig+0x64>)
 8002cce:	42a8      	cmp	r0, r5
 8002cd0:	d00f      	beq.n	8002cf2 <TIM_OC4_SetConfig+0x4e>
 8002cd2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002cd6:	42a8      	cmp	r0, r5
 8002cd8:	d00b      	beq.n	8002cf2 <TIM_OC4_SetConfig+0x4e>
 8002cda:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002cde:	42a8      	cmp	r0, r5
 8002ce0:	d007      	beq.n	8002cf2 <TIM_OC4_SetConfig+0x4e>
 8002ce2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ce6:	42a8      	cmp	r0, r5
 8002ce8:	d003      	beq.n	8002cf2 <TIM_OC4_SetConfig+0x4e>
 8002cea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cee:	42a8      	cmp	r0, r5
 8002cf0:	d104      	bne.n	8002cfc <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cf2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cf4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cf8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cfe:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d00:	684a      	ldr	r2, [r1, #4]
 8002d02:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d04:	6203      	str	r3, [r0, #32]
 8002d06:	bd30      	pop	{r4, r5, pc}
 8002d08:	40012c00 	.word	0x40012c00

08002d0c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002d0c:	6a03      	ldr	r3, [r0, #32]
 8002d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d12:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d14:	6a03      	ldr	r3, [r0, #32]
{
 8002d16:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d18:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d1a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8002d26:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d28:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8002d2a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d2e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d32:	4d0f      	ldr	r5, [pc, #60]	; (8002d70 <TIM_OC5_SetConfig+0x64>)
 8002d34:	42a8      	cmp	r0, r5
 8002d36:	d00f      	beq.n	8002d58 <TIM_OC5_SetConfig+0x4c>
 8002d38:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002d3c:	42a8      	cmp	r0, r5
 8002d3e:	d00b      	beq.n	8002d58 <TIM_OC5_SetConfig+0x4c>
 8002d40:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002d44:	42a8      	cmp	r0, r5
 8002d46:	d007      	beq.n	8002d58 <TIM_OC5_SetConfig+0x4c>
 8002d48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d4c:	42a8      	cmp	r0, r5
 8002d4e:	d003      	beq.n	8002d58 <TIM_OC5_SetConfig+0x4c>
 8002d50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d54:	42a8      	cmp	r0, r5
 8002d56:	d104      	bne.n	8002d62 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d58:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d5a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d5e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d62:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d64:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d66:	684a      	ldr	r2, [r1, #4]
 8002d68:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6a:	6203      	str	r3, [r0, #32]
 8002d6c:	bd30      	pop	{r4, r5, pc}
 8002d6e:	bf00      	nop
 8002d70:	40012c00 	.word	0x40012c00

08002d74 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d74:	6a03      	ldr	r3, [r0, #32]
 8002d76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d7a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7c:	6a03      	ldr	r3, [r0, #32]
{
 8002d7e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d80:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d82:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d86:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002d8a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d8e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d92:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d98:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d9c:	4d0e      	ldr	r5, [pc, #56]	; (8002dd8 <TIM_OC6_SetConfig+0x64>)
 8002d9e:	42a8      	cmp	r0, r5
 8002da0:	d00f      	beq.n	8002dc2 <TIM_OC6_SetConfig+0x4e>
 8002da2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002da6:	42a8      	cmp	r0, r5
 8002da8:	d00b      	beq.n	8002dc2 <TIM_OC6_SetConfig+0x4e>
 8002daa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002dae:	42a8      	cmp	r0, r5
 8002db0:	d007      	beq.n	8002dc2 <TIM_OC6_SetConfig+0x4e>
 8002db2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002db6:	42a8      	cmp	r0, r5
 8002db8:	d003      	beq.n	8002dc2 <TIM_OC6_SetConfig+0x4e>
 8002dba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002dbe:	42a8      	cmp	r0, r5
 8002dc0:	d104      	bne.n	8002dcc <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002dc2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002dc4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002dc8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dcc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002dce:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002dd0:	684a      	ldr	r2, [r1, #4]
 8002dd2:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd4:	6203      	str	r3, [r0, #32]
 8002dd6:	bd30      	pop	{r4, r5, pc}
 8002dd8:	40012c00 	.word	0x40012c00

08002ddc <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dde:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002de0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de4:	6891      	ldr	r1, [r2, #8]
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_TIM_Base_Start+0x2c>)
 8002de8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d006      	beq.n	8002dfc <HAL_TIM_Base_Start+0x20>
 8002dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8002df2:	bf1e      	ittt	ne
 8002df4:	6813      	ldrne	r3, [r2, #0]
 8002df6:	f043 0301 	orrne.w	r3, r3, #1
 8002dfa:	6013      	strne	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002e02:	2000      	movs	r0, #0
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	00010007 	.word	0x00010007

08002e0c <HAL_TIM_OC_MspInit>:
 8002e0c:	4770      	bx	lr
	...

08002e10 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e10:	4a30      	ldr	r2, [pc, #192]	; (8002ed4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002e12:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e14:	4290      	cmp	r0, r2
 8002e16:	d012      	beq.n	8002e3e <TIM_Base_SetConfig+0x2e>
 8002e18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e1c:	d00f      	beq.n	8002e3e <TIM_Base_SetConfig+0x2e>
 8002e1e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002e22:	4290      	cmp	r0, r2
 8002e24:	d00b      	beq.n	8002e3e <TIM_Base_SetConfig+0x2e>
 8002e26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e2a:	4290      	cmp	r0, r2
 8002e2c:	d007      	beq.n	8002e3e <TIM_Base_SetConfig+0x2e>
 8002e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e32:	4290      	cmp	r0, r2
 8002e34:	d003      	beq.n	8002e3e <TIM_Base_SetConfig+0x2e>
 8002e36:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002e3a:	4290      	cmp	r0, r2
 8002e3c:	d119      	bne.n	8002e72 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8002e3e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e44:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e46:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <TIM_Base_SetConfig+0xc4>)
 8002e48:	4290      	cmp	r0, r2
 8002e4a:	d01d      	beq.n	8002e88 <TIM_Base_SetConfig+0x78>
 8002e4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e50:	d01a      	beq.n	8002e88 <TIM_Base_SetConfig+0x78>
 8002e52:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002e56:	4290      	cmp	r0, r2
 8002e58:	d016      	beq.n	8002e88 <TIM_Base_SetConfig+0x78>
 8002e5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e5e:	4290      	cmp	r0, r2
 8002e60:	d012      	beq.n	8002e88 <TIM_Base_SetConfig+0x78>
 8002e62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e66:	4290      	cmp	r0, r2
 8002e68:	d00e      	beq.n	8002e88 <TIM_Base_SetConfig+0x78>
 8002e6a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002e6e:	4290      	cmp	r0, r2
 8002e70:	d00a      	beq.n	8002e88 <TIM_Base_SetConfig+0x78>
 8002e72:	4a19      	ldr	r2, [pc, #100]	; (8002ed8 <TIM_Base_SetConfig+0xc8>)
 8002e74:	4290      	cmp	r0, r2
 8002e76:	d007      	beq.n	8002e88 <TIM_Base_SetConfig+0x78>
 8002e78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e7c:	4290      	cmp	r0, r2
 8002e7e:	d003      	beq.n	8002e88 <TIM_Base_SetConfig+0x78>
 8002e80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e84:	4290      	cmp	r0, r2
 8002e86:	d103      	bne.n	8002e90 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e88:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e90:	694a      	ldr	r2, [r1, #20]
 8002e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e96:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002e98:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e9a:	688b      	ldr	r3, [r1, #8]
 8002e9c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e9e:	680b      	ldr	r3, [r1, #0]
 8002ea0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <TIM_Base_SetConfig+0xc4>)
 8002ea4:	4298      	cmp	r0, r3
 8002ea6:	d00f      	beq.n	8002ec8 <TIM_Base_SetConfig+0xb8>
 8002ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eac:	4298      	cmp	r0, r3
 8002eae:	d00b      	beq.n	8002ec8 <TIM_Base_SetConfig+0xb8>
 8002eb0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002eb4:	4298      	cmp	r0, r3
 8002eb6:	d007      	beq.n	8002ec8 <TIM_Base_SetConfig+0xb8>
 8002eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ebc:	4298      	cmp	r0, r3
 8002ebe:	d003      	beq.n	8002ec8 <TIM_Base_SetConfig+0xb8>
 8002ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ec4:	4298      	cmp	r0, r3
 8002ec6:	d101      	bne.n	8002ecc <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec8:	690b      	ldr	r3, [r1, #16]
 8002eca:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	6143      	str	r3, [r0, #20]
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40012c00 	.word	0x40012c00
 8002ed8:	40014000 	.word	0x40014000

08002edc <HAL_TIM_Base_Init>:
{
 8002edc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002ede:	4604      	mov	r4, r0
 8002ee0:	b1a0      	cbz	r0, 8002f0c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ee6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002eea:	b91b      	cbnz	r3, 8002ef4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002eec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ef0:	f7fd fdb6 	bl	8000a60 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efa:	6820      	ldr	r0, [r4, #0]
 8002efc:	1d21      	adds	r1, r4, #4
 8002efe:	f7ff ff87 	bl	8002e10 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f08:	2000      	movs	r0, #0
 8002f0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f0c:	2001      	movs	r0, #1
}
 8002f0e:	bd10      	pop	{r4, pc}

08002f10 <HAL_TIM_OC_Init>:
{
 8002f10:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002f12:	4604      	mov	r4, r0
 8002f14:	b1a0      	cbz	r0, 8002f40 <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002f16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f1e:	b91b      	cbnz	r3, 8002f28 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002f24:	f7ff ff72 	bl	8002e0c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002f2e:	6820      	ldr	r0, [r4, #0]
 8002f30:	1d21      	adds	r1, r4, #4
 8002f32:	f7ff ff6d 	bl	8002e10 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f40:	2001      	movs	r0, #1
}
 8002f42:	bd10      	pop	{r4, pc}

08002f44 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f44:	6a03      	ldr	r3, [r0, #32]
 8002f46:	f023 0310 	bic.w	r3, r3, #16
 8002f4a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002f4c:	6a03      	ldr	r3, [r0, #32]
{
 8002f4e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8002f50:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002f52:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f56:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002f5a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f5e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f62:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002f64:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f68:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f6c:	4d16      	ldr	r5, [pc, #88]	; (8002fc8 <TIM_OC2_SetConfig+0x84>)
 8002f6e:	42a8      	cmp	r0, r5
 8002f70:	d003      	beq.n	8002f7a <TIM_OC2_SetConfig+0x36>
 8002f72:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002f76:	42a8      	cmp	r0, r5
 8002f78:	d10d      	bne.n	8002f96 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f7a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f84:	4d10      	ldr	r5, [pc, #64]	; (8002fc8 <TIM_OC2_SetConfig+0x84>)
 8002f86:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8c:	d00e      	beq.n	8002fac <TIM_OC2_SetConfig+0x68>
 8002f8e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002f92:	42a8      	cmp	r0, r5
 8002f94:	d00a      	beq.n	8002fac <TIM_OC2_SetConfig+0x68>
 8002f96:	4d0d      	ldr	r5, [pc, #52]	; (8002fcc <TIM_OC2_SetConfig+0x88>)
 8002f98:	42a8      	cmp	r0, r5
 8002f9a:	d007      	beq.n	8002fac <TIM_OC2_SetConfig+0x68>
 8002f9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002fa0:	42a8      	cmp	r0, r5
 8002fa2:	d003      	beq.n	8002fac <TIM_OC2_SetConfig+0x68>
 8002fa4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002fa8:	42a8      	cmp	r0, r5
 8002faa:	d106      	bne.n	8002fba <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fac:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fb0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fb2:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fb4:	4334      	orrs	r4, r6
 8002fb6:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8002fba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002fbc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002fbe:	684a      	ldr	r2, [r1, #4]
 8002fc0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002fc2:	6203      	str	r3, [r0, #32]
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40014000 	.word	0x40014000

08002fd0 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8002fd0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fd4:	2b01      	cmp	r3, #1
{
 8002fd6:	b510      	push	{r4, lr}
 8002fd8:	4604      	mov	r4, r0
 8002fda:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002fde:	d010      	beq.n	8003002 <HAL_TIM_OC_ConfigChannel+0x32>
 8002fe0:	2301      	movs	r3, #1
  switch (Channel)
 8002fe2:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002fe4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8002fec:	d01c      	beq.n	8003028 <HAL_TIM_OC_ConfigChannel+0x58>
 8002fee:	d809      	bhi.n	8003004 <HAL_TIM_OC_ConfigChannel+0x34>
 8002ff0:	b192      	cbz	r2, 8003018 <HAL_TIM_OC_ConfigChannel+0x48>
 8002ff2:	2a04      	cmp	r2, #4
 8002ff4:	d014      	beq.n	8003020 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8002ff6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002ff8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002ffa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002ffe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003002:	bd10      	pop	{r4, pc}
  switch (Channel)
 8003004:	2a10      	cmp	r2, #16
 8003006:	d013      	beq.n	8003030 <HAL_TIM_OC_ConfigChannel+0x60>
 8003008:	2a14      	cmp	r2, #20
 800300a:	d015      	beq.n	8003038 <HAL_TIM_OC_ConfigChannel+0x68>
 800300c:	2a0c      	cmp	r2, #12
 800300e:	d1f2      	bne.n	8002ff6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003010:	6820      	ldr	r0, [r4, #0]
 8003012:	f7ff fe47 	bl	8002ca4 <TIM_OC4_SetConfig>
      break;
 8003016:	e7ee      	b.n	8002ff6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003018:	6820      	ldr	r0, [r4, #0]
 800301a:	f7ff fdb3 	bl	8002b84 <TIM_OC1_SetConfig>
      break;
 800301e:	e7ea      	b.n	8002ff6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003020:	6820      	ldr	r0, [r4, #0]
 8003022:	f7ff ff8f 	bl	8002f44 <TIM_OC2_SetConfig>
      break;
 8003026:	e7e6      	b.n	8002ff6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003028:	6820      	ldr	r0, [r4, #0]
 800302a:	f7ff fdf7 	bl	8002c1c <TIM_OC3_SetConfig>
      break;
 800302e:	e7e2      	b.n	8002ff6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003030:	6820      	ldr	r0, [r4, #0]
 8003032:	f7ff fe6b 	bl	8002d0c <TIM_OC5_SetConfig>
      break;
 8003036:	e7de      	b.n	8002ff6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	f7ff fe9b 	bl	8002d74 <TIM_OC6_SetConfig>
      break;
 800303e:	e7da      	b.n	8002ff6 <HAL_TIM_OC_ConfigChannel+0x26>

08003040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003040:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003042:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003044:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003046:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800304a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800304e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003050:	6083      	str	r3, [r0, #8]
 8003052:	bd10      	pop	{r4, pc}

08003054 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003054:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003058:	2b01      	cmp	r3, #1
{
 800305a:	b570      	push	{r4, r5, r6, lr}
 800305c:	4604      	mov	r4, r0
 800305e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003062:	d017      	beq.n	8003094 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003068:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800306a:	2301      	movs	r3, #1
 800306c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003070:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003072:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_TIM_ConfigClockSource+0x124>)
 8003074:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003076:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003078:	680b      	ldr	r3, [r1, #0]
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d065      	beq.n	800314a <HAL_TIM_ConfigClockSource+0xf6>
 800307e:	d815      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x58>
 8003080:	2b10      	cmp	r3, #16
 8003082:	d00c      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x4a>
 8003084:	d807      	bhi.n	8003096 <HAL_TIM_ConfigClockSource+0x42>
 8003086:	b153      	cbz	r3, 800309e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8003088:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800308a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800308c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003090:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003094:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003096:	2b20      	cmp	r3, #32
 8003098:	d001      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x4a>
 800309a:	2b30      	cmp	r3, #48	; 0x30
 800309c:	d1f4      	bne.n	8003088 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 800309e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030a0:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80030a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030a8:	4313      	orrs	r3, r2
 80030aa:	e01a      	b.n	80030e2 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 80030ac:	2b60      	cmp	r3, #96	; 0x60
 80030ae:	d034      	beq.n	800311a <HAL_TIM_ConfigClockSource+0xc6>
 80030b0:	d819      	bhi.n	80030e6 <HAL_TIM_ConfigClockSource+0x92>
 80030b2:	2b50      	cmp	r3, #80	; 0x50
 80030b4:	d1e8      	bne.n	8003088 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b6:	684a      	ldr	r2, [r1, #4]
 80030b8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80030ba:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030bc:	6a05      	ldr	r5, [r0, #32]
 80030be:	f025 0501 	bic.w	r5, r5, #1
 80030c2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030c6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030ce:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80030d2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80030d4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80030d6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80030d8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030de:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80030e2:	6083      	str	r3, [r0, #8]
 80030e4:	e7d0      	b.n	8003088 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 80030e6:	2b70      	cmp	r3, #112	; 0x70
 80030e8:	d00c      	beq.n	8003104 <HAL_TIM_ConfigClockSource+0xb0>
 80030ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ee:	d1cb      	bne.n	8003088 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80030f0:	68cb      	ldr	r3, [r1, #12]
 80030f2:	684a      	ldr	r2, [r1, #4]
 80030f4:	6889      	ldr	r1, [r1, #8]
 80030f6:	f7ff ffa3 	bl	8003040 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030fa:	6822      	ldr	r2, [r4, #0]
 80030fc:	6893      	ldr	r3, [r2, #8]
 80030fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003102:	e008      	b.n	8003116 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8003104:	68cb      	ldr	r3, [r1, #12]
 8003106:	684a      	ldr	r2, [r1, #4]
 8003108:	6889      	ldr	r1, [r1, #8]
 800310a:	f7ff ff99 	bl	8003040 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003112:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003116:	6093      	str	r3, [r2, #8]
      break;
 8003118:	e7b6      	b.n	8003088 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800311a:	684d      	ldr	r5, [r1, #4]
 800311c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800311e:	6a01      	ldr	r1, [r0, #32]
 8003120:	f021 0110 	bic.w	r1, r1, #16
 8003124:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003126:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003128:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800312a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800312e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003132:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003136:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800313a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800313c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800313e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003144:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003148:	e7cb      	b.n	80030e2 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800314a:	684a      	ldr	r2, [r1, #4]
 800314c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800314e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003150:	6a05      	ldr	r5, [r0, #32]
 8003152:	f025 0501 	bic.w	r5, r5, #1
 8003156:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003158:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800315a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800315e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003162:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003166:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003168:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800316a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800316c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003172:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003176:	e7b4      	b.n	80030e2 <HAL_TIM_ConfigClockSource+0x8e>
 8003178:	fffe0088 	.word	0xfffe0088

0800317c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800317c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003180:	2b01      	cmp	r3, #1
{
 8003182:	b570      	push	{r4, r5, r6, lr}
 8003184:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003188:	d039      	beq.n	80031fe <HAL_TIMEx_MasterConfigSynchronization+0x82>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800318e:	4d1d      	ldr	r5, [pc, #116]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  tmpcr2 = htim->Instance->CR2;
 8003190:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8003192:	2201      	movs	r2, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003194:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8003196:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 800319a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800319c:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800319e:	d002      	beq.n	80031a6 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 80031a0:	4e19      	ldr	r6, [pc, #100]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 80031a2:	42b3      	cmp	r3, r6
 80031a4:	d103      	bne.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0x32>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031a6:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031a8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031ac:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031ae:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80031b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031b4:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b6:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80031b8:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ba:	d015      	beq.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c0:	d012      	beq.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80031c2:	4a12      	ldr	r2, [pc, #72]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00f      	beq.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80031c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00b      	beq.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80031d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d007      	beq.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80031d8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80031e0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d104      	bne.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x76>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031e8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ea:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ee:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f8:	2300      	movs	r3, #0
 80031fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80031fe:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	bf00      	nop
 8003204:	40012c00 	.word	0x40012c00
 8003208:	40013400 	.word	0x40013400
 800320c:	40000400 	.word	0x40000400

08003210 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003210:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003212:	69c1      	ldr	r1, [r0, #28]
{
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003218:	6883      	ldr	r3, [r0, #8]
 800321a:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800321c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800321e:	4303      	orrs	r3, r0
 8003220:	6960      	ldr	r0, [r4, #20]
 8003222:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003224:	48ba      	ldr	r0, [pc, #744]	; (8003510 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003226:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003228:	4028      	ands	r0, r5
 800322a:	4303      	orrs	r3, r0
 800322c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800322e:	6853      	ldr	r3, [r2, #4]
 8003230:	68e0      	ldr	r0, [r4, #12]
 8003232:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003236:	4303      	orrs	r3, r0
 8003238:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800323a:	4bb6      	ldr	r3, [pc, #728]	; (8003514 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800323c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800323e:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003240:	bf1c      	itt	ne
 8003242:	6a23      	ldrne	r3, [r4, #32]
 8003244:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003246:	6893      	ldr	r3, [r2, #8]
 8003248:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800324c:	4303      	orrs	r3, r0
 800324e:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003250:	4bb1      	ldr	r3, [pc, #708]	; (8003518 <UART_SetConfig+0x308>)
 8003252:	429a      	cmp	r2, r3
 8003254:	d119      	bne.n	800328a <UART_SetConfig+0x7a>
 8003256:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800325a:	4ab0      	ldr	r2, [pc, #704]	; (800351c <UART_SetConfig+0x30c>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003260:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003264:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003268:	5cd3      	ldrb	r3, [r2, r3]
 800326a:	f040 8138 	bne.w	80034de <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 800326e:	2b08      	cmp	r3, #8
 8003270:	f200 808f 	bhi.w	8003392 <UART_SetConfig+0x182>
 8003274:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003278:	00ca011a 	.word	0x00ca011a
 800327c:	008d00f9 	.word	0x008d00f9
 8003280:	008d0114 	.word	0x008d0114
 8003284:	008d008d 	.word	0x008d008d
 8003288:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 800328a:	4ba5      	ldr	r3, [pc, #660]	; (8003520 <UART_SetConfig+0x310>)
 800328c:	429a      	cmp	r2, r3
 800328e:	d107      	bne.n	80032a0 <UART_SetConfig+0x90>
 8003290:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003294:	4aa3      	ldr	r2, [pc, #652]	; (8003524 <UART_SetConfig+0x314>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	e7e1      	b.n	8003264 <UART_SetConfig+0x54>
 80032a0:	4ba1      	ldr	r3, [pc, #644]	; (8003528 <UART_SetConfig+0x318>)
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d123      	bne.n	80032ee <UART_SetConfig+0xde>
 80032a6:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	f000 80f1 	beq.w	800349a <UART_SetConfig+0x28a>
 80032b8:	d80b      	bhi.n	80032d2 <UART_SetConfig+0xc2>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 80f3 	beq.w	80034a6 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      default:
        ret = HAL_ERROR;
 80032c4:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80032c8:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032cc:	f000 80f8 	beq.w	80034c0 <UART_SetConfig+0x2b0>
 80032d0:	e0a8      	b.n	8003424 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	f000 80c6 	beq.w	8003464 <UART_SetConfig+0x254>
 80032d8:	2b30      	cmp	r3, #48	; 0x30
 80032da:	d1f1      	bne.n	80032c0 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032dc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80032e0:	f040 80b8 	bne.w	8003454 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032e4:	6860      	ldr	r0, [r4, #4]
 80032e6:	0843      	lsrs	r3, r0, #1
 80032e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80032ec:	e0c3      	b.n	8003476 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ee:	4b8f      	ldr	r3, [pc, #572]	; (800352c <UART_SetConfig+0x31c>)
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d11e      	bne.n	8003332 <UART_SetConfig+0x122>
 80032f4:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	f000 80bb 	beq.w	800347c <UART_SetConfig+0x26c>
 8003306:	d80a      	bhi.n	800331e <UART_SetConfig+0x10e>
 8003308:	b97b      	cbnz	r3, 800332a <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800330a:	4b82      	ldr	r3, [pc, #520]	; (8003514 <UART_SetConfig+0x304>)
 800330c:	429a      	cmp	r2, r3
 800330e:	f040 80ca 	bne.w	80034a6 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003312:	f7ff f91f 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
        break;
 8003316:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8003318:	bbb0      	cbnz	r0, 8003388 <UART_SetConfig+0x178>
 800331a:	4602      	mov	r2, r0
 800331c:	e03a      	b.n	8003394 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800331e:	2b80      	cmp	r3, #128	; 0x80
 8003320:	f000 809d 	beq.w	800345e <UART_SetConfig+0x24e>
 8003324:	2bc0      	cmp	r3, #192	; 0xc0
 8003326:	f000 80b0 	beq.w	800348a <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800332a:	4b7a      	ldr	r3, [pc, #488]	; (8003514 <UART_SetConfig+0x304>)
 800332c:	429a      	cmp	r2, r3
 800332e:	d1c7      	bne.n	80032c0 <UART_SetConfig+0xb0>
 8003330:	e02f      	b.n	8003392 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003332:	4b7f      	ldr	r3, [pc, #508]	; (8003530 <UART_SetConfig+0x320>)
 8003334:	429a      	cmp	r2, r3
 8003336:	d111      	bne.n	800335c <UART_SetConfig+0x14c>
 8003338:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003348:	f000 8098 	beq.w	800347c <UART_SetConfig+0x26c>
 800334c:	d9dc      	bls.n	8003308 <UART_SetConfig+0xf8>
 800334e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003352:	f000 8084 	beq.w	800345e <UART_SetConfig+0x24e>
 8003356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800335a:	e7e4      	b.n	8003326 <UART_SetConfig+0x116>
 800335c:	4b6d      	ldr	r3, [pc, #436]	; (8003514 <UART_SetConfig+0x304>)
 800335e:	429a      	cmp	r2, r3
 8003360:	d1ae      	bne.n	80032c0 <UART_SetConfig+0xb0>
 8003362:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	f000 8083 	beq.w	800347c <UART_SetConfig+0x26c>
 8003376:	d9c7      	bls.n	8003308 <UART_SetConfig+0xf8>
 8003378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337c:	d06f      	beq.n	800345e <UART_SetConfig+0x24e>
 800337e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003382:	e7d0      	b.n	8003326 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003384:	486b      	ldr	r0, [pc, #428]	; (8003534 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8003386:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003388:	6862      	ldr	r2, [r4, #4]
 800338a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800338e:	4281      	cmp	r1, r0
 8003390:	d905      	bls.n	800339e <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8003392:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003394:	2300      	movs	r3, #0
 8003396:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003398:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800339a:	4610      	mov	r0, r2
 800339c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800339e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80033a2:	d8f6      	bhi.n	8003392 <UART_SetConfig+0x182>
        switch (clocksource)
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d82e      	bhi.n	8003406 <UART_SetConfig+0x1f6>
 80033a8:	e8df f003 	tbb	[pc, r3]
 80033ac:	2d1c2d05 	.word	0x2d1c2d05
 80033b0:	2d2d2d24 	.word	0x2d2d2d24
 80033b4:	27          	.byte	0x27
 80033b5:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 80033b6:	f7ff f8cd 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033ba:	6862      	ldr	r2, [r4, #4]
 80033bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033c0:	0856      	lsrs	r6, r2, #1
 80033c2:	2700      	movs	r7, #0
 80033c4:	fbe1 6700 	umlal	r6, r7, r1, r0
 80033c8:	2300      	movs	r3, #0
 80033ca:	4630      	mov	r0, r6
 80033cc:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80033ce:	f7fc fefb 	bl	80001c8 <__aeabi_uldivmod>
            break;
 80033d2:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033d4:	4b58      	ldr	r3, [pc, #352]	; (8003538 <UART_SetConfig+0x328>)
 80033d6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80033da:	4299      	cmp	r1, r3
 80033dc:	d8d9      	bhi.n	8003392 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	60d8      	str	r0, [r3, #12]
 80033e2:	e7d7      	b.n	8003394 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80033e4:	4855      	ldr	r0, [pc, #340]	; (800353c <UART_SetConfig+0x32c>)
 80033e6:	0855      	lsrs	r5, r2, #1
 80033e8:	2300      	movs	r3, #0
 80033ea:	2100      	movs	r1, #0
 80033ec:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80033ee:	f141 0100 	adc.w	r1, r1, #0
 80033f2:	e7ec      	b.n	80033ce <UART_SetConfig+0x1be>
            pclk = HAL_RCC_GetSysClockFreq();
 80033f4:	f7fe fd44 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 80033f8:	e7df      	b.n	80033ba <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80033fa:	0850      	lsrs	r0, r2, #1
 80033fc:	2100      	movs	r1, #0
 80033fe:	2300      	movs	r3, #0
 8003400:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8003404:	e7f3      	b.n	80033ee <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8003406:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003408:	2000      	movs	r0, #0
 800340a:	e7e3      	b.n	80033d4 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 800340c:	f7ff f8b4 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 8003410:	e04e      	b.n	80034b0 <UART_SetConfig+0x2a0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003412:	f7ff f89f 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003416:	6862      	ldr	r2, [r4, #4]
 8003418:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800341c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003420:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003422:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003424:	f1a3 0010 	sub.w	r0, r3, #16
 8003428:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800342c:	4288      	cmp	r0, r1
 800342e:	d8b0      	bhi.n	8003392 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8003430:	6821      	ldr	r1, [r4, #0]
 8003432:	60cb      	str	r3, [r1, #12]
 8003434:	e7ae      	b.n	8003394 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003436:	f7ff f89f 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 800343a:	e7ec      	b.n	8003416 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800343c:	6860      	ldr	r0, [r4, #4]
 800343e:	0843      	lsrs	r3, r0, #1
 8003440:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003444:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003448:	fbb3 f3f0 	udiv	r3, r3, r0
 800344c:	e7e8      	b.n	8003420 <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetSysClockFreq();
 800344e:	f7fe fd17 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8003452:	e7e0      	b.n	8003416 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003454:	6860      	ldr	r0, [r4, #4]
 8003456:	0843      	lsrs	r3, r0, #1
 8003458:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800345c:	e7f4      	b.n	8003448 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 800345e:	4b2d      	ldr	r3, [pc, #180]	; (8003514 <UART_SetConfig+0x304>)
 8003460:	429a      	cmp	r2, r3
 8003462:	d08f      	beq.n	8003384 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003464:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003468:	d1e8      	bne.n	800343c <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800346a:	6860      	ldr	r0, [r4, #4]
 800346c:	0843      	lsrs	r3, r0, #1
 800346e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003472:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003476:	fbb3 f3f0 	udiv	r3, r3, r0
 800347a:	e01f      	b.n	80034bc <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 800347c:	4b25      	ldr	r3, [pc, #148]	; (8003514 <UART_SetConfig+0x304>)
 800347e:	429a      	cmp	r2, r3
 8003480:	d10b      	bne.n	800349a <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003482:	f7fe fcfd 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
        break;
 8003486:	2304      	movs	r3, #4
 8003488:	e746      	b.n	8003318 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <UART_SetConfig+0x304>)
 800348c:	429a      	cmp	r2, r3
 800348e:	f47f af25 	bne.w	80032dc <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003492:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8003496:	2308      	movs	r3, #8
 8003498:	e776      	b.n	8003388 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800349a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800349e:	d1d6      	bne.n	800344e <UART_SetConfig+0x23e>
        pclk = HAL_RCC_GetSysClockFreq();
 80034a0:	f7fe fcee 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 80034a4:	e004      	b.n	80034b0 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034a6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80034aa:	d1b2      	bne.n	8003412 <UART_SetConfig+0x202>
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ac:	f7ff f852 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034b0:	6861      	ldr	r1, [r4, #4]
 80034b2:	084a      	lsrs	r2, r1, #1
 80034b4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80034b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80034bc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80034be:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c0:	f1a3 0010 	sub.w	r0, r3, #16
 80034c4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80034c8:	4288      	cmp	r0, r1
 80034ca:	f63f af62 	bhi.w	8003392 <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034ce:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80034d2:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034d4:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80034d8:	430b      	orrs	r3, r1
 80034da:	60c3      	str	r3, [r0, #12]
 80034dc:	e75a      	b.n	8003394 <UART_SetConfig+0x184>
    switch (clocksource)
 80034de:	2b08      	cmp	r3, #8
 80034e0:	f63f af57 	bhi.w	8003392 <UART_SetConfig+0x182>
 80034e4:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0x2dc>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	08003413 	.word	0x08003413
 80034f0:	08003437 	.word	0x08003437
 80034f4:	0800343d 	.word	0x0800343d
 80034f8:	08003393 	.word	0x08003393
 80034fc:	0800344f 	.word	0x0800344f
 8003500:	08003393 	.word	0x08003393
 8003504:	08003393 	.word	0x08003393
 8003508:	08003393 	.word	0x08003393
 800350c:	08003455 	.word	0x08003455
 8003510:	efff69f3 	.word	0xefff69f3
 8003514:	40008000 	.word	0x40008000
 8003518:	40013800 	.word	0x40013800
 800351c:	08003838 	.word	0x08003838
 8003520:	40004400 	.word	0x40004400
 8003524:	0800383c 	.word	0x0800383c
 8003528:	40004800 	.word	0x40004800
 800352c:	40004c00 	.word	0x40004c00
 8003530:	40005000 	.word	0x40005000
 8003534:	00f42400 	.word	0x00f42400
 8003538:	000ffcff 	.word	0x000ffcff
 800353c:	f4240000 	.word	0xf4240000

08003540 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003540:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003542:	07da      	lsls	r2, r3, #31
{
 8003544:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003546:	d506      	bpl.n	8003556 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003548:	6801      	ldr	r1, [r0, #0]
 800354a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800354c:	684a      	ldr	r2, [r1, #4]
 800354e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003552:	4322      	orrs	r2, r4
 8003554:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003556:	079c      	lsls	r4, r3, #30
 8003558:	d506      	bpl.n	8003568 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800355a:	6801      	ldr	r1, [r0, #0]
 800355c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800355e:	684a      	ldr	r2, [r1, #4]
 8003560:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003564:	4322      	orrs	r2, r4
 8003566:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003568:	0759      	lsls	r1, r3, #29
 800356a:	d506      	bpl.n	800357a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800356c:	6801      	ldr	r1, [r0, #0]
 800356e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003570:	684a      	ldr	r2, [r1, #4]
 8003572:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003576:	4322      	orrs	r2, r4
 8003578:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800357a:	071a      	lsls	r2, r3, #28
 800357c:	d506      	bpl.n	800358c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800357e:	6801      	ldr	r1, [r0, #0]
 8003580:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003582:	684a      	ldr	r2, [r1, #4]
 8003584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003588:	4322      	orrs	r2, r4
 800358a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800358c:	06dc      	lsls	r4, r3, #27
 800358e:	d506      	bpl.n	800359e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003590:	6801      	ldr	r1, [r0, #0]
 8003592:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003594:	688a      	ldr	r2, [r1, #8]
 8003596:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800359a:	4322      	orrs	r2, r4
 800359c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800359e:	0699      	lsls	r1, r3, #26
 80035a0:	d506      	bpl.n	80035b0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035a2:	6801      	ldr	r1, [r0, #0]
 80035a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80035a6:	688a      	ldr	r2, [r1, #8]
 80035a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ac:	4322      	orrs	r2, r4
 80035ae:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035b0:	065a      	lsls	r2, r3, #25
 80035b2:	d50f      	bpl.n	80035d4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035b4:	6801      	ldr	r1, [r0, #0]
 80035b6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80035b8:	684a      	ldr	r2, [r1, #4]
 80035ba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80035be:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035c4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035c6:	d105      	bne.n	80035d4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035c8:	684a      	ldr	r2, [r1, #4]
 80035ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80035cc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80035d0:	4322      	orrs	r2, r4
 80035d2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035d4:	061b      	lsls	r3, r3, #24
 80035d6:	d506      	bpl.n	80035e6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035d8:	6802      	ldr	r2, [r0, #0]
 80035da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80035dc:	6853      	ldr	r3, [r2, #4]
 80035de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80035e2:	430b      	orrs	r3, r1
 80035e4:	6053      	str	r3, [r2, #4]
 80035e6:	bd10      	pop	{r4, pc}

080035e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ec:	9d06      	ldr	r5, [sp, #24]
 80035ee:	4604      	mov	r4, r0
 80035f0:	460f      	mov	r7, r1
 80035f2:	4616      	mov	r6, r2
 80035f4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f6:	6821      	ldr	r1, [r4, #0]
 80035f8:	69ca      	ldr	r2, [r1, #28]
 80035fa:	ea37 0302 	bics.w	r3, r7, r2
 80035fe:	bf0c      	ite	eq
 8003600:	2201      	moveq	r2, #1
 8003602:	2200      	movne	r2, #0
 8003604:	42b2      	cmp	r2, r6
 8003606:	d002      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003608:	2000      	movs	r0, #0
}
 800360a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800360e:	1c68      	adds	r0, r5, #1
 8003610:	d0f2      	beq.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003612:	f7fd facf 	bl	8000bb4 <HAL_GetTick>
 8003616:	eba0 0008 	sub.w	r0, r0, r8
 800361a:	4285      	cmp	r5, r0
 800361c:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800361e:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003620:	d300      	bcc.n	8003624 <UART_WaitOnFlagUntilTimeout+0x3c>
 8003622:	b97d      	cbnz	r5, 8003644 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003628:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362a:	6883      	ldr	r3, [r0, #8]
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003632:	2320      	movs	r3, #32
 8003634:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003636:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8003638:	2300      	movs	r3, #0
 800363a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 800363e:	2003      	movs	r0, #3
 8003640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003644:	075a      	lsls	r2, r3, #29
 8003646:	d5d6      	bpl.n	80035f6 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003648:	69c3      	ldr	r3, [r0, #28]
 800364a:	051b      	lsls	r3, r3, #20
 800364c:	d5d3      	bpl.n	80035f6 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800364e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003652:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003654:	6803      	ldr	r3, [r0, #0]
 8003656:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800365a:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	6883      	ldr	r3, [r0, #8]
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003664:	2320      	movs	r3, #32
 8003666:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003668:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800366a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800366c:	e7e4      	b.n	8003638 <UART_WaitOnFlagUntilTimeout+0x50>

0800366e <UART_CheckIdleState>:
{
 800366e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003670:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003672:	2600      	movs	r6, #0
 8003674:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003676:	f7fd fa9d 	bl	8000bb4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003680:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003682:	d415      	bmi.n	80036b0 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	075b      	lsls	r3, r3, #29
 800368a:	d50a      	bpl.n	80036a2 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800368c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	462b      	mov	r3, r5
 8003696:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800369a:	4620      	mov	r0, r4
 800369c:	f7ff ffa4 	bl	80035e8 <UART_WaitOnFlagUntilTimeout>
 80036a0:	b990      	cbnz	r0, 80036c8 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80036a2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80036a4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80036a6:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 80036a8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80036ac:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 80036ae:	e00c      	b.n	80036ca <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	4632      	mov	r2, r6
 80036b8:	4603      	mov	r3, r0
 80036ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036be:	4620      	mov	r0, r4
 80036c0:	f7ff ff92 	bl	80035e8 <UART_WaitOnFlagUntilTimeout>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d0dd      	beq.n	8003684 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80036c8:	2003      	movs	r0, #3
}
 80036ca:	b002      	add	sp, #8
 80036cc:	bd70      	pop	{r4, r5, r6, pc}

080036ce <HAL_UART_Init>:
{
 80036ce:	b510      	push	{r4, lr}
  if (huart == NULL)
 80036d0:	4604      	mov	r4, r0
 80036d2:	b340      	cbz	r0, 8003726 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80036d4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80036d6:	b91b      	cbnz	r3, 80036e0 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80036d8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80036dc:	f7fd f9f0 	bl	8000ac0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80036e0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80036e2:	2324      	movs	r3, #36	; 0x24
 80036e4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80036e6:	6813      	ldr	r3, [r2, #0]
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036ee:	4620      	mov	r0, r4
 80036f0:	f7ff fd8e 	bl	8003210 <UART_SetConfig>
 80036f4:	2801      	cmp	r0, #1
 80036f6:	d016      	beq.n	8003726 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036fa:	b113      	cbz	r3, 8003702 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7ff ff1f 	bl	8003540 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800370a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003712:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800371a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003722:	f7ff bfa4 	b.w	800366e <UART_CheckIdleState>
}
 8003726:	2001      	movs	r0, #1
 8003728:	bd10      	pop	{r4, pc}
	...

0800372c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800372c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003764 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003730:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003732:	e003      	b.n	800373c <LoopCopyDataInit>

08003734 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003736:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003738:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800373a:	3104      	adds	r1, #4

0800373c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800373c:	480b      	ldr	r0, [pc, #44]	; (800376c <LoopForever+0xa>)
	ldr	r3, =_edata
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003740:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003742:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003744:	d3f6      	bcc.n	8003734 <CopyDataInit>
	ldr	r2, =_sbss
 8003746:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003748:	e002      	b.n	8003750 <LoopFillZerobss>

0800374a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800374a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800374c:	f842 3b04 	str.w	r3, [r2], #4

08003750 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <LoopForever+0x16>)
	cmp	r2, r3
 8003752:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003754:	d3f9      	bcc.n	800374a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003756:	f7fd f911 	bl	800097c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800375a:	f000 f811 	bl	8003780 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800375e:	f7fd f885 	bl	800086c <main>

08003762 <LoopForever>:

LoopForever:
    b LoopForever
 8003762:	e7fe      	b.n	8003762 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003764:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003768:	0800385c 	.word	0x0800385c
	ldr	r0, =_sdata
 800376c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003770:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003774:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003778:	2000023c 	.word	0x2000023c

0800377c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800377c:	e7fe      	b.n	800377c <ADC1_2_IRQHandler>
	...

08003780 <__libc_init_array>:
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	4e0d      	ldr	r6, [pc, #52]	; (80037b8 <__libc_init_array+0x38>)
 8003784:	4c0d      	ldr	r4, [pc, #52]	; (80037bc <__libc_init_array+0x3c>)
 8003786:	1ba4      	subs	r4, r4, r6
 8003788:	10a4      	asrs	r4, r4, #2
 800378a:	2500      	movs	r5, #0
 800378c:	42a5      	cmp	r5, r4
 800378e:	d109      	bne.n	80037a4 <__libc_init_array+0x24>
 8003790:	4e0b      	ldr	r6, [pc, #44]	; (80037c0 <__libc_init_array+0x40>)
 8003792:	4c0c      	ldr	r4, [pc, #48]	; (80037c4 <__libc_init_array+0x44>)
 8003794:	f000 f820 	bl	80037d8 <_init>
 8003798:	1ba4      	subs	r4, r4, r6
 800379a:	10a4      	asrs	r4, r4, #2
 800379c:	2500      	movs	r5, #0
 800379e:	42a5      	cmp	r5, r4
 80037a0:	d105      	bne.n	80037ae <__libc_init_array+0x2e>
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037a8:	4798      	blx	r3
 80037aa:	3501      	adds	r5, #1
 80037ac:	e7ee      	b.n	800378c <__libc_init_array+0xc>
 80037ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037b2:	4798      	blx	r3
 80037b4:	3501      	adds	r5, #1
 80037b6:	e7f2      	b.n	800379e <__libc_init_array+0x1e>
 80037b8:	08003854 	.word	0x08003854
 80037bc:	08003854 	.word	0x08003854
 80037c0:	08003854 	.word	0x08003854
 80037c4:	08003858 	.word	0x08003858

080037c8 <memset>:
 80037c8:	4402      	add	r2, r0
 80037ca:	4603      	mov	r3, r0
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d100      	bne.n	80037d2 <memset+0xa>
 80037d0:	4770      	bx	lr
 80037d2:	f803 1b01 	strb.w	r1, [r3], #1
 80037d6:	e7f9      	b.n	80037cc <memset+0x4>

080037d8 <_init>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	bf00      	nop
 80037dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037de:	bc08      	pop	{r3}
 80037e0:	469e      	mov	lr, r3
 80037e2:	4770      	bx	lr

080037e4 <_fini>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	bf00      	nop
 80037e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ea:	bc08      	pop	{r3}
 80037ec:	469e      	mov	lr, r3
 80037ee:	4770      	bx	lr
