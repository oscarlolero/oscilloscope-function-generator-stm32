
GeneradorFunciones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b2c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08004cb4  08004cb4  00014cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080050ec  080050ec  000150ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080050f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002e8  2000000c  080050fc  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002f4  080050fc  000202f4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a1ee  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000365a  00000000  00000000  0003a22a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c1ad  00000000  00000000  0003d884  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f78  00000000  00000000  00049a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001560  00000000  00000000  0004a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000908e  00000000  00000000  0004bf10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000661f  00000000  00000000  00054f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005b5bd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002f7c  00000000  00000000  0005b63c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c9c 	.word	0x08004c9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004c9c 	.word	0x08004c9c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b97a 	b.w	8000d08 <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	468c      	mov	ip, r1
 8000a32:	460d      	mov	r5, r1
 8000a34:	4604      	mov	r4, r0
 8000a36:	9e08      	ldr	r6, [sp, #32]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d151      	bne.n	8000ae0 <__udivmoddi4+0xb4>
 8000a3c:	428a      	cmp	r2, r1
 8000a3e:	4617      	mov	r7, r2
 8000a40:	d96d      	bls.n	8000b1e <__udivmoddi4+0xf2>
 8000a42:	fab2 fe82 	clz	lr, r2
 8000a46:	f1be 0f00 	cmp.w	lr, #0
 8000a4a:	d00b      	beq.n	8000a64 <__udivmoddi4+0x38>
 8000a4c:	f1ce 0c20 	rsb	ip, lr, #32
 8000a50:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a54:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a58:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a5c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a60:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a64:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a68:	0c25      	lsrs	r5, r4, #16
 8000a6a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a6e:	fa1f f987 	uxth.w	r9, r7
 8000a72:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a76:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a7a:	fb08 f309 	mul.w	r3, r8, r9
 8000a7e:	42ab      	cmp	r3, r5
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x6c>
 8000a82:	19ed      	adds	r5, r5, r7
 8000a84:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a88:	f080 8123 	bcs.w	8000cd2 <__udivmoddi4+0x2a6>
 8000a8c:	42ab      	cmp	r3, r5
 8000a8e:	f240 8120 	bls.w	8000cd2 <__udivmoddi4+0x2a6>
 8000a92:	f1a8 0802 	sub.w	r8, r8, #2
 8000a96:	443d      	add	r5, r7
 8000a98:	1aed      	subs	r5, r5, r3
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000aa0:	fb0a 5510 	mls	r5, sl, r0, r5
 8000aa4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000aa8:	fb00 f909 	mul.w	r9, r0, r9
 8000aac:	45a1      	cmp	r9, r4
 8000aae:	d909      	bls.n	8000ac4 <__udivmoddi4+0x98>
 8000ab0:	19e4      	adds	r4, r4, r7
 8000ab2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab6:	f080 810a 	bcs.w	8000cce <__udivmoddi4+0x2a2>
 8000aba:	45a1      	cmp	r9, r4
 8000abc:	f240 8107 	bls.w	8000cce <__udivmoddi4+0x2a2>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	443c      	add	r4, r7
 8000ac4:	eba4 0409 	sub.w	r4, r4, r9
 8000ac8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000acc:	2100      	movs	r1, #0
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	d061      	beq.n	8000b96 <__udivmoddi4+0x16a>
 8000ad2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	6034      	str	r4, [r6, #0]
 8000ada:	6073      	str	r3, [r6, #4]
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	d907      	bls.n	8000af4 <__udivmoddi4+0xc8>
 8000ae4:	2e00      	cmp	r6, #0
 8000ae6:	d054      	beq.n	8000b92 <__udivmoddi4+0x166>
 8000ae8:	2100      	movs	r1, #0
 8000aea:	e886 0021 	stmia.w	r6, {r0, r5}
 8000aee:	4608      	mov	r0, r1
 8000af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af4:	fab3 f183 	clz	r1, r3
 8000af8:	2900      	cmp	r1, #0
 8000afa:	f040 808e 	bne.w	8000c1a <__udivmoddi4+0x1ee>
 8000afe:	42ab      	cmp	r3, r5
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xdc>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80fa 	bhi.w	8000cfc <__udivmoddi4+0x2d0>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb65 0503 	sbc.w	r5, r5, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	46ac      	mov	ip, r5
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d03f      	beq.n	8000b96 <__udivmoddi4+0x16a>
 8000b16:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	b912      	cbnz	r2, 8000b26 <__udivmoddi4+0xfa>
 8000b20:	2701      	movs	r7, #1
 8000b22:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b26:	fab7 fe87 	clz	lr, r7
 8000b2a:	f1be 0f00 	cmp.w	lr, #0
 8000b2e:	d134      	bne.n	8000b9a <__udivmoddi4+0x16e>
 8000b30:	1beb      	subs	r3, r5, r7
 8000b32:	0c3a      	lsrs	r2, r7, #16
 8000b34:	fa1f fc87 	uxth.w	ip, r7
 8000b38:	2101      	movs	r1, #1
 8000b3a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b3e:	0c25      	lsrs	r5, r4, #16
 8000b40:	fb02 3318 	mls	r3, r2, r8, r3
 8000b44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b48:	fb0c f308 	mul.w	r3, ip, r8
 8000b4c:	42ab      	cmp	r3, r5
 8000b4e:	d907      	bls.n	8000b60 <__udivmoddi4+0x134>
 8000b50:	19ed      	adds	r5, r5, r7
 8000b52:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x132>
 8000b58:	42ab      	cmp	r3, r5
 8000b5a:	f200 80d1 	bhi.w	8000d00 <__udivmoddi4+0x2d4>
 8000b5e:	4680      	mov	r8, r0
 8000b60:	1aed      	subs	r5, r5, r3
 8000b62:	b2a3      	uxth	r3, r4
 8000b64:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b68:	fb02 5510 	mls	r5, r2, r0, r5
 8000b6c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b70:	fb0c fc00 	mul.w	ip, ip, r0
 8000b74:	45a4      	cmp	ip, r4
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x15c>
 8000b78:	19e4      	adds	r4, r4, r7
 8000b7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x15a>
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	f200 80b8 	bhi.w	8000cf6 <__udivmoddi4+0x2ca>
 8000b86:	4618      	mov	r0, r3
 8000b88:	eba4 040c 	sub.w	r4, r4, ip
 8000b8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b90:	e79d      	b.n	8000ace <__udivmoddi4+0xa2>
 8000b92:	4631      	mov	r1, r6
 8000b94:	4630      	mov	r0, r6
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	f1ce 0420 	rsb	r4, lr, #32
 8000b9e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000ba2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ba6:	fa20 f804 	lsr.w	r8, r0, r4
 8000baa:	0c3a      	lsrs	r2, r7, #16
 8000bac:	fa25 f404 	lsr.w	r4, r5, r4
 8000bb0:	ea48 0803 	orr.w	r8, r8, r3
 8000bb4:	fbb4 f1f2 	udiv	r1, r4, r2
 8000bb8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bbc:	fb02 4411 	mls	r4, r2, r1, r4
 8000bc0:	fa1f fc87 	uxth.w	ip, r7
 8000bc4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000bc8:	fb01 f30c 	mul.w	r3, r1, ip
 8000bcc:	42ab      	cmp	r3, r5
 8000bce:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x1bc>
 8000bd4:	19ed      	adds	r5, r5, r7
 8000bd6:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bda:	f080 808a 	bcs.w	8000cf2 <__udivmoddi4+0x2c6>
 8000bde:	42ab      	cmp	r3, r5
 8000be0:	f240 8087 	bls.w	8000cf2 <__udivmoddi4+0x2c6>
 8000be4:	3902      	subs	r1, #2
 8000be6:	443d      	add	r5, r7
 8000be8:	1aeb      	subs	r3, r5, r3
 8000bea:	fa1f f588 	uxth.w	r5, r8
 8000bee:	fbb3 f0f2 	udiv	r0, r3, r2
 8000bf2:	fb02 3310 	mls	r3, r2, r0, r3
 8000bf6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bfa:	fb00 f30c 	mul.w	r3, r0, ip
 8000bfe:	42ab      	cmp	r3, r5
 8000c00:	d907      	bls.n	8000c12 <__udivmoddi4+0x1e6>
 8000c02:	19ed      	adds	r5, r5, r7
 8000c04:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c08:	d26f      	bcs.n	8000cea <__udivmoddi4+0x2be>
 8000c0a:	42ab      	cmp	r3, r5
 8000c0c:	d96d      	bls.n	8000cea <__udivmoddi4+0x2be>
 8000c0e:	3802      	subs	r0, #2
 8000c10:	443d      	add	r5, r7
 8000c12:	1aeb      	subs	r3, r5, r3
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	e78f      	b.n	8000b3a <__udivmoddi4+0x10e>
 8000c1a:	f1c1 0720 	rsb	r7, r1, #32
 8000c1e:	fa22 f807 	lsr.w	r8, r2, r7
 8000c22:	408b      	lsls	r3, r1
 8000c24:	fa05 f401 	lsl.w	r4, r5, r1
 8000c28:	ea48 0303 	orr.w	r3, r8, r3
 8000c2c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c30:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c3a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c3e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c42:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c46:	fa1f f883 	uxth.w	r8, r3
 8000c4a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c4e:	fb09 f408 	mul.w	r4, r9, r8
 8000c52:	42ac      	cmp	r4, r5
 8000c54:	fa02 f201 	lsl.w	r2, r2, r1
 8000c58:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x244>
 8000c5e:	18ed      	adds	r5, r5, r3
 8000c60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c64:	d243      	bcs.n	8000cee <__udivmoddi4+0x2c2>
 8000c66:	42ac      	cmp	r4, r5
 8000c68:	d941      	bls.n	8000cee <__udivmoddi4+0x2c2>
 8000c6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6e:	441d      	add	r5, r3
 8000c70:	1b2d      	subs	r5, r5, r4
 8000c72:	fa1f fe8e 	uxth.w	lr, lr
 8000c76:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c7a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c7e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c82:	fb00 f808 	mul.w	r8, r0, r8
 8000c86:	45a0      	cmp	r8, r4
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x26e>
 8000c8a:	18e4      	adds	r4, r4, r3
 8000c8c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c90:	d229      	bcs.n	8000ce6 <__udivmoddi4+0x2ba>
 8000c92:	45a0      	cmp	r8, r4
 8000c94:	d927      	bls.n	8000ce6 <__udivmoddi4+0x2ba>
 8000c96:	3802      	subs	r0, #2
 8000c98:	441c      	add	r4, r3
 8000c9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9e:	eba4 0408 	sub.w	r4, r4, r8
 8000ca2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ca6:	454c      	cmp	r4, r9
 8000ca8:	46c6      	mov	lr, r8
 8000caa:	464d      	mov	r5, r9
 8000cac:	d315      	bcc.n	8000cda <__udivmoddi4+0x2ae>
 8000cae:	d012      	beq.n	8000cd6 <__udivmoddi4+0x2aa>
 8000cb0:	b156      	cbz	r6, 8000cc8 <__udivmoddi4+0x29c>
 8000cb2:	ebba 030e 	subs.w	r3, sl, lr
 8000cb6:	eb64 0405 	sbc.w	r4, r4, r5
 8000cba:	fa04 f707 	lsl.w	r7, r4, r7
 8000cbe:	40cb      	lsrs	r3, r1
 8000cc0:	431f      	orrs	r7, r3
 8000cc2:	40cc      	lsrs	r4, r1
 8000cc4:	6037      	str	r7, [r6, #0]
 8000cc6:	6074      	str	r4, [r6, #4]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	e6f8      	b.n	8000ac4 <__udivmoddi4+0x98>
 8000cd2:	4690      	mov	r8, r2
 8000cd4:	e6e0      	b.n	8000a98 <__udivmoddi4+0x6c>
 8000cd6:	45c2      	cmp	sl, r8
 8000cd8:	d2ea      	bcs.n	8000cb0 <__udivmoddi4+0x284>
 8000cda:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cde:	eb69 0503 	sbc.w	r5, r9, r3
 8000ce2:	3801      	subs	r0, #1
 8000ce4:	e7e4      	b.n	8000cb0 <__udivmoddi4+0x284>
 8000ce6:	4628      	mov	r0, r5
 8000ce8:	e7d7      	b.n	8000c9a <__udivmoddi4+0x26e>
 8000cea:	4640      	mov	r0, r8
 8000cec:	e791      	b.n	8000c12 <__udivmoddi4+0x1e6>
 8000cee:	4681      	mov	r9, r0
 8000cf0:	e7be      	b.n	8000c70 <__udivmoddi4+0x244>
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	e778      	b.n	8000be8 <__udivmoddi4+0x1bc>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	e745      	b.n	8000b88 <__udivmoddi4+0x15c>
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	e708      	b.n	8000b12 <__udivmoddi4+0xe6>
 8000d00:	f1a8 0802 	sub.w	r8, r8, #2
 8000d04:	443d      	add	r5, r7
 8000d06:	e72b      	b.n	8000b60 <__udivmoddi4+0x134>

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d0c:	b510      	push	{r4, lr}
  ADC_MultiModeTypeDef multimode = {0};
 8000d0e:	2400      	movs	r4, #0
{
 8000d10:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d12:	2218      	movs	r2, #24
 8000d14:	4621      	mov	r1, r4
 8000d16:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8000d18:	9401      	str	r4, [sp, #4]
 8000d1a:	9402      	str	r4, [sp, #8]
 8000d1c:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1e:	f003 fa8d 	bl	800423c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000d22:	481c      	ldr	r0, [pc, #112]	; (8000d94 <MX_ADC1_Init+0x88>)
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_ADC1_Init+0x8c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d26:	6084      	str	r4, [r0, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d28:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d30:	2301      	movs	r3, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d32:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d34:	6104      	str	r4, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d36:	7604      	strb	r4, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d38:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d3a:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d3c:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000d40:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d42:	6284      	str	r4, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d44:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d46:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d4a:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d4c:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d50:	f000 fd1c 	bl	800178c <HAL_ADC_Init>
 8000d54:	b108      	cbz	r0, 8000d5a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000d56:	f000 fb93 	bl	8001480 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d5a:	a901      	add	r1, sp, #4
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_ADC1_Init+0x88>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d5e:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d60:	f001 f950 	bl	8002004 <HAL_ADCEx_MultiModeConfigChannel>
 8000d64:	b108      	cbz	r0, 8000d6a <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 8000d66:	f000 fb8b 	bl	8001480 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_ADC1_Init+0x90>)
 8000d6c:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d6e:	2306      	movs	r3, #6
 8000d70:	9305      	str	r3, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000d72:	2307      	movs	r3, #7
 8000d74:	9306      	str	r3, [sp, #24]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d76:	237f      	movs	r3, #127	; 0x7f
 8000d78:	9307      	str	r3, [sp, #28]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	9308      	str	r3, [sp, #32]
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7e:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 8000d80:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_ADC1_Init+0x88>)
  sConfig.Offset = 0;
 8000d84:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d86:	f000 fe2b 	bl	80019e0 <HAL_ADC_ConfigChannel>
 8000d8a:	b108      	cbz	r0, 8000d90 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 8000d8c:	f000 fb78 	bl	8001480 <Error_Handler>
  }

}
 8000d90:	b00a      	add	sp, #40	; 0x28
 8000d92:	bd10      	pop	{r4, pc}
 8000d94:	20000090 	.word	0x20000090
 8000d98:	50040000 	.word	0x50040000
 8000d9c:	19200040 	.word	0x19200040

08000da0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000da0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8000da2:	2218      	movs	r2, #24
 8000da4:	2100      	movs	r1, #0
 8000da6:	4668      	mov	r0, sp
 8000da8:	f003 fa48 	bl	800423c <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000dac:	4818      	ldr	r0, [pc, #96]	; (8000e10 <MX_ADC2_Init+0x70>)
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <MX_ADC2_Init+0x74>)
 8000db0:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000db2:	2208      	movs	r2, #8
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000db4:	2300      	movs	r3, #0
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000db6:	6142      	str	r2, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000db8:	2201      	movs	r2, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dba:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dbc:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dbe:	60c3      	str	r3, [r0, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc0:	6103      	str	r3, [r0, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dc2:	7603      	strb	r3, [r0, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000dc4:	7642      	strb	r2, [r0, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000dc6:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dc8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8000dcc:	6242      	str	r2, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dce:	6283      	str	r3, [r0, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000dd2:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd6:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000dd8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ddc:	f000 fcd6 	bl	800178c <HAL_ADC_Init>
 8000de0:	b108      	cbz	r0, 8000de6 <MX_ADC2_Init+0x46>
  {
    Error_Handler();
 8000de2:	f000 fb4d 	bl	8001480 <Error_Handler>
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de6:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_ADC2_Init+0x78>)
 8000de8:	2106      	movs	r1, #6
 8000dea:	237f      	movs	r3, #127	; 0x7f
 8000dec:	2207      	movs	r2, #7
 8000dee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df2:	2304      	movs	r3, #4
 8000df4:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000df6:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 8000df8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_ADC2_Init+0x70>)
  sConfig.Offset = 0;
 8000dfc:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dfe:	f000 fdef 	bl	80019e0 <HAL_ADC_ConfigChannel>
 8000e02:	b108      	cbz	r0, 8000e08 <MX_ADC2_Init+0x68>
  {
    Error_Handler();
 8000e04:	f000 fb3c 	bl	8001480 <Error_Handler>
  }

}
 8000e08:	b007      	add	sp, #28
 8000e0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e0e:	bf00      	nop
 8000e10:	2000002c 	.word	0x2000002c
 8000e14:	50040100 	.word	0x50040100
 8000e18:	14f00020 	.word	0x14f00020

08000e1c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e1c:	b570      	push	{r4, r5, r6, lr}
 8000e1e:	4605      	mov	r5, r0
 8000e20:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	2214      	movs	r2, #20
 8000e24:	2100      	movs	r1, #0
 8000e26:	a807      	add	r0, sp, #28
 8000e28:	f003 fa08 	bl	800423c <memset>
  if(adcHandle->Instance==ADC1)
 8000e2c:	682b      	ldr	r3, [r5, #0]
 8000e2e:	4a46      	ldr	r2, [pc, #280]	; (8000f48 <HAL_ADC_MspInit+0x12c>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d14e      	bne.n	8000ed2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000e34:	4a45      	ldr	r2, [pc, #276]	; (8000f4c <HAL_ADC_MspInit+0x130>)
 8000e36:	6813      	ldr	r3, [r2, #0]
 8000e38:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000e3a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <HAL_ADC_MspInit+0x134>)
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000e40:	d108      	bne.n	8000e54 <HAL_ADC_MspInit+0x38>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e4c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000e50:	9201      	str	r2, [sp, #4]
 8000e52:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    PA1     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e56:	483f      	ldr	r0, [pc, #252]	; (8000f54 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e58:	f042 0204 	orr.w	r2, r2, #4
 8000e5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e60:	f002 0204 	and.w	r2, r2, #4
 8000e64:	9202      	str	r2, [sp, #8]
 8000e66:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e6a:	f042 0201 	orr.w	r2, r2, #1
 8000e6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e78:	240b      	movs	r4, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e7c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e7e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e80:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e82:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e86:	f001 fbcd 	bl	8002624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e8a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	a907      	add	r1, sp, #28
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e92:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e94:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	9609      	str	r6, [sp, #36]	; 0x24

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e98:	4c2f      	ldr	r4, [pc, #188]	; (8000f58 <HAL_ADC_MspInit+0x13c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f001 fbc3 	bl	8002624 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <HAL_ADC_MspInit+0x140>)

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
    hdma_adc2.Init.Request = DMA_REQUEST_0;
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea0:	60a6      	str	r6, [r4, #8]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8000ea2:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	6123      	str	r3, [r4, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eae:	6163      	str	r3, [r4, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eb4:	61a3      	str	r3, [r4, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000eb6:	2320      	movs	r3, #32
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb8:	60e6      	str	r6, [r4, #12]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000eba:	61e3      	str	r3, [r4, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000ebc:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f001 fac4 	bl	800244c <HAL_DMA_Init>
 8000ec4:	b108      	cbz	r0, 8000eca <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8000ec6:	f000 fadb 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000eca:	64ec      	str	r4, [r5, #76]	; 0x4c
 8000ecc:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000ece:	b00c      	add	sp, #48	; 0x30
 8000ed0:	bd70      	pop	{r4, r5, r6, pc}
  else if(adcHandle->Instance==ADC2)
 8000ed2:	4a23      	ldr	r2, [pc, #140]	; (8000f60 <HAL_ADC_MspInit+0x144>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d1fa      	bne.n	8000ece <HAL_ADC_MspInit+0xb2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000ed8:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <HAL_ADC_MspInit+0x130>)
 8000eda:	6813      	ldr	r3, [r2, #0]
 8000edc:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000ede:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_ADC_MspInit+0x134>)
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000ee4:	d108      	bne.n	8000ef8 <HAL_ADC_MspInit+0xdc>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000eec:	64da      	str	r2, [r3, #76]	; 0x4c
 8000eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ef0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000ef4:	9204      	str	r2, [sp, #16]
 8000ef6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efa:	4816      	ldr	r0, [pc, #88]	; (8000f54 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efc:	f042 0204 	orr.w	r2, r2, #4
 8000f00:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f04:	f002 0204 	and.w	r2, r2, #4
 8000f08:	9205      	str	r2, [sp, #20]
 8000f0a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f1c:	240b      	movs	r4, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f20:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f22:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f24:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f26:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2a:	f001 fb7b 	bl	8002624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f2e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	a907      	add	r1, sp, #28
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f36:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f38:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	9609      	str	r6, [sp, #36]	; 0x24
    hdma_adc2.Instance = DMA1_Channel2;
 8000f3c:	4c09      	ldr	r4, [pc, #36]	; (8000f64 <HAL_ADC_MspInit+0x148>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f001 fb71 	bl	8002624 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_ADC_MspInit+0x14c>)
 8000f44:	e7ac      	b.n	8000ea0 <HAL_ADC_MspInit+0x84>
 8000f46:	bf00      	nop
 8000f48:	50040000 	.word	0x50040000
 8000f4c:	20000028 	.word	0x20000028
 8000f50:	40021000 	.word	0x40021000
 8000f54:	48000800 	.word	0x48000800
 8000f58:	200000f4 	.word	0x200000f4
 8000f5c:	40020008 	.word	0x40020008
 8000f60:	50040100 	.word	0x50040100
 8000f64:	2000013c 	.word	0x2000013c
 8000f68:	4002001c 	.word	0x4002001c

08000f6c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000f6c:	b500      	push	{lr}
 8000f6e:	b08b      	sub	sp, #44	; 0x2c
  DAC_ChannelConfTypeDef sConfig = {0};
 8000f70:	2224      	movs	r2, #36	; 0x24
 8000f72:	2100      	movs	r1, #0
 8000f74:	a801      	add	r0, sp, #4
 8000f76:	f003 f961 	bl	800423c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_DAC1_Init+0x40>)
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_DAC1_Init+0x44>)
 8000f7e:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f80:	f001 f922 	bl	80021c8 <HAL_DAC_Init>
 8000f84:	b108      	cbz	r0, 8000f8a <MX_DAC1_Init+0x1e>
  {
    Error_Handler();
 8000f86:	f000 fa7b 	bl	8001480 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f8a:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f8c:	2324      	movs	r3, #36	; 0x24
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f8e:	a901      	add	r1, sp, #4
 8000f90:	4806      	ldr	r0, [pc, #24]	; (8000fac <MX_DAC1_Init+0x40>)
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f92:	9201      	str	r2, [sp, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f94:	9302      	str	r3, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f96:	9203      	str	r2, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000f98:	9204      	str	r2, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f9a:	9205      	str	r2, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f9c:	f001 f9b0 	bl	8002300 <HAL_DAC_ConfigChannel>
 8000fa0:	b108      	cbz	r0, 8000fa6 <MX_DAC1_Init+0x3a>
  {
    Error_Handler();
 8000fa2:	f000 fa6d 	bl	8001480 <Error_Handler>
  }

}
 8000fa6:	b00b      	add	sp, #44	; 0x2c
 8000fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fac:	20000184 	.word	0x20000184
 8000fb0:	40007400 	.word	0x40007400

08000fb4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	4605      	mov	r5, r0
 8000fb8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	2214      	movs	r2, #20
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	a803      	add	r0, sp, #12
 8000fc0:	f003 f93c 	bl	800423c <memset>
  if(dacHandle->Instance==DAC1)
 8000fc4:	682a      	ldr	r2, [r5, #0]
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <HAL_DAC_MspInit+0x8c>)
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d137      	bne.n	800103c <HAL_DAC_MspInit+0x88>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000fcc:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fd0:	2610      	movs	r6, #16
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000fd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000fd4:	4c1b      	ldr	r4, [pc, #108]	; (8001044 <HAL_DAC_MspInit+0x90>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000fd6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000fda:	659a      	str	r2, [r3, #88]	; 0x58
 8000fdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fde:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000fe2:	9201      	str	r2, [sp, #4]
 8000fe4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fe8:	f042 0201 	orr.w	r2, r2, #1
 8000fec:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ff0:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffe:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001002:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f001 fb0e 	bl	8002624 <HAL_GPIO_Init>
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001008:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <HAL_DAC_MspInit+0x94>)
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800100a:	60a6      	str	r6, [r4, #8]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800100c:	2306      	movs	r3, #6
 800100e:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	6122      	str	r2, [r4, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101a:	6162      	str	r2, [r4, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800101c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001020:	2300      	movs	r3, #0
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001022:	61a2      	str	r2, [r4, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001024:	4620      	mov	r0, r4
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001026:	2220      	movs	r2, #32
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001028:	60e3      	str	r3, [r4, #12]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800102a:	61e2      	str	r2, [r4, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800102c:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800102e:	f001 fa0d 	bl	800244c <HAL_DMA_Init>
 8001032:	b108      	cbz	r0, 8001038 <HAL_DAC_MspInit+0x84>
    {
      Error_Handler();
 8001034:	f000 fa24 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8001038:	60ac      	str	r4, [r5, #8]
 800103a:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800103c:	b008      	add	sp, #32
 800103e:	bd70      	pop	{r4, r5, r6, pc}
 8001040:	40007400 	.word	0x40007400
 8001044:	20000198 	.word	0x20000198
 8001048:	40020030 	.word	0x40020030

0800104c <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_DMA_Init+0x4c>)
{
 800104e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001050:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001052:	f042 0201 	orr.w	r2, r2, #1
 8001056:	649a      	str	r2, [r3, #72]	; 0x48
 8001058:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105c:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001060:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001064:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001066:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001068:	f001 f856 	bl	8002118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800106c:	200b      	movs	r0, #11
 800106e:	f001 f887 	bl	8002180 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	4611      	mov	r1, r2
 8001076:	200c      	movs	r0, #12
 8001078:	f001 f84e 	bl	8002118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800107c:	200c      	movs	r0, #12
 800107e:	f001 f87f 	bl	8002180 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	4611      	mov	r1, r2
 8001086:	200d      	movs	r0, #13
 8001088:	f001 f846 	bl	8002118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800108c:	200d      	movs	r0, #13
 800108e:	f001 f877 	bl	8002180 <HAL_NVIC_EnableIRQ>

}
 8001092:	b003      	add	sp, #12
 8001094:	f85d fb04 	ldr.w	pc, [sp], #4
 8001098:	40021000 	.word	0x40021000

0800109c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800109c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	2214      	movs	r2, #20
{
 80010a0:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	eb0d 0002 	add.w	r0, sp, r2
 80010a6:	2100      	movs	r1, #0
 80010a8:	f003 f8c8 	bl	800423c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <MX_GPIO_Init+0x98>)
 80010ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010b0:	f042 0204 	orr.w	r2, r2, #4
 80010b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80010b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010b8:	f002 0204 	and.w	r2, r2, #4
 80010bc:	9201      	str	r2, [sp, #4]
 80010be:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80010c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010ca:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80010ce:	9202      	str	r2, [sp, #8]
 80010d0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80010da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010dc:	f002 0201 	and.w	r2, r2, #1
 80010e0:	9203      	str	r2, [sp, #12]
 80010e2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010e6:	f042 0202 	orr.w	r2, r2, #2
 80010ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010f6:	2120      	movs	r1, #32
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fc:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010fe:	f001 fb73 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8001108:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800110a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <MX_GPIO_Init+0x9c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800110e:	480b      	ldr	r0, [pc, #44]	; (800113c <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001110:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001114:	f001 fa86 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001118:	2320      	movs	r3, #32
 800111a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800111c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800112a:	f001 fa7b 	bl	8002624 <HAL_GPIO_Init>

}
 800112e:	b00a      	add	sp, #40	; 0x28
 8001130:	bd10      	pop	{r4, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	10210000 	.word	0x10210000
 800113c:	48000800 	.word	0x48000800

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001144:	2244      	movs	r2, #68	; 0x44
 8001146:	2100      	movs	r1, #0
 8001148:	a805      	add	r0, sp, #20
 800114a:	f003 f877 	bl	800423c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114e:	2214      	movs	r2, #20
 8001150:	2100      	movs	r1, #0
 8001152:	4668      	mov	r0, sp
 8001154:	f003 f872 	bl	800423c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001158:	2288      	movs	r2, #136	; 0x88
 800115a:	2100      	movs	r1, #0
 800115c:	a816      	add	r0, sp, #88	; 0x58
 800115e:	f003 f86d 	bl	800423c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001166:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001168:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 800116e:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001170:	230a      	movs	r3, #10
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001172:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001174:	a805      	add	r0, sp, #20
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001176:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001178:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800117a:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117c:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117e:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001180:	9711      	str	r7, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001182:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001184:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001186:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f001 fc02 	bl	8002990 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118c:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800118e:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001192:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	e88d 002c 	stmia.w	sp, {r2, r3, r5}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001198:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800119c:	f001 fe7e 	bl	8002e9c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80011a0:	f244 0302 	movw	r3, #16386	; 0x4002
 80011a4:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011aa:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80011ac:	2308      	movs	r3, #8
 80011ae:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b0:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011b6:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011b8:	9525      	str	r5, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80011ba:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011bc:	9718      	str	r7, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011be:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011c0:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011c2:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c4:	f002 f830 	bl	8003228 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011cc:	f001 fb1a 	bl	8002804 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 80011d0:	b039      	add	sp, #228	; 0xe4
 80011d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011d4 <Rampa>:

/* USER CODE BEGIN 4 */

//funcion rampa
void Rampa(){
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <Rampa+0x48>)
 80011d6:	b513      	push	{r0, r1, r4, lr}
	for(int i=0; i<N; i++) {
 80011d8:	2400      	movs	r4, #0
	    	if(i == 0) {
	    		DAC_Buffer[i] = 2048;
 80011da:	1d19      	adds	r1, r3, #4
 80011dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
	    	if(i == 0) {
 80011e0:	b9c4      	cbnz	r4, 8001214 <Rampa+0x40>
	    		DAC_Buffer[i] = 2048;
 80011e2:	6008      	str	r0, [r1, #0]
	for(int i=0; i<N; i++) {
 80011e4:	3401      	adds	r4, #1
 80011e6:	2c10      	cmp	r4, #16
 80011e8:	f103 0304 	add.w	r3, r3, #4
 80011ec:	d1f8      	bne.n	80011e0 <Rampa+0xc>
	    	} else {
	    		DAC_Buffer[i] = DAC_Buffer[i - 1] + 2048/N;
	    	}
	    }
	    HAL_TIM_Base_Start(&htim2);
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <Rampa+0x4c>)
 80011f0:	f002 fb2e 	bl	8003850 <HAL_TIM_Base_Start>
	    TimerData=(uint32_t)(80000000/(N*F));
 80011f4:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <Rampa+0x50>)
	    TIM2->ARR=TimerData;
	    HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <Rampa+0x54>)
	    TimerData=(uint32_t)(80000000/(N*F));
 80011f8:	f248 2335 	movw	r3, #33333	; 0x8235
 80011fc:	6013      	str	r3, [r2, #0]
	    TIM2->ARR=TimerData;
 80011fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	    HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 8001202:	2100      	movs	r1, #0
	    TIM2->ARR=TimerData;
 8001204:	62d3      	str	r3, [r2, #44]	; 0x2c
	    HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 8001206:	9100      	str	r1, [sp, #0]
 8001208:	4623      	mov	r3, r4
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <Rampa+0x58>)
 800120c:	f000 fff0 	bl	80021f0 <HAL_DAC_Start_DMA>
}
 8001210:	b002      	add	sp, #8
 8001212:	bd10      	pop	{r4, pc}
	    		DAC_Buffer[i] = DAC_Buffer[i - 1] + 2048/N;
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	3280      	adds	r2, #128	; 0x80
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	e7e3      	b.n	80011e4 <Rampa+0x10>
 800121c:	200001ec 	.word	0x200001ec
 8001220:	20000230 	.word	0x20000230
 8001224:	200001e8 	.word	0x200001e8
 8001228:	20000184 	.word	0x20000184
 800122c:	200001f0 	.word	0x200001f0

08001230 <Cuadrada>:

//funcion cuadrada
void Cuadrada(){
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <Cuadrada+0x48>)
 8001232:	b513      	push	{r0, r1, r4, lr}
	 for(int i=0; i<N; i++) {
		  if(i <= N/2-1) {
			  DAC_Buffer[i] = 2048;
		  } else {
			  DAC_Buffer[i] = 4000;
 8001234:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	 for(int i=0; i<N; i++) {
 8001238:	2400      	movs	r4, #0
			  DAC_Buffer[i] = 2048;
 800123a:	f44f 6100 	mov.w	r1, #2048	; 0x800
		  if(i <= N/2-1) {
 800123e:	2c07      	cmp	r4, #7
			  DAC_Buffer[i] = 2048;
 8001240:	bfd4      	ite	le
 8001242:	f843 1024 	strle.w	r1, [r3, r4, lsl #2]
			  DAC_Buffer[i] = 4000;
 8001246:	f843 2024 	strgt.w	r2, [r3, r4, lsl #2]
	 for(int i=0; i<N; i++) {
 800124a:	3401      	adds	r4, #1
 800124c:	2c10      	cmp	r4, #16
 800124e:	d1f6      	bne.n	800123e <Cuadrada+0xe>
		  }
	  }
	  HAL_TIM_Base_Start(&htim2);
 8001250:	480a      	ldr	r0, [pc, #40]	; (800127c <Cuadrada+0x4c>)
 8001252:	f002 fafd 	bl	8003850 <HAL_TIM_Base_Start>
	  TimerData=(uint32_t)(80000000/(N*F));
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <Cuadrada+0x50>)
	  TIM2->ARR=TimerData;
	  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 8001258:	480a      	ldr	r0, [pc, #40]	; (8001284 <Cuadrada+0x54>)
	  TimerData=(uint32_t)(80000000/(N*F));
 800125a:	f248 2335 	movw	r3, #33333	; 0x8235
 800125e:	6013      	str	r3, [r2, #0]
	  TIM2->ARR=TimerData;
 8001260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 8001264:	2100      	movs	r1, #0
	  TIM2->ARR=TimerData;
 8001266:	62d3      	str	r3, [r2, #44]	; 0x2c
	  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 8001268:	9100      	str	r1, [sp, #0]
 800126a:	4623      	mov	r3, r4
 800126c:	4a02      	ldr	r2, [pc, #8]	; (8001278 <Cuadrada+0x48>)
 800126e:	f000 ffbf 	bl	80021f0 <HAL_DAC_Start_DMA>
}
 8001272:	b002      	add	sp, #8
 8001274:	bd10      	pop	{r4, pc}
 8001276:	bf00      	nop
 8001278:	200001f0 	.word	0x200001f0
 800127c:	20000230 	.word	0x20000230
 8001280:	200001e8 	.word	0x200001e8
 8001284:	20000184 	.word	0x20000184

08001288 <Senoidal>:

//funcion senoidal
void Senoidal(){
 8001288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800128c:	ed2d 8b02 	vpush	{d8}
	for(int i=0; i<N; i++) {
		  DAC_Buffer[i]=(uint32_t)(2048+2047*sinf(2*M_PI*i/N));
 8001290:	f20f 09a0 	addw	r9, pc, #160	; 0xa0
 8001294:	e9d9 8900 	ldrd	r8, r9, [r9]
 8001298:	4f1f      	ldr	r7, [pc, #124]	; (8001318 <Senoidal+0x90>)
 800129a:	4d20      	ldr	r5, [pc, #128]	; (800131c <Senoidal+0x94>)
 800129c:	eddf 8a20 	vldr	s17, [pc, #128]	; 8001320 <Senoidal+0x98>
 80012a0:	ed9f 8a20 	vldr	s16, [pc, #128]	; 8001324 <Senoidal+0x9c>
void Senoidal(){
 80012a4:	b083      	sub	sp, #12
	for(int i=0; i<N; i++) {
 80012a6:	2400      	movs	r4, #0
		  DAC_Buffer[i]=(uint32_t)(2048+2047*sinf(2*M_PI*i/N));
 80012a8:	2600      	movs	r6, #0
 80012aa:	4620      	mov	r0, r4
 80012ac:	f7ff f8de 	bl	800046c <__aeabi_i2d>
 80012b0:	4642      	mov	r2, r8
 80012b2:	464b      	mov	r3, r9
 80012b4:	f7ff f940 	bl	8000538 <__aeabi_dmul>
 80012b8:	463b      	mov	r3, r7
 80012ba:	4632      	mov	r2, r6
 80012bc:	f7ff f93c 	bl	8000538 <__aeabi_dmul>
 80012c0:	f7ff fb4c 	bl	800095c <__aeabi_d2f>
 80012c4:	ee00 0a10 	vmov	s0, r0
 80012c8:	f002 ffc0 	bl	800424c <sinf>
 80012cc:	eef0 7a48 	vmov.f32	s15, s16
 80012d0:	eee0 7a28 	vfma.f32	s15, s0, s17
 80012d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012d8:	ee17 3a90 	vmov	r3, s15
 80012dc:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
	for(int i=0; i<N; i++) {
 80012e0:	3401      	adds	r4, #1
 80012e2:	2c10      	cmp	r4, #16
 80012e4:	d1e1      	bne.n	80012aa <Senoidal+0x22>
	  }
	  HAL_TIM_Base_Start(&htim2);
 80012e6:	4810      	ldr	r0, [pc, #64]	; (8001328 <Senoidal+0xa0>)
 80012e8:	f002 fab2 	bl	8003850 <HAL_TIM_Base_Start>
	  TimerData=(uint32_t)(80000000/(N*F));
 80012ec:	4a0f      	ldr	r2, [pc, #60]	; (800132c <Senoidal+0xa4>)
	  TIM2->ARR=TimerData;
	  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 80012ee:	4810      	ldr	r0, [pc, #64]	; (8001330 <Senoidal+0xa8>)
	  TimerData=(uint32_t)(80000000/(N*F));
 80012f0:	f248 2335 	movw	r3, #33333	; 0x8235
 80012f4:	6013      	str	r3, [r2, #0]
	  TIM2->ARR=TimerData;
 80012f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 80012fa:	2100      	movs	r1, #0
	  TIM2->ARR=TimerData;
 80012fc:	62d3      	str	r3, [r2, #44]	; 0x2c
	  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 80012fe:	9100      	str	r1, [sp, #0]
 8001300:	4623      	mov	r3, r4
 8001302:	4a06      	ldr	r2, [pc, #24]	; (800131c <Senoidal+0x94>)
 8001304:	f000 ff74 	bl	80021f0 <HAL_DAC_Start_DMA>
}
 8001308:	b003      	add	sp, #12
 800130a:	ecbd 8b02 	vpop	{d8}
 800130e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001312:	bf00      	nop
 8001314:	f3af 8000 	nop.w
 8001318:	3fb00000 	.word	0x3fb00000
 800131c:	200001f0 	.word	0x200001f0
 8001320:	44ffe000 	.word	0x44ffe000
 8001324:	45000000 	.word	0x45000000
 8001328:	20000230 	.word	0x20000230
 800132c:	200001e8 	.word	0x200001e8
 8001330:	20000184 	.word	0x20000184
 8001334:	54442d18 	.word	0x54442d18
 8001338:	401921fb 	.word	0x401921fb

0800133c <Triangular>:

//funcion triangular
void Triangular(){
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <Triangular+0x64>)
 800133e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	for(int i=0; i<N; i++) {
 8001340:	2400      	movs	r4, #0
			if(i == 0) {
				DAC_Buffer[i] = 2048;
			} else if(i >= 1 && i < N/2) {
				DAC_Buffer[i] = DAC_Buffer[i - 1] + (2048/N)*2;
			} else if(i == N/2) {
				DAC_Buffer[i] = 4095;
 8001342:	1d19      	adds	r1, r3, #4
 8001344:	f640 70ff 	movw	r0, #4095	; 0xfff
				DAC_Buffer[i] = 2048;
 8001348:	f44f 6500 	mov.w	r5, #2048	; 0x800
			if(i == 0) {
 800134c:	b9c4      	cbnz	r4, 8001380 <Triangular+0x44>
				DAC_Buffer[i] = 2048;
 800134e:	600d      	str	r5, [r1, #0]
	for(int i=0; i<N; i++) {
 8001350:	3401      	adds	r4, #1
 8001352:	2c10      	cmp	r4, #16
 8001354:	f103 0304 	add.w	r3, r3, #4
 8001358:	d1f8      	bne.n	800134c <Triangular+0x10>
			} else {
				DAC_Buffer[i] = DAC_Buffer[i - 1] - (2048/N)*2;
			}
		}
	    HAL_TIM_Base_Start(&htim2);
 800135a:	4812      	ldr	r0, [pc, #72]	; (80013a4 <Triangular+0x68>)
 800135c:	f002 fa78 	bl	8003850 <HAL_TIM_Base_Start>
	    TimerData=(uint32_t)(80000000/(N*F));
 8001360:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <Triangular+0x6c>)
	    TIM2->ARR=TimerData;
	    HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 8001362:	4812      	ldr	r0, [pc, #72]	; (80013ac <Triangular+0x70>)
	    TimerData=(uint32_t)(80000000/(N*F));
 8001364:	f248 2335 	movw	r3, #33333	; 0x8235
 8001368:	6013      	str	r3, [r2, #0]
	    TIM2->ARR=TimerData;
 800136a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	    HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 800136e:	2100      	movs	r1, #0
	    TIM2->ARR=TimerData;
 8001370:	62d3      	str	r3, [r2, #44]	; 0x2c
	    HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t *)DAC_Buffer,N,DAC_ALIGN_12B_R);
 8001372:	9100      	str	r1, [sp, #0]
 8001374:	4623      	mov	r3, r4
 8001376:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <Triangular+0x74>)
 8001378:	f000 ff3a 	bl	80021f0 <HAL_DAC_Start_DMA>
}
 800137c:	b003      	add	sp, #12
 800137e:	bd30      	pop	{r4, r5, pc}
			} else if(i >= 1 && i < N/2) {
 8001380:	1e62      	subs	r2, r4, #1
 8001382:	2a06      	cmp	r2, #6
 8001384:	d804      	bhi.n	8001390 <Triangular+0x54>
				DAC_Buffer[i] = DAC_Buffer[i - 1] + (2048/N)*2;
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	f502 7280 	add.w	r2, r2, #256	; 0x100
				DAC_Buffer[i] = DAC_Buffer[i - 1] - (2048/N)*2;
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	e7df      	b.n	8001350 <Triangular+0x14>
			} else if(i == N/2) {
 8001390:	2c08      	cmp	r4, #8
 8001392:	d101      	bne.n	8001398 <Triangular+0x5c>
				DAC_Buffer[i] = 4095;
 8001394:	6208      	str	r0, [r1, #32]
 8001396:	e7db      	b.n	8001350 <Triangular+0x14>
				DAC_Buffer[i] = DAC_Buffer[i - 1] - (2048/N)*2;
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800139e:	e7f5      	b.n	800138c <Triangular+0x50>
 80013a0:	200001ec 	.word	0x200001ec
 80013a4:	20000230 	.word	0x20000230
 80013a8:	200001e8 	.word	0x200001e8
 80013ac:	20000184 	.word	0x20000184
 80013b0:	200001f0 	.word	0x200001f0

080013b4 <main>:
	Option = 0;
 80013b4:	4c2c      	ldr	r4, [pc, #176]	; (8001468 <main+0xb4>)
	  if(HAL_GPIO_ReadPin(GPIOC, B1_Pin)){
 80013b6:	4e2d      	ldr	r6, [pc, #180]	; (800146c <main+0xb8>)
{
 80013b8:	b508      	push	{r3, lr}
	Option = 0;
 80013ba:	2500      	movs	r5, #0
 80013bc:	6025      	str	r5, [r4, #0]
  HAL_Init();
 80013be:	f000 f98f 	bl	80016e0 <HAL_Init>
  SystemClock_Config();
 80013c2:	f7ff febd 	bl	8001140 <SystemClock_Config>
  MX_GPIO_Init();
 80013c6:	f7ff fe69 	bl	800109c <MX_GPIO_Init>
  MX_DMA_Init();
 80013ca:	f7ff fe3f 	bl	800104c <MX_DMA_Init>
  MX_DAC1_Init();
 80013ce:	f7ff fdcd 	bl	8000f6c <MX_DAC1_Init>
  MX_TIM2_Init();
 80013d2:	f000 f8af 	bl	8001534 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80013d6:	f000 f90d 	bl	80015f4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80013da:	f7ff fc97 	bl	8000d0c <MX_ADC1_Init>
  MX_ADC2_Init();
 80013de:	f7ff fcdf 	bl	8000da0 <MX_ADC2_Init>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80013e2:	217f      	movs	r1, #127	; 0x7f
 80013e4:	4822      	ldr	r0, [pc, #136]	; (8001470 <main+0xbc>)
 80013e6:	f000 fdc3 	bl	8001f70 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80013ea:	217f      	movs	r1, #127	; 0x7f
 80013ec:	4821      	ldr	r0, [pc, #132]	; (8001474 <main+0xc0>)
 80013ee:	f000 fdbf 	bl	8001f70 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_Buffer, 1);
 80013f2:	2201      	movs	r2, #1
 80013f4:	4920      	ldr	r1, [pc, #128]	; (8001478 <main+0xc4>)
 80013f6:	481e      	ldr	r0, [pc, #120]	; (8001470 <main+0xbc>)
 80013f8:	f000 fd00 	bl	8001dfc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADC2_Buffer, 1);
 80013fc:	2201      	movs	r2, #1
 80013fe:	491f      	ldr	r1, [pc, #124]	; (800147c <main+0xc8>)
 8001400:	481c      	ldr	r0, [pc, #112]	; (8001474 <main+0xc0>)
 8001402:	f000 fcfb 	bl	8001dfc <HAL_ADC_Start_DMA>
	  if(Option == 4){
 8001406:	6823      	ldr	r3, [r4, #0]
	  if(HAL_GPIO_ReadPin(GPIOC, B1_Pin)){
 8001408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	  if(Option == 4){
 800140c:	2b04      	cmp	r3, #4
	  if(HAL_GPIO_ReadPin(GPIOC, B1_Pin)){
 800140e:	4630      	mov	r0, r6
		  Option = 0;
 8001410:	bf08      	it	eq
 8001412:	6025      	streq	r5, [r4, #0]
	  if(HAL_GPIO_ReadPin(GPIOC, B1_Pin)){
 8001414:	f001 f9e2 	bl	80027dc <HAL_GPIO_ReadPin>
 8001418:	b160      	cbz	r0, 8001434 <main+0x80>
	  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2120      	movs	r1, #32
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001422:	f001 f9e1 	bl	80027e8 <HAL_GPIO_WritePin>
	  switch (Option) {
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	2b03      	cmp	r3, #3
 800142a:	d8ec      	bhi.n	8001406 <main+0x52>
 800142c:	e8df f003 	tbb	[pc, r3]
 8001430:	19161310 	.word	0x19161310
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001434:	2201      	movs	r2, #1
 8001436:	2120      	movs	r1, #32
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f001 f9d4 	bl	80027e8 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001440:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001444:	f000 f974 	bl	8001730 <HAL_Delay>
		  Option = Option + 1;
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	6023      	str	r3, [r4, #0]
 800144e:	e7ea      	b.n	8001426 <main+0x72>
			Rampa();
 8001450:	f7ff fec0 	bl	80011d4 <Rampa>
			break;
 8001454:	e7d7      	b.n	8001406 <main+0x52>
			Cuadrada();
 8001456:	f7ff feeb 	bl	8001230 <Cuadrada>
			break;
 800145a:	e7d4      	b.n	8001406 <main+0x52>
			Senoidal();
 800145c:	f7ff ff14 	bl	8001288 <Senoidal>
			break;
 8001460:	e7d1      	b.n	8001406 <main+0x52>
			Triangular();
 8001462:	f7ff ff6b 	bl	800133c <Triangular>
			break;
 8001466:	e7ce      	b.n	8001406 <main+0x52>
 8001468:	200001ec 	.word	0x200001ec
 800146c:	48000800 	.word	0x48000800
 8001470:	20000090 	.word	0x20000090
 8001474:	2000002c 	.word	0x2000002c
 8001478:	200001e0 	.word	0x200001e0
 800147c:	200001e4 	.word	0x200001e4

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	4770      	bx	lr
	...

08001484 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_MspInit+0x2c>)
 8001486:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	661a      	str	r2, [r3, #96]	; 0x60
 800148e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001490:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	f002 0201 	and.w	r2, r2, #1
 8001496:	9200      	str	r2, [sp, #0]
 8001498:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800149c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014a0:	659a      	str	r2, [r3, #88]	; 0x58
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ac:	b002      	add	sp, #8
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000

080014b4 <NMI_Handler>:
 80014b4:	4770      	bx	lr

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	e7fe      	b.n	80014b6 <HardFault_Handler>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler>

080014be <SVC_Handler>:
 80014be:	4770      	bx	lr

080014c0 <DebugMon_Handler>:
 80014c0:	4770      	bx	lr

080014c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c4:	f000 b922 	b.w	800170c <HAL_IncTick>

080014c8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014c8:	4801      	ldr	r0, [pc, #4]	; (80014d0 <DMA1_Channel1_IRQHandler+0x8>)
 80014ca:	f001 b861 	b.w	8002590 <HAL_DMA_IRQHandler>
 80014ce:	bf00      	nop
 80014d0:	200000f4 	.word	0x200000f4

080014d4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80014d4:	4801      	ldr	r0, [pc, #4]	; (80014dc <DMA1_Channel2_IRQHandler+0x8>)
 80014d6:	f001 b85b 	b.w	8002590 <HAL_DMA_IRQHandler>
 80014da:	bf00      	nop
 80014dc:	2000013c 	.word	0x2000013c

080014e0 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80014e0:	4801      	ldr	r0, [pc, #4]	; (80014e8 <DMA1_Channel3_IRQHandler+0x8>)
 80014e2:	f001 b855 	b.w	8002590 <HAL_DMA_IRQHandler>
 80014e6:	bf00      	nop
 80014e8:	20000198 	.word	0x20000198

080014ec <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ec:	490f      	ldr	r1, [pc, #60]	; (800152c <SystemInit+0x40>)
 80014ee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80014f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <SystemInit+0x44>)
 80014fc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014fe:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001500:	f042 0201 	orr.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001506:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800150e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001512:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001514:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001518:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001520:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001522:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001524:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001528:	608b      	str	r3, [r1, #8]
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00
 8001530:	40021000 	.word	0x40021000

08001534 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001534:	b510      	push	{r4, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001538:	2210      	movs	r2, #16
 800153a:	2100      	movs	r1, #0
 800153c:	a803      	add	r0, sp, #12
 800153e:	f002 fe7d 	bl	800423c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001542:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001544:	221c      	movs	r2, #28
 8001546:	eb0d 0002 	add.w	r0, sp, r2
 800154a:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	9400      	str	r4, [sp, #0]
 800154e:	9401      	str	r4, [sp, #4]
 8001550:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001552:	f002 fe73 	bl	800423c <memset>

  htim2.Instance = TIM2;
 8001556:	481c      	ldr	r0, [pc, #112]	; (80015c8 <MX_TIM2_Init+0x94>)
  htim2.Init.Prescaler = 79;
 8001558:	234f      	movs	r3, #79	; 0x4f
 800155a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155e:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999999;
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_TIM2_Init+0x98>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 999999;
 8001566:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001568:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800156c:	f002 f9f0 	bl	8003950 <HAL_TIM_Base_Init>
 8001570:	b108      	cbz	r0, 8001576 <MX_TIM2_Init+0x42>
  {
    Error_Handler();
 8001572:	f7ff ff85 	bl	8001480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800157a:	a903      	add	r1, sp, #12
 800157c:	4812      	ldr	r0, [pc, #72]	; (80015c8 <MX_TIM2_Init+0x94>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001580:	f002 faa2 	bl	8003ac8 <HAL_TIM_ConfigClockSource>
 8001584:	b108      	cbz	r0, 800158a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001586:	f7ff ff7b 	bl	8001480 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800158a:	480f      	ldr	r0, [pc, #60]	; (80015c8 <MX_TIM2_Init+0x94>)
 800158c:	f002 f9fa 	bl	8003984 <HAL_TIM_OC_Init>
 8001590:	b108      	cbz	r0, 8001596 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001592:	f7ff ff75 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001596:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800159a:	4669      	mov	r1, sp
 800159c:	480a      	ldr	r0, [pc, #40]	; (80015c8 <MX_TIM2_Init+0x94>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800159e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015a2:	f002 fb25 	bl	8003bf0 <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	b108      	cbz	r0, 80015ac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015a8:	f7ff ff6a 	bl	8001480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ac:	2200      	movs	r2, #0
 80015ae:	a907      	add	r1, sp, #28
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_TIM2_Init+0x94>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015b2:	9407      	str	r4, [sp, #28]
  sConfigOC.Pulse = 0;
 80015b4:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b6:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b8:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ba:	f002 fa43 	bl	8003a44 <HAL_TIM_OC_ConfigChannel>
 80015be:	b108      	cbz	r0, 80015c4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80015c0:	f7ff ff5e 	bl	8001480 <Error_Handler>
  }

}
 80015c4:	b00e      	add	sp, #56	; 0x38
 80015c6:	bd10      	pop	{r4, pc}
 80015c8:	20000230 	.word	0x20000230
 80015cc:	000f423f 	.word	0x000f423f

080015d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80015d0:	6803      	ldr	r3, [r0, #0]
 80015d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80015d6:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 80015d8:	d10a      	bne.n	80015f0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015da:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80015de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	659a      	str	r2, [r3, #88]	; 0x58
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015f0:	b002      	add	sp, #8
 80015f2:	4770      	bx	lr

080015f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015f4:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80015f6:	480c      	ldr	r0, [pc, #48]	; (8001628 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_USART2_UART_Init+0x38>)
 80015fa:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80015fe:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001602:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001604:	2300      	movs	r3, #0
 8001606:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001608:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800160a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800160c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001612:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001614:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001616:	f002 fd94 	bl	8004142 <HAL_UART_Init>
 800161a:	b118      	cbz	r0, 8001624 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 800161c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001620:	f7ff bf2e 	b.w	8001480 <Error_Handler>
 8001624:	bd08      	pop	{r3, pc}
 8001626:	bf00      	nop
 8001628:	20000270 	.word	0x20000270
 800162c:	40004400 	.word	0x40004400

08001630 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001630:	b510      	push	{r4, lr}
 8001632:	4604      	mov	r4, r0
 8001634:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	2214      	movs	r2, #20
 8001638:	2100      	movs	r1, #0
 800163a:	a803      	add	r0, sp, #12
 800163c:	f002 fdfe 	bl	800423c <memset>
  if(uartHandle->Instance==USART2)
 8001640:	6822      	ldr	r2, [r4, #0]
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_UART_MspInit+0x60>)
 8001644:	429a      	cmp	r2, r3
 8001646:	d120      	bne.n	800168a <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001648:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800164e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001650:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001654:	659a      	str	r2, [r3, #88]	; 0x58
 8001656:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001658:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800165c:	9201      	str	r2, [sp, #4]
 800165e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	64da      	str	r2, [r3, #76]	; 0x4c
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	9302      	str	r3, [sp, #8]
 8001670:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001672:	230c      	movs	r3, #12
 8001674:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001682:	2307      	movs	r3, #7
 8001684:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f000 ffcd 	bl	8002624 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800168a:	b008      	add	sp, #32
 800168c:	bd10      	pop	{r4, pc}
 800168e:	bf00      	nop
 8001690:	40004400 	.word	0x40004400

08001694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_InitTick+0x40>)
{
 8001698:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	b908      	cbnz	r0, 80016a2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800169e:	2001      	movs	r0, #1
 80016a0:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016a2:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <HAL_InitTick+0x44>)
 80016a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a8:	fbb3 f3f0 	udiv	r3, r3, r0
 80016ac:	6810      	ldr	r0, [r2, #0]
 80016ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80016b2:	f000 fd73 	bl	800219c <HAL_SYSTICK_Config>
 80016b6:	4604      	mov	r4, r0
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d1f0      	bne.n	800169e <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016bc:	2d0f      	cmp	r5, #15
 80016be:	d8ee      	bhi.n	800169e <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c0:	4602      	mov	r2, r0
 80016c2:	4629      	mov	r1, r5
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f000 fd26 	bl	8002118 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_InitTick+0x48>)
 80016ce:	4620      	mov	r0, r4
 80016d0:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 80016d2:	bd38      	pop	{r3, r4, r5, pc}
 80016d4:	20000004 	.word	0x20000004
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000008 	.word	0x20000008

080016e0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e0:	4a09      	ldr	r2, [pc, #36]	; (8001708 <HAL_Init+0x28>)
 80016e2:	6813      	ldr	r3, [r2, #0]
 80016e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80016e8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ec:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ee:	f000 fd01 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff ffce 	bl	8001694 <HAL_InitTick>
 80016f8:	4604      	mov	r4, r0
 80016fa:	b918      	cbnz	r0, 8001704 <HAL_Init+0x24>
    HAL_MspInit();
 80016fc:	f7ff fec2 	bl	8001484 <HAL_MspInit>
}
 8001700:	4620      	mov	r0, r4
 8001702:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001704:	2401      	movs	r4, #1
 8001706:	e7fb      	b.n	8001700 <HAL_Init+0x20>
 8001708:	40022000 	.word	0x40022000

0800170c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800170c:	4a03      	ldr	r2, [pc, #12]	; (800171c <HAL_IncTick+0x10>)
 800170e:	4904      	ldr	r1, [pc, #16]	; (8001720 <HAL_IncTick+0x14>)
 8001710:	6813      	ldr	r3, [r2, #0]
 8001712:	6809      	ldr	r1, [r1, #0]
 8001714:	440b      	add	r3, r1
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200002f0 	.word	0x200002f0
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001724:	4b01      	ldr	r3, [pc, #4]	; (800172c <HAL_GetTick+0x8>)
 8001726:	6818      	ldr	r0, [r3, #0]
}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200002f0 	.word	0x200002f0

08001730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001730:	b538      	push	{r3, r4, r5, lr}
 8001732:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff fff6 	bl	8001724 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001738:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	bf1c      	itt	ne
 800173c:	4b05      	ldrne	r3, [pc, #20]	; (8001754 <HAL_Delay+0x24>)
 800173e:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001740:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001742:	bf18      	it	ne
 8001744:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001746:	f7ff ffed 	bl	8001724 <HAL_GetTick>
 800174a:	1b40      	subs	r0, r0, r5
 800174c:	4284      	cmp	r4, r0
 800174e:	d8fa      	bhi.n	8001746 <HAL_Delay+0x16>
  {
  }
}
 8001750:	bd38      	pop	{r3, r4, r5, pc}
 8001752:	bf00      	nop
 8001754:	20000004 	.word	0x20000004

08001758 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001758:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800175a:	0dcc      	lsrs	r4, r1, #23
 800175c:	f004 0404 	and.w	r4, r4, #4
 8001760:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8001762:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8001766:	5823      	ldr	r3, [r4, r0]
 8001768:	2507      	movs	r5, #7
 800176a:	408d      	lsls	r5, r1
 800176c:	ea23 0305 	bic.w	r3, r3, r5
 8001770:	fa02 f101 	lsl.w	r1, r2, r1
 8001774:	4319      	orrs	r1, r3
 8001776:	5021      	str	r1, [r4, r0]
 8001778:	bd30      	pop	{r4, r5, pc}

0800177a <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800177a:	6880      	ldr	r0, [r0, #8]
}
 800177c:	f000 0001 	and.w	r0, r0, #1
 8001780:	4770      	bx	lr

08001782 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001782:	6880      	ldr	r0, [r0, #8]
}
 8001784:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001788:	4770      	bx	lr
	...

0800178c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800178c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800178e:	2300      	movs	r3, #0
 8001790:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001792:	4604      	mov	r4, r0
 8001794:	2800      	cmp	r0, #0
 8001796:	f000 8085 	beq.w	80018a4 <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800179a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800179c:	b925      	cbnz	r5, 80017a8 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800179e:	f7ff fb3d 	bl	8000e1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a2:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017a4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017a8:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017aa:	6883      	ldr	r3, [r0, #8]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	d47b      	bmi.n	80018a8 <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017b0:	6883      	ldr	r3, [r0, #8]
 80017b2:	00dd      	lsls	r5, r3, #3
 80017b4:	d57f      	bpl.n	80018b6 <HAL_ADC_Init+0x12a>
 80017b6:	6883      	ldr	r3, [r0, #8]
 80017b8:	00d9      	lsls	r1, r3, #3
 80017ba:	f140 808a 	bpl.w	80018d2 <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017be:	2100      	movs	r1, #0

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017c0:	f7ff ffdf 	bl	8001782 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017c6:	f013 0f10 	tst.w	r3, #16
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017cc:	d167      	bne.n	800189e <HAL_ADC_Init+0x112>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017ce:	2800      	cmp	r0, #0
 80017d0:	d165      	bne.n	800189e <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 80017d2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017d6:	f043 0302 	orr.w	r3, r3, #2
 80017da:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017dc:	6820      	ldr	r0, [r4, #0]
 80017de:	f7ff ffcc 	bl	800177a <LL_ADC_IsEnabled>
 80017e2:	b998      	cbnz	r0, 800180c <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017e4:	4852      	ldr	r0, [pc, #328]	; (8001930 <HAL_ADC_Init+0x1a4>)
 80017e6:	f7ff ffc8 	bl	800177a <LL_ADC_IsEnabled>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4851      	ldr	r0, [pc, #324]	; (8001934 <HAL_ADC_Init+0x1a8>)
 80017ee:	f7ff ffc4 	bl	800177a <LL_ADC_IsEnabled>
 80017f2:	4303      	orrs	r3, r0
 80017f4:	4850      	ldr	r0, [pc, #320]	; (8001938 <HAL_ADC_Init+0x1ac>)
 80017f6:	f7ff ffc0 	bl	800177a <LL_ADC_IsEnabled>
 80017fa:	4303      	orrs	r3, r0
 80017fc:	d106      	bne.n	800180c <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017fe:	4a4f      	ldr	r2, [pc, #316]	; (800193c <HAL_ADC_Init+0x1b0>)
 8001800:	6860      	ldr	r0, [r4, #4]
 8001802:	6893      	ldr	r3, [r2, #8]
 8001804:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001808:	4303      	orrs	r3, r0
 800180a:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800180c:	68e0      	ldr	r0, [r4, #12]
 800180e:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001810:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8001814:	4303      	orrs	r3, r0
 8001816:	68a0      	ldr	r0, [r4, #8]
 8001818:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800181a:	7e60      	ldrb	r0, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800181c:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 800181e:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001826:	bf02      	ittt	eq
 8001828:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 800182a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800182e:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001832:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001834:	b122      	cbz	r2, 8001840 <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001836:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001838:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800183c:	4302      	orrs	r2, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800183e:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001840:	6820      	ldr	r0, [r4, #0]
 8001842:	4a3f      	ldr	r2, [pc, #252]	; (8001940 <HAL_ADC_Init+0x1b4>)
 8001844:	68c5      	ldr	r5, [r0, #12]
 8001846:	402a      	ands	r2, r5
 8001848:	4313      	orrs	r3, r2
 800184a:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800184c:	f7ff ff99 	bl	8001782 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001850:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	0712      	lsls	r2, r2, #28
 8001856:	d546      	bpl.n	80018e6 <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001858:	6922      	ldr	r2, [r4, #16]
 800185a:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800185c:	bf05      	ittet	eq
 800185e:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8001860:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001862:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001864:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001868:	bf06      	itte	eq
 800186a:	f020 000f 	biceq.w	r0, r0, #15
 800186e:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001870:	f022 020f 	bicne.w	r2, r2, #15
 8001874:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001876:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001878:	f023 0303 	bic.w	r3, r3, #3
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001882:	4608      	mov	r0, r1
 8001884:	b003      	add	sp, #12
 8001886:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8001888:	9b01      	ldr	r3, [sp, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800188e:	9b01      	ldr	r3, [sp, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f9      	bne.n	8001888 <HAL_ADC_Init+0xfc>
 8001894:	e78f      	b.n	80017b6 <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	f022 0201 	bic.w	r2, r2, #1
 800189c:	e045      	b.n	800192a <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189e:	f043 0310 	orr.w	r3, r3, #16
 80018a2:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 80018a4:	2101      	movs	r1, #1
 80018a6:	e7ec      	b.n	8001882 <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018a8:	6883      	ldr	r3, [r0, #8]
 80018aa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b2:	6083      	str	r3, [r0, #8]
 80018b4:	e77c      	b.n	80017b0 <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 80018b6:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80018b8:	4a22      	ldr	r2, [pc, #136]	; (8001944 <HAL_ADC_Init+0x1b8>)
 80018ba:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c6:	6083      	str	r3, [r0, #8]
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <HAL_ADC_Init+0x1bc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80018d0:	e7dc      	b.n	800188c <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80018e2:	2101      	movs	r1, #1
 80018e4:	e76c      	b.n	80017c0 <HAL_ADC_Init+0x34>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018e6:	2800      	cmp	r0, #0
 80018e8:	d1b6      	bne.n	8001858 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018ea:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018ec:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018f0:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018f2:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018f4:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018f8:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018fc:	f020 0002 	bic.w	r0, r0, #2
 8001900:	4302      	orrs	r2, r0
 8001902:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001904:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8001908:	2a01      	cmp	r2, #1
 800190a:	d1c4      	bne.n	8001896 <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 800190c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800190e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001910:	6918      	ldr	r0, [r3, #16]
 8001912:	432a      	orrs	r2, r5
 8001914:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	432a      	orrs	r2, r5
 800191c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800191e:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001922:	432a      	orrs	r2, r5
 8001924:	f020 0004 	bic.w	r0, r0, #4
 8001928:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800192a:	611a      	str	r2, [r3, #16]
 800192c:	e794      	b.n	8001858 <HAL_ADC_Init+0xcc>
 800192e:	bf00      	nop
 8001930:	50040000 	.word	0x50040000
 8001934:	50040100 	.word	0x50040100
 8001938:	50040200 	.word	0x50040200
 800193c:	50040300 	.word	0x50040300
 8001940:	fff0c007 	.word	0xfff0c007
 8001944:	00030d40 	.word	0x00030d40
 8001948:	20000000 	.word	0x20000000

0800194c <HAL_ADC_ConvCpltCallback>:
 800194c:	4770      	bx	lr

0800194e <HAL_ADC_ConvHalfCpltCallback>:
 800194e:	4770      	bx	lr

08001950 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001950:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001952:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001954:	f7ff fffb 	bl	800194e <HAL_ADC_ConvHalfCpltCallback>
 8001958:	bd08      	pop	{r3, pc}

0800195a <HAL_ADC_ErrorCallback>:
{
 800195a:	4770      	bx	lr

0800195c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800195c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800195e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001960:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001964:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001966:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001968:	d121      	bne.n	80019ae <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800196a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800196e:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	6811      	ldr	r1, [r2, #0]
 8001974:	0708      	lsls	r0, r1, #28
 8001976:	d507      	bpl.n	8001988 <ADC_DMAConvCplt+0x2c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001978:	68d1      	ldr	r1, [r2, #12]
 800197a:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 800197e:	d112      	bne.n	80019a6 <ADC_DMAConvCplt+0x4a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001980:	68d2      	ldr	r2, [r2, #12]
 8001982:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001986:	e002      	b.n	800198e <ADC_DMAConvCplt+0x32>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001988:	68d2      	ldr	r2, [r2, #12]
 800198a:	f012 0f02 	tst.w	r2, #2
 800198e:	d10a      	bne.n	80019a6 <ADC_DMAConvCplt+0x4a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001992:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800199a:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800199c:	bf5e      	ittt	pl
 800199e:	6d5a      	ldrpl	r2, [r3, #84]	; 0x54
 80019a0:	f042 0201 	orrpl.w	r2, r2, #1
 80019a4:	655a      	strpl	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ffd0 	bl	800194c <HAL_ADC_ConvCpltCallback>
 80019ac:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019ae:	06d2      	lsls	r2, r2, #27
 80019b0:	d503      	bpl.n	80019ba <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ffd1 	bl	800195a <HAL_ADC_ErrorCallback>
 80019b8:	bd10      	pop	{r4, pc}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c2:	4718      	bx	r3

080019c4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019c4:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80019c6:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019c8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80019ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ce:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019d0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019d8:	f7ff ffbf 	bl	800195a <HAL_ADC_ErrorCallback>
 80019dc:	bd08      	pop	{r3, pc}
	...

080019e0 <HAL_ADC_ConfigChannel>:
{
 80019e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80019e6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80019ea:	2b01      	cmp	r3, #1
{
 80019ec:	4605      	mov	r5, r0
 80019ee:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80019f0:	f000 8184 	beq.w	8001cfc <HAL_ADC_ConfigChannel+0x31c>
 80019f4:	2301      	movs	r3, #1
 80019f6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019fa:	6800      	ldr	r0, [r0, #0]
 80019fc:	f7ff fec1 	bl	8001782 <LL_ADC_REG_IsConversionOngoing>
 8001a00:	2800      	cmp	r0, #0
 8001a02:	f040 8175 	bne.w	8001cf0 <HAL_ADC_ConfigChannel+0x310>
    if (sConfig->Rank <= 5U)
 8001a06:	684b      	ldr	r3, [r1, #4]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d808      	bhi.n	8001a1e <HAL_ADC_ConfigChannel+0x3e>
      switch (sConfig->Rank)
 8001a0c:	3b02      	subs	r3, #2
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d866      	bhi.n	8001ae0 <HAL_ADC_ConfigChannel+0x100>
 8001a12:	e8df f003 	tbb	[pc, r3]
 8001a16:	5e02      	.short	0x5e02
 8001a18:	6260      	.short	0x6260
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001a1a:	230c      	movs	r3, #12
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001a1c:	6063      	str	r3, [r4, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a1e:	6862      	ldr	r2, [r4, #4]
 8001a20:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8001a22:	6823      	ldr	r3, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a24:	0991      	lsrs	r1, r2, #6
 8001a26:	f001 010c 	and.w	r1, r1, #12
 8001a2a:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 8001a2e:	f002 021f 	and.w	r2, r2, #31
 8001a32:	59ce      	ldr	r6, [r1, r7]
 8001a34:	f04f 0e1f 	mov.w	lr, #31
 8001a38:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001a3c:	4093      	lsls	r3, r2
 8001a3e:	fa0e f202 	lsl.w	r2, lr, r2
 8001a42:	ea26 0202 	bic.w	r2, r6, r2
 8001a46:	4313      	orrs	r3, r2
 8001a48:	51cb      	str	r3, [r1, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a4a:	f7ff fe9a 	bl	8001782 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a4e:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	0711      	lsls	r1, r2, #28
 8001a54:	f140 8154 	bpl.w	8001d00 <HAL_ADC_ConfigChannel+0x320>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a58:	6828      	ldr	r0, [r5, #0]
 8001a5a:	f7ff fe8e 	bl	800177a <LL_ADC_IsEnabled>
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	f040 80d3 	bne.w	8001c0a <HAL_ADC_ConfigChannel+0x22a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a64:	68e6      	ldr	r6, [r4, #12]
 8001a66:	6828      	ldr	r0, [r5, #0]
 8001a68:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8001a6a:	4aba      	ldr	r2, [pc, #744]	; (8001d54 <HAL_ADC_ConfigChannel+0x374>)
 8001a6c:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8001a70:	f006 0e18 	and.w	lr, r6, #24
 8001a74:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001a78:	fa22 f20e 	lsr.w	r2, r2, lr
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	ea21 0107 	bic.w	r1, r1, r7
 8001a82:	430a      	orrs	r2, r1
 8001a84:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a88:	4ab3      	ldr	r2, [pc, #716]	; (8001d58 <HAL_ADC_ConfigChannel+0x378>)
 8001a8a:	4296      	cmp	r6, r2
 8001a8c:	f040 80bd 	bne.w	8001c0a <HAL_ADC_ConfigChannel+0x22a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a90:	2f00      	cmp	r7, #0
 8001a92:	f040 808f 	bne.w	8001bb4 <HAL_ADC_ConfigChannel+0x1d4>
 8001a96:	0e9e      	lsrs	r6, r3, #26
 8001a98:	3601      	adds	r6, #1
 8001a9a:	f006 021f 	and.w	r2, r6, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a9e:	2a09      	cmp	r2, #9
 8001aa0:	f04f 0101 	mov.w	r1, #1
 8001aa4:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8001aa8:	f240 809e 	bls.w	8001be8 <HAL_ADC_ConfigChannel+0x208>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aac:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001ab0:	4091      	lsls	r1, r2
 8001ab2:	ea41 0206 	orr.w	r2, r1, r6
 8001ab6:	2f00      	cmp	r7, #0
 8001ab8:	f040 80c7 	bne.w	8001c4a <HAL_ADC_ConfigChannel+0x26a>
 8001abc:	0e9b      	lsrs	r3, r3, #26
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001ac8:	391e      	subs	r1, #30
 8001aca:	0509      	lsls	r1, r1, #20
 8001acc:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001ad0:	e097      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x222>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001ad2:	2312      	movs	r3, #18
 8001ad4:	e7a2      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001ad6:	2318      	movs	r3, #24
 8001ad8:	e7a0      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ade:	e79d      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001ae0:	2306      	movs	r3, #6
 8001ae2:	e79b      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ae4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001ae6:	6e19      	ldr	r1, [r3, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ae8:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8001aec:	f3c1 6184 	ubfx	r1, r1, #26, #5
 8001af0:	2e00      	cmp	r6, #0
 8001af2:	d13e      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x192>
 8001af4:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001af8:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 8001afa:	bf02      	ittt	eq
 8001afc:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8001afe:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001b02:	661a      	streq	r2, [r3, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b04:	6e5a      	ldr	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8001b0a:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8001b0e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001b12:	f100 010c 	add.w	r1, r0, #12
 8001b16:	bb8f      	cbnz	r7, 8001b7c <HAL_ADC_ConfigChannel+0x19c>
 8001b18:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8001b1c:	42be      	cmp	r6, r7
 8001b1e:	f040 8112 	bne.w	8001d46 <HAL_ADC_ConfigChannel+0x366>
  MODIFY_REG(*preg,
 8001b22:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b24:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b28:	665a      	str	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b2a:	6822      	ldr	r2, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b2c:	6883      	ldr	r3, [r0, #8]
 8001b2e:	6883      	ldr	r3, [r0, #8]
 8001b30:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b34:	f100 0608 	add.w	r6, r0, #8
 8001b38:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001b3c:	bb57      	cbnz	r7, 8001b94 <HAL_ADC_ConfigChannel+0x1b4>
 8001b3e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001b42:	4293      	cmp	r3, r2
 8001b44:	f040 811c 	bne.w	8001d80 <HAL_ADC_ConfigChannel+0x3a0>
  MODIFY_REG(*preg,
 8001b48:	6833      	ldr	r3, [r6, #0]
 8001b4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b4e:	6033      	str	r3, [r6, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b50:	68c3      	ldr	r3, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	68c2      	ldr	r2, [r0, #12]
 8001b56:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8001b5a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001b5e:	bb20      	cbnz	r0, 8001baa <HAL_ADC_ConfigChannel+0x1ca>
 8001b60:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001b64:	4293      	cmp	r3, r2
  MODIFY_REG(*preg,
 8001b66:	bf02      	ittt	eq
 8001b68:	680b      	ldreq	r3, [r1, #0]
 8001b6a:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8001b6e:	600b      	streq	r3, [r1, #0]
 8001b70:	e772      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x78>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b76:	fab2 f282 	clz	r2, r2
 8001b7a:	e7bd      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x118>
 8001b7c:	fa92 f7a2 	rbit	r7, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b80:	fab7 f787 	clz	r7, r7
 8001b84:	42be      	cmp	r6, r7
 8001b86:	d0cc      	beq.n	8001b22 <HAL_ADC_ConfigChannel+0x142>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b88:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b8c:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8001b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b90:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001b94:	fa92 f2a2 	rbit	r2, r2
 8001b98:	fab2 f282 	clz	r2, r2
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d0d3      	beq.n	8001b48 <HAL_ADC_ConfigChannel+0x168>
 8001ba0:	68c3      	ldr	r3, [r0, #12]
 8001ba2:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	e7d7      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x184>
 8001bb4:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bb8:	fab2 f282 	clz	r2, r2
 8001bbc:	3201      	adds	r2, #1
 8001bbe:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bc2:	2a09      	cmp	r2, #9
 8001bc4:	d830      	bhi.n	8001c28 <HAL_ADC_ConfigChannel+0x248>
 8001bc6:	fa93 f6a3 	rbit	r6, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bca:	fab6 f686 	clz	r6, r6
 8001bce:	3601      	adds	r6, #1
 8001bd0:	06b6      	lsls	r6, r6, #26
 8001bd2:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001bd6:	fa93 f1a3 	rbit	r1, r3
 8001bda:	fab1 f181 	clz	r1, r1
 8001bde:	3101      	adds	r1, #1
 8001be0:	f001 021f 	and.w	r2, r1, #31
 8001be4:	2101      	movs	r1, #1
 8001be6:	e001      	b.n	8001bec <HAL_ADC_ConfigChannel+0x20c>
 8001be8:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001bec:	4091      	lsls	r1, r2
 8001bee:	ea41 0206 	orr.w	r2, r1, r6
 8001bf2:	b9a7      	cbnz	r7, 8001c1e <HAL_ADC_ConfigChannel+0x23e>
 8001bf4:	0e99      	lsrs	r1, r3, #26
 8001bf6:	3101      	adds	r1, #1
 8001bf8:	f001 011f 	and.w	r1, r1, #31
 8001bfc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001c00:	0509      	lsls	r1, r1, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c02:	4311      	orrs	r1, r2
 8001c04:	68a2      	ldr	r2, [r4, #8]
 8001c06:	f7ff fda7 	bl	8001758 <LL_ADC_SetChannelSamplingTime>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c0a:	6822      	ldr	r2, [r4, #0]
 8001c0c:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <HAL_ADC_ConfigChannel+0x37c>)
 8001c0e:	421a      	tst	r2, r3
 8001c10:	d120      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x274>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c12:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001c14:	2300      	movs	r3, #0
 8001c16:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8001c1a:	b003      	add	sp, #12
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1e:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c22:	fab1 f181 	clz	r1, r1
 8001c26:	e7e6      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x216>
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	fab2 f282 	clz	r2, r2
 8001c30:	3201      	adds	r2, #1
 8001c32:	0692      	lsls	r2, r2, #26
 8001c34:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 8001c38:	fa93 f1a3 	rbit	r1, r3
 8001c3c:	fab1 f181 	clz	r1, r1
 8001c40:	3101      	adds	r1, #1
 8001c42:	f001 021f 	and.w	r2, r1, #31
 8001c46:	2101      	movs	r1, #1
 8001c48:	e732      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0xd0>
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	e734      	b.n	8001abe <HAL_ADC_ConfigChannel+0xde>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c54:	4942      	ldr	r1, [pc, #264]	; (8001d60 <HAL_ADC_ConfigChannel+0x380>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c56:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <HAL_ADC_ConfigChannel+0x384>)
 8001c58:	6888      	ldr	r0, [r1, #8]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8001c60:	460c      	mov	r4, r1
 8001c62:	d11e      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x2c2>
 8001c64:	0202      	lsls	r2, r0, #8
 8001c66:	d4d4      	bmi.n	8001c12 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c68:	682b      	ldr	r3, [r5, #0]
 8001c6a:	4a3f      	ldr	r2, [pc, #252]	; (8001d68 <HAL_ADC_ConfigChannel+0x388>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d003      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x298>
 8001c70:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d1cc      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x232>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c78:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c7a:	4a3c      	ldr	r2, [pc, #240]	; (8001d6c <HAL_ADC_ConfigChannel+0x38c>)
 8001c7c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001c80:	4333      	orrs	r3, r6
 8001c82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c86:	60a3      	str	r3, [r4, #8]
 8001c88:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <HAL_ADC_ConfigChannel+0x390>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c90:	230c      	movs	r3, #12
 8001c92:	4353      	muls	r3, r2
            wait_loop_index--;
 8001c94:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001c96:	9b01      	ldr	r3, [sp, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0ba      	beq.n	8001c12 <HAL_ADC_ConfigChannel+0x232>
            wait_loop_index--;
 8001c9c:	9b01      	ldr	r3, [sp, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	e7f8      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x2b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ca2:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <HAL_ADC_ConfigChannel+0x394>)
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d111      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x2ec>
 8001ca8:	01c3      	lsls	r3, r0, #7
 8001caa:	d4b2      	bmi.n	8001c12 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cac:	682b      	ldr	r3, [r5, #0]
 8001cae:	4a2e      	ldr	r2, [pc, #184]	; (8001d68 <HAL_ADC_ConfigChannel+0x388>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d003      	beq.n	8001cbc <HAL_ADC_ConfigChannel+0x2dc>
 8001cb4:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d1aa      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x232>
 8001cbc:	68a3      	ldr	r3, [r4, #8]
 8001cbe:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001cc2:	4333      	orrs	r3, r6
 8001cc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc8:	60a3      	str	r3, [r4, #8]
 8001cca:	e7a2      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x232>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <HAL_ADC_ConfigChannel+0x398>)
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d19f      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x232>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cd2:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001cd6:	d19c      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001cd8:	682a      	ldr	r2, [r5, #0]
 8001cda:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <HAL_ADC_ConfigChannel+0x388>)
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d198      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x232>
 8001ce0:	688b      	ldr	r3, [r1, #8]
 8001ce2:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001ce6:	4333      	orrs	r3, r6
 8001ce8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cec:	608b      	str	r3, [r1, #8]
 8001cee:	e791      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x234>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	e78b      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x234>
  __HAL_LOCK(hadc);
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	e78c      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x23a>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d00:	2800      	cmp	r0, #0
 8001d02:	f47f aea9 	bne.w	8001a58 <HAL_ADC_ConfigChannel+0x78>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d06:	4618      	mov	r0, r3
 8001d08:	68a2      	ldr	r2, [r4, #8]
 8001d0a:	6821      	ldr	r1, [r4, #0]
 8001d0c:	f7ff fd24 	bl	8001758 <LL_ADC_SetChannelSamplingTime>
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d10:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d12:	682b      	ldr	r3, [r5, #0]
 8001d14:	6822      	ldr	r2, [r4, #0]
 8001d16:	68d9      	ldr	r1, [r3, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d18:	2e04      	cmp	r6, #4
 8001d1a:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8001d1e:	f43f aee1 	beq.w	8001ae4 <HAL_ADC_ConfigChannel+0x104>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d22:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8001d26:	0059      	lsls	r1, r3, #1
 8001d28:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(*preg,
 8001d2a:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8001d2e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001d32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d36:	408b      	lsls	r3, r1
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <HAL_ADC_ConfigChannel+0x39c>)
 8001d3c:	403a      	ands	r2, r7
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
 8001d44:	e688      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x78>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d46:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d4a:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8001d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d4e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001d52:	e6f4      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x15e>
 8001d54:	0007ffff 	.word	0x0007ffff
 8001d58:	407f0000 	.word	0x407f0000
 8001d5c:	80080000 	.word	0x80080000
 8001d60:	50040300 	.word	0x50040300
 8001d64:	c7520000 	.word	0xc7520000
 8001d68:	50040000 	.word	0x50040000
 8001d6c:	00030d40 	.word	0x00030d40
 8001d70:	20000000 	.word	0x20000000
 8001d74:	cb840000 	.word	0xcb840000
 8001d78:	80000001 	.word	0x80000001
 8001d7c:	03fff000 	.word	0x03fff000
 8001d80:	68c3      	ldr	r3, [r0, #12]
 8001d82:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001d8a:	e6e9      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x180>

08001d8c <ADC_Enable>:
{
 8001d8c:	b570      	push	{r4, r5, r6, lr}
 8001d8e:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d90:	6800      	ldr	r0, [r0, #0]
 8001d92:	f7ff fcf2 	bl	800177a <LL_ADC_IsEnabled>
 8001d96:	b108      	cbz	r0, 8001d9c <ADC_Enable+0x10>
  return HAL_OK;
 8001d98:	2000      	movs	r0, #0
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001d9c:	6822      	ldr	r2, [r4, #0]
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <ADC_Enable+0x68>)
 8001da0:	6891      	ldr	r1, [r2, #8]
 8001da2:	4219      	tst	r1, r3
 8001da4:	d009      	beq.n	8001dba <ADC_Enable+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001da8:	f043 0310 	orr.w	r3, r3, #16
 8001dac:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8001db6:	2001      	movs	r0, #1
 8001db8:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8001dba:	6893      	ldr	r3, [r2, #8]
 8001dbc:	4d0e      	ldr	r5, [pc, #56]	; (8001df8 <ADC_Enable+0x6c>)
 8001dbe:	402b      	ands	r3, r5
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001dc6:	f7ff fcad 	bl	8001724 <HAL_GetTick>
 8001dca:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dcc:	6820      	ldr	r0, [r4, #0]
 8001dce:	6803      	ldr	r3, [r0, #0]
 8001dd0:	07db      	lsls	r3, r3, #31
 8001dd2:	d4e1      	bmi.n	8001d98 <ADC_Enable+0xc>
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd4:	f7ff fcd1 	bl	800177a <LL_ADC_IsEnabled>
 8001dd8:	b928      	cbnz	r0, 8001de6 <ADC_Enable+0x5a>
        LL_ADC_Enable(hadc->Instance);
 8001dda:	6822      	ldr	r2, [r4, #0]
 8001ddc:	6893      	ldr	r3, [r2, #8]
 8001dde:	402b      	ands	r3, r5
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6093      	str	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001de6:	f7ff fc9d 	bl	8001724 <HAL_GetTick>
 8001dea:	1b80      	subs	r0, r0, r6
 8001dec:	2802      	cmp	r0, #2
 8001dee:	d9ed      	bls.n	8001dcc <ADC_Enable+0x40>
 8001df0:	e7d9      	b.n	8001da6 <ADC_Enable+0x1a>
 8001df2:	bf00      	nop
 8001df4:	8000003f 	.word	0x8000003f
 8001df8:	7fffffc0 	.word	0x7fffffc0

08001dfc <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001dfc:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <HAL_ADC_Start_DMA+0xe8>)
{
 8001dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e02:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e04:	6800      	ldr	r0, [r0, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
{
 8001e08:	460e      	mov	r6, r1
 8001e0a:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e0c:	f7ff fcb9 	bl	8001782 <LL_ADC_REG_IsConversionOngoing>
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d15f      	bne.n	8001ed4 <HAL_ADC_Start_DMA+0xd8>
    __HAL_LOCK(hadc);
 8001e14:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8001e18:	2a01      	cmp	r2, #1
 8001e1a:	d05b      	beq.n	8001ed4 <HAL_ADC_Start_DMA+0xd8>
 8001e1c:	f003 081f 	and.w	r8, r3, #31
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e20:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8001e24:	f04f 0301 	mov.w	r3, #1
 8001e28:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e2c:	bf9e      	ittt	ls
 8001e2e:	f240 2321 	movwls	r3, #545	; 0x221
 8001e32:	fa23 f308 	lsrls.w	r3, r3, r8
 8001e36:	43db      	mvnls	r3, r3
 8001e38:	f013 0501 	ands.w	r5, r3, #1
 8001e3c:	d144      	bne.n	8001ec8 <HAL_ADC_Start_DMA+0xcc>
      tmp_hal_status = ADC_Enable(hadc);
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f7ff ffa4 	bl	8001d8c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d13b      	bne.n	8001ec0 <HAL_ADC_Start_DMA+0xc4>
        ADC_STATE_CLR_SET(hadc->State,
 8001e48:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e4a:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8001e4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e58:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e5a:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_ADC_Start_DMA+0xec>)
 8001e5c:	4299      	cmp	r1, r3
 8001e5e:	d03c      	beq.n	8001eda <HAL_ADC_Start_DMA+0xde>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e66:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e68:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e6a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e6c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e70:	bf1c      	itt	ne
 8001e72:	6da3      	ldrne	r3, [r4, #88]	; 0x58
 8001e74:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8001e78:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <HAL_ADC_Start_DMA+0xf0>)
 8001e7c:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <HAL_ADC_Start_DMA+0xf4>)
 8001e80:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e82:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <HAL_ADC_Start_DMA+0xf8>)
 8001e84:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e86:	231c      	movs	r3, #28
 8001e88:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e90:	684b      	ldr	r3, [r1, #4]
 8001e92:	f043 0310 	orr.w	r3, r3, #16
 8001e96:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e98:	68cb      	ldr	r3, [r1, #12]
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ea0:	4632      	mov	r2, r6
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	3140      	adds	r1, #64	; 0x40
 8001ea6:	f000 fb33 	bl	8002510 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001eaa:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001eac:	6893      	ldr	r3, [r2, #8]
 8001eae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	6093      	str	r3, [r2, #8]
 8001ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8001ec0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8001ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UNLOCK(hadc);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8001ece:	2001      	movs	r0, #1
 8001ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 8001ed4:	2002      	movs	r0, #2
 8001ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eda:	f1b8 0f00 	cmp.w	r8, #0
 8001ede:	d0bf      	beq.n	8001e60 <HAL_ADC_Start_DMA+0x64>
 8001ee0:	e7c2      	b.n	8001e68 <HAL_ADC_Start_DMA+0x6c>
 8001ee2:	bf00      	nop
 8001ee4:	50040300 	.word	0x50040300
 8001ee8:	50040100 	.word	0x50040100
 8001eec:	0800195d 	.word	0x0800195d
 8001ef0:	08001951 	.word	0x08001951
 8001ef4:	080019c5 	.word	0x080019c5

08001ef8 <ADC_Disable>:
{
 8001ef8:	b538      	push	{r3, r4, r5, lr}
 8001efa:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001efc:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001efe:	6883      	ldr	r3, [r0, #8]
 8001f00:	f003 0302 	and.w	r3, r3, #2
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f04:	f7ff fc39 	bl	800177a <LL_ADC_IsEnabled>
 8001f08:	b908      	cbnz	r0, 8001f0e <ADC_Disable+0x16>
  return HAL_OK;
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1fb      	bne.n	8001f0a <ADC_Disable+0x12>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f12:	6822      	ldr	r2, [r4, #0]
 8001f14:	6893      	ldr	r3, [r2, #8]
 8001f16:	f003 030d 	and.w	r3, r3, #13
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d115      	bne.n	8001f4a <ADC_Disable+0x52>
  MODIFY_REG(ADCx->CR,
 8001f1e:	6893      	ldr	r3, [r2, #8]
 8001f20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f2e:	2303      	movs	r3, #3
 8001f30:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f32:	f7ff fbf7 	bl	8001724 <HAL_GetTick>
 8001f36:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	07db      	lsls	r3, r3, #31
 8001f3e:	d5e4      	bpl.n	8001f0a <ADC_Disable+0x12>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f40:	f7ff fbf0 	bl	8001724 <HAL_GetTick>
 8001f44:	1b40      	subs	r0, r0, r5
 8001f46:	2802      	cmp	r0, #2
 8001f48:	d9f6      	bls.n	8001f38 <ADC_Disable+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f4c:	f043 0310 	orr.w	r3, r3, #16
 8001f50:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	bd38      	pop	{r3, r4, r5, pc}

08001f5e <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f5e:	6880      	ldr	r0, [r0, #8]
}
 8001f60:	f000 0001 	and.w	r0, r0, #1
 8001f64:	4770      	bx	lr

08001f66 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f66:	6880      	ldr	r0, [r0, #8]
}
 8001f68:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f76:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001f7a:	2b01      	cmp	r3, #1
{
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8001f80:	d036      	beq.n	8001ff0 <HAL_ADCEx_Calibration_Start+0x80>
 8001f82:	2301      	movs	r3, #1
 8001f84:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001f88:	f7ff ffb6 	bl	8001ef8 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (tmp_hal_status == HAL_OK)
 8001f8e:	bb40      	cbnz	r0, 8001fe2 <HAL_ADCEx_Calibration_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 8001f90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f94:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001f98:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8001f9a:	f043 0302 	orr.w	r3, r3, #2
 8001f9e:	6563      	str	r3, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8001fa0:	6891      	ldr	r1, [r2, #8]
 8001fa2:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8001fa6:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001faa:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001fae:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001fb2:	430d      	orrs	r5, r1

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001fb4:	4912      	ldr	r1, [pc, #72]	; (8002000 <HAL_ADCEx_Calibration_Start+0x90>)
 8001fb6:	6095      	str	r5, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001fb8:	6893      	ldr	r3, [r2, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	da1a      	bge.n	8001ff4 <HAL_ADCEx_Calibration_Start+0x84>
      wait_loop_index++;
 8001fbe:	9b01      	ldr	r3, [sp, #4]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001fc4:	9b01      	ldr	r3, [sp, #4]
 8001fc6:	428b      	cmp	r3, r1
 8001fc8:	d9f6      	bls.n	8001fb8 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001fca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fcc:	f023 0312 	bic.w	r3, r3, #18
 8001fd0:	f043 0310 	orr.w	r3, r3, #16
 8001fd4:	6563      	str	r3, [r4, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

        return HAL_ERROR;
 8001fdc:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8001fde:	b003      	add	sp, #12
 8001fe0:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe2:	f043 0310 	orr.w	r3, r3, #16
 8001fe6:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return tmp_hal_status;
 8001fee:	e7f6      	b.n	8001fde <HAL_ADCEx_Calibration_Start+0x6e>
  __HAL_LOCK(hadc);
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	e7f4      	b.n	8001fde <HAL_ADCEx_Calibration_Start+0x6e>
    ADC_STATE_CLR_SET(hadc->State,
 8001ff4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ff6:	f023 0303 	bic.w	r3, r3, #3
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	e7f2      	b.n	8001fe6 <HAL_ADCEx_Calibration_Start+0x76>
 8002000:	000487ff 	.word	0x000487ff

08002004 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002004:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002006:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800200a:	2b01      	cmp	r3, #1
{
 800200c:	b09b      	sub	sp, #108	; 0x6c
 800200e:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002010:	d066      	beq.n	80020e0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 8002012:	2301      	movs	r3, #1
 8002014:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002018:	4b32      	ldr	r3, [pc, #200]	; (80020e4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 800201a:	6800      	ldr	r0, [r0, #0]
 800201c:	4298      	cmp	r0, r3
 800201e:	bf0c      	ite	eq
 8002020:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8002024:	2300      	movne	r3, #0
 8002026:	9301      	str	r3, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8002028:	9801      	ldr	r0, [sp, #4]
 800202a:	b940      	cbnz	r0, 800203e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800202c:	6d53      	ldr	r3, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800202e:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	6553      	str	r3, [r2, #84]	; 0x54

    return HAL_ERROR;
 8002038:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800203a:	b01b      	add	sp, #108	; 0x6c
 800203c:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800203e:	f7ff ff92 	bl	8001f66 <LL_ADC_REG_IsConversionOngoing>
 8002042:	4603      	mov	r3, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002044:	6810      	ldr	r0, [r2, #0]
 8002046:	f7ff ff8e 	bl	8001f66 <LL_ADC_REG_IsConversionOngoing>
 800204a:	2800      	cmp	r0, #0
 800204c:	d142      	bne.n	80020d4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800204e:	2b00      	cmp	r3, #0
 8002050:	d140      	bne.n	80020d4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002052:	680b      	ldr	r3, [r1, #0]
 8002054:	4c24      	ldr	r4, [pc, #144]	; (80020e8 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8002056:	b333      	cbz	r3, 80020a6 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002058:	68a3      	ldr	r3, [r4, #8]
 800205a:	6848      	ldr	r0, [r1, #4]
 800205c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002060:	4303      	orrs	r3, r0
 8002062:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8002066:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 800206a:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800206c:	481d      	ldr	r0, [pc, #116]	; (80020e4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 800206e:	f7ff ff76 	bl	8001f5e <LL_ADC_IsEnabled>
 8002072:	4603      	mov	r3, r0
 8002074:	481d      	ldr	r0, [pc, #116]	; (80020ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8002076:	f7ff ff72 	bl	8001f5e <LL_ADC_IsEnabled>
 800207a:	4303      	orrs	r3, r0
 800207c:	481c      	ldr	r0, [pc, #112]	; (80020f0 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 800207e:	f7ff ff6e 	bl	8001f5e <LL_ADC_IsEnabled>
 8002082:	4318      	orrs	r0, r3
 8002084:	d004      	beq.n	8002090 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002086:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002088:	2300      	movs	r3, #0
 800208a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 800208e:	e7d4      	b.n	800203a <HAL_ADCEx_MultiModeConfigChannel+0x36>
        MODIFY_REG(tmpADC_Common->CCR,
 8002090:	680b      	ldr	r3, [r1, #0]
 8002092:	68a5      	ldr	r5, [r4, #8]
 8002094:	6889      	ldr	r1, [r1, #8]
 8002096:	430b      	orrs	r3, r1
 8002098:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 800209c:	f021 010f 	bic.w	r1, r1, #15
 80020a0:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020a2:	60a3      	str	r3, [r4, #8]
 80020a4:	e7f0      	b.n	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020a6:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020a8:	480e      	ldr	r0, [pc, #56]	; (80020e4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80020ae:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020b0:	f7ff ff55 	bl	8001f5e <LL_ADC_IsEnabled>
 80020b4:	4603      	mov	r3, r0
 80020b6:	480d      	ldr	r0, [pc, #52]	; (80020ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 80020b8:	f7ff ff51 	bl	8001f5e <LL_ADC_IsEnabled>
 80020bc:	4303      	orrs	r3, r0
 80020be:	480c      	ldr	r0, [pc, #48]	; (80020f0 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 80020c0:	f7ff ff4d 	bl	8001f5e <LL_ADC_IsEnabled>
 80020c4:	4318      	orrs	r0, r3
 80020c6:	d1de      	bne.n	8002086 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020c8:	68a3      	ldr	r3, [r4, #8]
 80020ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020ce:	f023 030f 	bic.w	r3, r3, #15
 80020d2:	e7e6      	b.n	80020a2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80020d6:	f043 0320 	orr.w	r3, r3, #32
 80020da:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80020dc:	2001      	movs	r0, #1
 80020de:	e7d3      	b.n	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 80020e0:	2002      	movs	r0, #2
 80020e2:	e7aa      	b.n	800203a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80020e4:	50040000 	.word	0x50040000
 80020e8:	50040300 	.word	0x50040300
 80020ec:	50040100 	.word	0x50040100
 80020f0:	50040200 	.word	0x50040200

080020f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80020f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	0c1b      	lsrs	r3, r3, #16
 8002100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	0200      	lsls	r0, r0, #8
 8002106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800210e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002110:	60d3      	str	r3, [r2, #12]
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211a:	b530      	push	{r4, r5, lr}
 800211c:	68dc      	ldr	r4, [r3, #12]
 800211e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002122:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002128:	2b04      	cmp	r3, #4
 800212a:	bf28      	it	cs
 800212c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 0501 	mov.w	r5, #1
 8002134:	fa05 f303 	lsl.w	r3, r5, r3
 8002138:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213c:	bf8c      	ite	hi
 800213e:	3c03      	subhi	r4, #3
 8002140:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002142:	4019      	ands	r1, r3
 8002144:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002146:	fa05 f404 	lsl.w	r4, r5, r4
 800214a:	3c01      	subs	r4, #1
 800214c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800214e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	ea42 0201 	orr.w	r2, r2, r1
 8002154:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	bfad      	iteet	ge
 800215a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	f000 000f 	andlt.w	r0, r0, #15
 8002162:	4b06      	ldrlt	r3, [pc, #24]	; (800217c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002168:	bfb5      	itete	lt
 800216a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002174:	bd30      	pop	{r4, r5, pc}
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00
 800217c:	e000ed14 	.word	0xe000ed14

08002180 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002180:	2800      	cmp	r0, #0
 8002182:	db08      	blt.n	8002196 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002184:	0942      	lsrs	r2, r0, #5
 8002186:	2301      	movs	r3, #1
 8002188:	f000 001f 	and.w	r0, r0, #31
 800218c:	fa03 f000 	lsl.w	r0, r3, r0
 8002190:	4b01      	ldr	r3, [pc, #4]	; (8002198 <HAL_NVIC_EnableIRQ+0x18>)
 8002192:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100

0800219c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800219c:	3801      	subs	r0, #1
 800219e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80021a2:	d20a      	bcs.n	80021ba <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a6:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021aa:	21f0      	movs	r1, #240	; 0xf0
 80021ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80021ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021c8:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 80021ca:	4604      	mov	r4, r0
 80021cc:	b168      	cbz	r0, 80021ea <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021ce:	7903      	ldrb	r3, [r0, #4]
 80021d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021d4:	b913      	cbnz	r3, 80021dc <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021d6:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021d8:	f7fe feec 	bl	8000fb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021dc:	2302      	movs	r3, #2
 80021de:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021e0:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021e2:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021e4:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80021e6:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80021e8:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80021ea:	2001      	movs	r0, #1
}
 80021ec:	bd10      	pop	{r4, pc}
	...

080021f0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f2:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021f4:	7940      	ldrb	r0, [r0, #5]
 80021f6:	2801      	cmp	r0, #1
{
 80021f8:	460e      	mov	r6, r1
 80021fa:	f04f 0002 	mov.w	r0, #2
 80021fe:	4611      	mov	r1, r2
 8002200:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 8002202:	d054      	beq.n	80022ae <HAL_DAC_Start_DMA+0xbe>
 8002204:	2401      	movs	r4, #1
 8002206:	716c      	strb	r4, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002208:	7128      	strb	r0, [r5, #4]
 800220a:	682c      	ldr	r4, [r5, #0]

  if (Channel == DAC_CHANNEL_1)
 800220c:	b9e6      	cbnz	r6, 8002248 <HAL_DAC_Start_DMA+0x58>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800220e:	68a8      	ldr	r0, [r5, #8]
 8002210:	4f27      	ldr	r7, [pc, #156]	; (80022b0 <HAL_DAC_Start_DMA+0xc0>)
 8002212:	62c7      	str	r7, [r0, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002214:	4f27      	ldr	r7, [pc, #156]	; (80022b4 <HAL_DAC_Start_DMA+0xc4>)
 8002216:	6307      	str	r7, [r0, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002218:	4f27      	ldr	r7, [pc, #156]	; (80022b8 <HAL_DAC_Start_DMA+0xc8>)
 800221a:	6347      	str	r7, [r0, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800221c:	6827      	ldr	r7, [r4, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800221e:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002220:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 8002224:	6027      	str	r7, [r4, #0]
    switch (Alignment)
 8002226:	d009      	beq.n	800223c <HAL_DAC_Start_DMA+0x4c>
 8002228:	2a08      	cmp	r2, #8
 800222a:	d00a      	beq.n	8002242 <HAL_DAC_Start_DMA+0x52>
 800222c:	2a00      	cmp	r2, #0
 800222e:	d13c      	bne.n	80022aa <HAL_DAC_Start_DMA+0xba>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002230:	f104 0208 	add.w	r2, r4, #8

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002234:	6827      	ldr	r7, [r4, #0]
 8002236:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 800223a:	e01a      	b.n	8002272 <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800223c:	f104 020c 	add.w	r2, r4, #12
        break;
 8002240:	e7f8      	b.n	8002234 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002242:	f104 0210 	add.w	r2, r4, #16
        break;
 8002246:	e7f5      	b.n	8002234 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002248:	68e8      	ldr	r0, [r5, #12]
 800224a:	4f1c      	ldr	r7, [pc, #112]	; (80022bc <HAL_DAC_Start_DMA+0xcc>)
 800224c:	62c7      	str	r7, [r0, #44]	; 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800224e:	4f1c      	ldr	r7, [pc, #112]	; (80022c0 <HAL_DAC_Start_DMA+0xd0>)
 8002250:	6307      	str	r7, [r0, #48]	; 0x30
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002252:	4f1c      	ldr	r7, [pc, #112]	; (80022c4 <HAL_DAC_Start_DMA+0xd4>)
 8002254:	6347      	str	r7, [r0, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002256:	6827      	ldr	r7, [r4, #0]
    switch (Alignment)
 8002258:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800225a:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800225e:	6027      	str	r7, [r4, #0]
    switch (Alignment)
 8002260:	d016      	beq.n	8002290 <HAL_DAC_Start_DMA+0xa0>
 8002262:	2a08      	cmp	r2, #8
 8002264:	d017      	beq.n	8002296 <HAL_DAC_Start_DMA+0xa6>
 8002266:	b9f2      	cbnz	r2, 80022a6 <HAL_DAC_Start_DMA+0xb6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002268:	f104 0214 	add.w	r2, r4, #20
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800226c:	6827      	ldr	r7, [r4, #0]
 800226e:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002272:	6027      	str	r7, [r4, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002274:	f000 f94c 	bl	8002510 <HAL_DMA_Start_IT>
    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002278:	2300      	movs	r3, #0
 800227a:	716b      	strb	r3, [r5, #5]

  if (status == HAL_OK)
 800227c:	b970      	cbnz	r0, 800229c <HAL_DAC_Start_DMA+0xac>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800227e:	682b      	ldr	r3, [r5, #0]
 8002280:	f006 0110 	and.w	r1, r6, #16
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2601      	movs	r6, #1
 8002288:	408e      	lsls	r6, r1
 800228a:	4316      	orrs	r6, r2
 800228c:	601e      	str	r6, [r3, #0]
 800228e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002290:	f104 0218 	add.w	r2, r4, #24
        break;
 8002294:	e7ea      	b.n	800226c <HAL_DAC_Start_DMA+0x7c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002296:	f104 021c 	add.w	r2, r4, #28
        break;
 800229a:	e7e7      	b.n	800226c <HAL_DAC_Start_DMA+0x7c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800229c:	692b      	ldr	r3, [r5, #16]
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	612b      	str	r3, [r5, #16]
 80022a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpreg = 0U;
 80022a6:	2200      	movs	r2, #0
 80022a8:	e7e0      	b.n	800226c <HAL_DAC_Start_DMA+0x7c>
 80022aa:	4632      	mov	r2, r6
 80022ac:	e7c2      	b.n	8002234 <HAL_DAC_Start_DMA+0x44>
  }

  /* Return function status */
  return status;
}
 80022ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022b0:	080022cb 	.word	0x080022cb
 80022b4:	080022dd 	.word	0x080022dd
 80022b8:	080022e9 	.word	0x080022e9
 80022bc:	08002419 	.word	0x08002419
 80022c0:	08002429 	.word	0x08002429
 80022c4:	08002433 	.word	0x08002433

080022c8 <HAL_DAC_ConvCpltCallbackCh1>:
 80022c8:	4770      	bx	lr

080022ca <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80022ca:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022cc:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80022ce:	4620      	mov	r0, r4
 80022d0:	f7ff fffa 	bl	80022c8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80022d4:	2301      	movs	r3, #1
 80022d6:	7123      	strb	r3, [r4, #4]
 80022d8:	bd10      	pop	{r4, pc}

080022da <HAL_DAC_ConvHalfCpltCallbackCh1>:
 80022da:	4770      	bx	lr

080022dc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80022dc:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80022de:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80022e0:	f7ff fffb 	bl	80022da <HAL_DAC_ConvHalfCpltCallbackCh1>
 80022e4:	bd08      	pop	{r3, pc}

080022e6 <HAL_DAC_ErrorCallbackCh1>:
 80022e6:	4770      	bx	lr

080022e8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80022e8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ea:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80022ec:	6923      	ldr	r3, [r4, #16]
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7ff fff6 	bl	80022e6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80022fa:	2301      	movs	r3, #1
 80022fc:	7123      	strb	r3, [r4, #4]
 80022fe:	bd10      	pop	{r4, pc}

08002300 <HAL_DAC_ConfigChannel>:
{
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 8002302:	7943      	ldrb	r3, [r0, #5]
 8002304:	2b01      	cmp	r3, #1
{
 8002306:	4604      	mov	r4, r0
 8002308:	460d      	mov	r5, r1
 800230a:	4616      	mov	r6, r2
 800230c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8002310:	d063      	beq.n	80023da <HAL_DAC_ConfigChannel+0xda>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002312:	680b      	ldr	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002314:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8002316:	2201      	movs	r2, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002318:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 800231a:	7162      	strb	r2, [r4, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800231c:	d125      	bne.n	800236a <HAL_DAC_ConfigChannel+0x6a>
    if (Channel == DAC_CHANNEL_1)
 800231e:	2e00      	cmp	r6, #0
 8002320:	d16c      	bne.n	80023fc <HAL_DAC_ConfigChannel+0xfc>
      tickstart = HAL_GetTick();
 8002322:	f7ff f9ff 	bl	8001724 <HAL_GetTick>
 8002326:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	041b      	lsls	r3, r3, #16
 800232e:	d455      	bmi.n	80023dc <HAL_DAC_ConfigChannel+0xdc>
      HAL_Delay(1);
 8002330:	2001      	movs	r0, #1
 8002332:	f7ff f9fd 	bl	8001730 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	69aa      	ldr	r2, [r5, #24]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800233c:	6821      	ldr	r1, [r4, #0]
 800233e:	f006 0010 	and.w	r0, r6, #16
 8002342:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002344:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002348:	4083      	lsls	r3, r0
 800234a:	ea22 0203 	bic.w	r2, r2, r3
 800234e:	69eb      	ldr	r3, [r5, #28]
 8002350:	4083      	lsls	r3, r0
 8002352:	431a      	orrs	r2, r3
 8002354:	648a      	str	r2, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002356:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002358:	22ff      	movs	r2, #255	; 0xff
 800235a:	4082      	lsls	r2, r0
 800235c:	ea23 0302 	bic.w	r3, r3, r2
 8002360:	6a2a      	ldr	r2, [r5, #32]
 8002362:	fa02 f000 	lsl.w	r0, r2, r0
 8002366:	4303      	orrs	r3, r0
 8002368:	64cb      	str	r3, [r1, #76]	; 0x4c
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800236a:	692b      	ldr	r3, [r5, #16]
 800236c:	2b01      	cmp	r3, #1
 800236e:	f006 0210 	and.w	r2, r6, #16
 8002372:	6823      	ldr	r3, [r4, #0]
 8002374:	d108      	bne.n	8002388 <HAL_DAC_ConfigChannel+0x88>
  tmpreg1 = hdac->Instance->CCR;
 8002376:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002378:	201f      	movs	r0, #31
 800237a:	4090      	lsls	r0, r2
 800237c:	ea21 0000 	bic.w	r0, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002380:	6969      	ldr	r1, [r5, #20]
 8002382:	4091      	lsls	r1, r2
 8002384:	4301      	orrs	r1, r0
  hdac->Instance->CCR = tmpreg1;
 8002386:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg1 = hdac->Instance->MCR;
 8002388:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800238a:	68ae      	ldr	r6, [r5, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800238c:	2007      	movs	r0, #7
 800238e:	4090      	lsls	r0, r2
 8002390:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002394:	6829      	ldr	r1, [r5, #0]
 8002396:	4331      	orrs	r1, r6
 8002398:	68ee      	ldr	r6, [r5, #12]
 800239a:	4331      	orrs	r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800239c:	4091      	lsls	r1, r2
 800239e:	4301      	orrs	r1, r0
  hdac->Instance->MCR = tmpreg1;
 80023a0:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80023a2:	6819      	ldr	r1, [r3, #0]
 80023a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023a8:	4090      	lsls	r0, r2
 80023aa:	ea21 0100 	bic.w	r1, r1, r0
 80023ae:	6019      	str	r1, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 80023b0:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80023b2:	f640 70fc 	movw	r0, #4092	; 0xffc
 80023b6:	4090      	lsls	r0, r2
 80023b8:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023bc:	6869      	ldr	r1, [r5, #4]
 80023be:	4091      	lsls	r1, r2
 80023c0:	4301      	orrs	r1, r0
  hdac->Instance->CR = tmpreg1;
 80023c2:	6019      	str	r1, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	20c0      	movs	r0, #192	; 0xc0
 80023c8:	fa00 f202 	lsl.w	r2, r0, r2
 80023cc:	ea21 0202 	bic.w	r2, r1, r2
 80023d0:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hdac);
 80023d2:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80023d4:	2301      	movs	r3, #1
 80023d6:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80023d8:	7160      	strb	r0, [r4, #5]
}
 80023da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80023dc:	f7ff f9a2 	bl	8001724 <HAL_GetTick>
 80023e0:	1bc0      	subs	r0, r0, r7
 80023e2:	2801      	cmp	r0, #1
 80023e4:	d9a0      	bls.n	8002328 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80023e6:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80023e8:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80023ea:	f043 0308 	orr.w	r3, r3, #8
 80023ee:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80023f0:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80023f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80023f4:	f7ff f996 	bl	8001724 <HAL_GetTick>
 80023f8:	2801      	cmp	r0, #1
 80023fa:	d8f4      	bhi.n	80023e6 <HAL_DAC_ConfigChannel+0xe6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002400:	2b00      	cmp	r3, #0
 8002402:	dbf7      	blt.n	80023f4 <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1U);
 8002404:	2001      	movs	r0, #1
 8002406:	f7ff f993 	bl	8001730 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	69aa      	ldr	r2, [r5, #24]
 800240e:	645a      	str	r2, [r3, #68]	; 0x44
 8002410:	e794      	b.n	800233c <HAL_DAC_ConfigChannel+0x3c>

08002412 <HAL_DACEx_ConvCpltCallbackCh2>:
 8002412:	4770      	bx	lr

08002414 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8002414:	4770      	bx	lr

08002416 <HAL_DACEx_ErrorCallbackCh2>:
 8002416:	4770      	bx	lr

08002418 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002418:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800241a:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800241c:	4620      	mov	r0, r4
 800241e:	f7ff fff8 	bl	8002412 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002422:	2301      	movs	r3, #1
 8002424:	7123      	strb	r3, [r4, #4]
 8002426:	bd10      	pop	{r4, pc}

08002428 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002428:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800242a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800242c:	f7ff fff2 	bl	8002414 <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8002430:	bd08      	pop	{r3, pc}

08002432 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002432:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002434:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002436:	6923      	ldr	r3, [r4, #16]
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800243e:	4620      	mov	r0, r4
 8002440:	f7ff ffe9 	bl	8002416 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002444:	2301      	movs	r3, #1
 8002446:	7123      	strb	r3, [r4, #4]
 8002448:	bd10      	pop	{r4, pc}
	...

0800244c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800244c:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800244e:	2800      	cmp	r0, #0
 8002450:	d04e      	beq.n	80024f0 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002452:	6801      	ldr	r1, [r0, #0]
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_DMA_Init+0xa8>)
 8002456:	4299      	cmp	r1, r3
 8002458:	f04f 0414 	mov.w	r4, #20
 800245c:	d840      	bhi.n	80024e0 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800245e:	4a26      	ldr	r2, [pc, #152]	; (80024f8 <HAL_DMA_Init+0xac>)
 8002460:	440a      	add	r2, r1
 8002462:	fbb2 f2f4 	udiv	r2, r2, r4
 8002466:	0092      	lsls	r2, r2, #2
 8002468:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800246a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 800246e:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002470:	2302      	movs	r3, #2
 8002472:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002476:	6884      	ldr	r4, [r0, #8]
 8002478:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247a:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 800247c:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 800247e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002480:	432b      	orrs	r3, r5
 8002482:	6945      	ldr	r5, [r0, #20]
 8002484:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002486:	6985      	ldr	r5, [r0, #24]
 8002488:	432b      	orrs	r3, r5
 800248a:	69c5      	ldr	r5, [r0, #28]
 800248c:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800248e:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002490:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002494:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8002498:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800249a:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800249c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80024a0:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80024a2:	d014      	beq.n	80024ce <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80024a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <HAL_DMA_Init+0xb0>)
 80024a8:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024aa:	bf0c      	ite	eq
 80024ac:	4914      	ldreq	r1, [pc, #80]	; (8002500 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024ae:	4915      	ldrne	r1, [pc, #84]	; (8002504 <HAL_DMA_Init+0xb8>)
 80024b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80024b2:	680a      	ldr	r2, [r1, #0]
 80024b4:	f003 031c 	and.w	r3, r3, #28
 80024b8:	240f      	movs	r4, #15
 80024ba:	409c      	lsls	r4, r3
 80024bc:	ea22 0204 	bic.w	r2, r2, r4
 80024c0:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024c2:	6842      	ldr	r2, [r0, #4]
 80024c4:	680c      	ldr	r4, [r1, #0]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	4323      	orrs	r3, r4
 80024cc:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ce:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024d0:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024d2:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024d4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 80024d8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 80024dc:	4618      	mov	r0, r3
 80024de:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_DMA_Init+0xbc>)
 80024e2:	440b      	add	r3, r1
 80024e4:	fbb3 f3f4 	udiv	r3, r3, r4
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_DMA_Init+0xc0>)
 80024ee:	e7be      	b.n	800246e <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 80024f0:	2001      	movs	r0, #1
}
 80024f2:	bd30      	pop	{r4, r5, pc}
 80024f4:	40020407 	.word	0x40020407
 80024f8:	bffdfff8 	.word	0xbffdfff8
 80024fc:	40020000 	.word	0x40020000
 8002500:	400200a8 	.word	0x400200a8
 8002504:	400204a8 	.word	0x400204a8
 8002508:	bffdfbf8 	.word	0xbffdfbf8
 800250c:	40020400 	.word	0x40020400

08002510 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002510:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002512:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8002516:	2c01      	cmp	r4, #1
 8002518:	d038      	beq.n	800258c <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 800251a:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 800251e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002520:	b2ed      	uxtb	r5, r5
 8002522:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8002524:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8002528:	f04f 0600 	mov.w	r6, #0
 800252c:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8002530:	d12a      	bne.n	8002588 <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002532:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002536:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002538:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800253a:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800253c:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800253e:	f026 0601 	bic.w	r6, r6, #1
 8002542:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002544:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8002546:	f006 061c 	and.w	r6, r6, #28
 800254a:	40b5      	lsls	r5, r6
 800254c:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800254e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002550:	6883      	ldr	r3, [r0, #8]
 8002552:	6805      	ldr	r5, [r0, #0]
 8002554:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8002556:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002558:	bf0b      	itete	eq
 800255a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800255c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800255e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002560:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002562:	b14b      	cbz	r3, 8002578 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800256a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800256c:	682b      	ldr	r3, [r5, #0]
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002574:	2000      	movs	r0, #0
 8002576:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	f023 0304 	bic.w	r3, r3, #4
 800257e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	f043 030a 	orr.w	r3, r3, #10
 8002586:	e7f0      	b.n	800256a <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 8002588:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 800258c:	2002      	movs	r0, #2
}
 800258e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002590 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002590:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002592:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8002594:	6803      	ldr	r3, [r0, #0]
{
 8002596:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002598:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800259c:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800259e:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025a0:	2404      	movs	r4, #4
 80025a2:	4094      	lsls	r4, r2
 80025a4:	4226      	tst	r6, r4
 80025a6:	d00e      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x36>
 80025a8:	f015 0f04 	tst.w	r5, #4
 80025ac:	d00b      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025b2:	bf5e      	ittt	pl
 80025b4:	681a      	ldrpl	r2, [r3, #0]
 80025b6:	f022 0204 	bicpl.w	r2, r2, #4
 80025ba:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80025bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80025be:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80025c0:	b373      	cbz	r3, 8002620 <HAL_DMA_IRQHandler+0x90>
}
 80025c2:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80025c4:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80025c6:	2402      	movs	r4, #2
 80025c8:	4094      	lsls	r4, r2
 80025ca:	4226      	tst	r6, r4
 80025cc:	d012      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x64>
 80025ce:	f015 0f02 	tst.w	r5, #2
 80025d2:	d00f      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	0695      	lsls	r5, r2, #26
 80025d8:	d406      	bmi.n	80025e8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	f022 020a 	bic.w	r2, r2, #10
 80025e0:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80025e8:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80025ea:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80025ec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 80025f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80025f2:	e7e5      	b.n	80025c0 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80025f4:	2408      	movs	r4, #8
 80025f6:	4094      	lsls	r4, r2
 80025f8:	4234      	tst	r4, r6
 80025fa:	d011      	beq.n	8002620 <HAL_DMA_IRQHandler+0x90>
 80025fc:	072c      	lsls	r4, r5, #28
 80025fe:	d50f      	bpl.n	8002620 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002600:	681c      	ldr	r4, [r3, #0]
 8002602:	f024 040e 	bic.w	r4, r4, #14
 8002606:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002608:	2301      	movs	r3, #1
 800260a:	fa03 f202 	lsl.w	r2, r3, r2
 800260e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002610:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002612:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002616:	2300      	movs	r3, #0
 8002618:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800261c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800261e:	e7cf      	b.n	80025c0 <HAL_DMA_IRQHandler+0x30>
}
 8002620:	bc70      	pop	{r4, r5, r6}
 8002622:	4770      	bx	lr

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002628:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80027d8 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002630:	4c67      	ldr	r4, [pc, #412]	; (80027d0 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002632:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8002634:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002636:	9a01      	ldr	r2, [sp, #4]
 8002638:	40da      	lsrs	r2, r3
 800263a:	d102      	bne.n	8002642 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 800263c:	b005      	add	sp, #20
 800263e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002642:	2701      	movs	r7, #1
    if (iocurrent != 0x00u)
 8002644:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002646:	409f      	lsls	r7, r3
    if (iocurrent != 0x00u)
 8002648:	ea12 0e07 	ands.w	lr, r2, r7
 800264c:	f000 80b1 	beq.w	80027b2 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002650:	684a      	ldr	r2, [r1, #4]
 8002652:	f022 0810 	bic.w	r8, r2, #16
 8002656:	f108 35ff 	add.w	r5, r8, #4294967295
 800265a:	2d01      	cmp	r5, #1
 800265c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002660:	d812      	bhi.n	8002688 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR;
 8002662:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002664:	2503      	movs	r5, #3
 8002666:	fa05 f50c 	lsl.w	r5, r5, ip
 800266a:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800266e:	68cd      	ldr	r5, [r1, #12]
 8002670:	fa05 f50c 	lsl.w	r5, r5, ip
 8002674:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002676:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002678:	6846      	ldr	r6, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800267a:	f3c2 1500 	ubfx	r5, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800267e:	ea26 0607 	bic.w	r6, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002682:	409d      	lsls	r5, r3
 8002684:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8002686:	6045      	str	r5, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002688:	f002 0603 	and.w	r6, r2, #3
 800268c:	2e03      	cmp	r6, #3
 800268e:	d107      	bne.n	80026a0 <HAL_GPIO_Init+0x7c>
        temp = GPIOx->ASCR;
 8002690:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002692:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002696:	f3c2 05c0 	ubfx	r5, r2, #3, #1
 800269a:	409d      	lsls	r5, r3
 800269c:	432f      	orrs	r7, r5
        GPIOx->ASCR = temp;
 800269e:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026a0:	2503      	movs	r5, #3
      temp = GPIOx->PUPDR;
 80026a2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026a4:	fa05 f50c 	lsl.w	r5, r5, ip
 80026a8:	43ed      	mvns	r5, r5
 80026aa:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026ae:	688f      	ldr	r7, [r1, #8]
 80026b0:	fa07 f70c 	lsl.w	r7, r7, ip
 80026b4:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b8:	f1b8 0f02 	cmp.w	r8, #2
      GPIOx->PUPDR = temp;
 80026bc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026be:	d116      	bne.n	80026ee <HAL_GPIO_Init+0xca>
        temp = GPIOx->AFR[position >> 3u];
 80026c0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80026c4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026c8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80026cc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026d0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80026d4:	f04f 080f 	mov.w	r8, #15
 80026d8:	fa08 f80b 	lsl.w	r8, r8, fp
 80026dc:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026e0:	690f      	ldr	r7, [r1, #16]
 80026e2:	fa07 f70b 	lsl.w	r7, r7, fp
 80026e6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 80026ea:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80026ee:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026f0:	fa06 f60c 	lsl.w	r6, r6, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026f4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026f6:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 80026f8:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026fa:	00d5      	lsls	r5, r2, #3
 80026fc:	d559      	bpl.n	80027b2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fe:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002702:	f045 0501 	orr.w	r5, r5, #1
 8002706:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 800270a:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 800270e:	f023 0603 	bic.w	r6, r3, #3
 8002712:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002716:	f005 0501 	and.w	r5, r5, #1
 800271a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800271e:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002720:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002724:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002726:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002728:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800272c:	270f      	movs	r7, #15
 800272e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002732:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002736:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800273a:	d03c      	beq.n	80027b6 <HAL_GPIO_Init+0x192>
 800273c:	4d25      	ldr	r5, [pc, #148]	; (80027d4 <HAL_GPIO_Init+0x1b0>)
 800273e:	42a8      	cmp	r0, r5
 8002740:	d03b      	beq.n	80027ba <HAL_GPIO_Init+0x196>
 8002742:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002746:	42a8      	cmp	r0, r5
 8002748:	d039      	beq.n	80027be <HAL_GPIO_Init+0x19a>
 800274a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800274e:	42a8      	cmp	r0, r5
 8002750:	d037      	beq.n	80027c2 <HAL_GPIO_Init+0x19e>
 8002752:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002756:	42a8      	cmp	r0, r5
 8002758:	d035      	beq.n	80027c6 <HAL_GPIO_Init+0x1a2>
 800275a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800275e:	42a8      	cmp	r0, r5
 8002760:	d033      	beq.n	80027ca <HAL_GPIO_Init+0x1a6>
 8002762:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002766:	42a8      	cmp	r0, r5
 8002768:	bf14      	ite	ne
 800276a:	2507      	movne	r5, #7
 800276c:	2506      	moveq	r5, #6
 800276e:	fa05 f50c 	lsl.w	r5, r5, ip
 8002772:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002774:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8002776:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002778:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800277c:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 800277e:	bf54      	ite	pl
 8002780:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002782:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8002786:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8002788:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800278a:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 800278c:	bf54      	ite	pl
 800278e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002790:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8002794:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8002796:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002798:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 800279a:	bf54      	ite	pl
 800279c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800279e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80027a2:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80027a4:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027a6:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80027a8:	bf54      	ite	pl
 80027aa:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80027ac:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80027b0:	60e5      	str	r5, [r4, #12]
    position++;
 80027b2:	3301      	adds	r3, #1
 80027b4:	e73f      	b.n	8002636 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027b6:	2500      	movs	r5, #0
 80027b8:	e7d9      	b.n	800276e <HAL_GPIO_Init+0x14a>
 80027ba:	2501      	movs	r5, #1
 80027bc:	e7d7      	b.n	800276e <HAL_GPIO_Init+0x14a>
 80027be:	2502      	movs	r5, #2
 80027c0:	e7d5      	b.n	800276e <HAL_GPIO_Init+0x14a>
 80027c2:	2503      	movs	r5, #3
 80027c4:	e7d3      	b.n	800276e <HAL_GPIO_Init+0x14a>
 80027c6:	2504      	movs	r5, #4
 80027c8:	e7d1      	b.n	800276e <HAL_GPIO_Init+0x14a>
 80027ca:	2505      	movs	r5, #5
 80027cc:	e7cf      	b.n	800276e <HAL_GPIO_Init+0x14a>
 80027ce:	bf00      	nop
 80027d0:	40010400 	.word	0x40010400
 80027d4:	48000400 	.word	0x48000400
 80027d8:	40021000 	.word	0x40021000

080027dc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027dc:	6903      	ldr	r3, [r0, #16]
 80027de:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80027e0:	bf14      	ite	ne
 80027e2:	2001      	movne	r0, #1
 80027e4:	2000      	moveq	r0, #0
 80027e6:	4770      	bx	lr

080027e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e8:	b10a      	cbz	r2, 80027ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ea:	6181      	str	r1, [r0, #24]
 80027ec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ee:	6281      	str	r1, [r0, #40]	; 0x28
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027f4:	4b02      	ldr	r3, [pc, #8]	; (8002800 <HAL_PWREx_GetVoltageRange+0xc>)
 80027f6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80027f8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40007000 	.word	0x40007000

08002804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002806:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002808:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800280c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002810:	d11c      	bne.n	800284c <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002812:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002816:	d015      	beq.n	8002844 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800281e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002822:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002824:	4a10      	ldr	r2, [pc, #64]	; (8002868 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8002826:	6811      	ldr	r1, [r2, #0]
 8002828:	2232      	movs	r2, #50	; 0x32
 800282a:	434a      	muls	r2, r1
 800282c:	490f      	ldr	r1, [pc, #60]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x68>)
 800282e:	fbb2 f2f1 	udiv	r2, r2, r1
 8002832:	4619      	mov	r1, r3
 8002834:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002836:	6958      	ldr	r0, [r3, #20]
 8002838:	0540      	lsls	r0, r0, #21
 800283a:	d500      	bpl.n	800283e <HAL_PWREx_ControlVoltageScaling+0x3a>
 800283c:	b922      	cbnz	r2, 8002848 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800283e:	694b      	ldr	r3, [r1, #20]
 8002840:	055b      	lsls	r3, r3, #21
 8002842:	d40d      	bmi.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002844:	2000      	movs	r0, #0
 8002846:	4770      	bx	lr
        wait_loop_index--;
 8002848:	3a01      	subs	r2, #1
 800284a:	e7f4      	b.n	8002836 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800284c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002850:	bf1f      	itttt	ne
 8002852:	681a      	ldrne	r2, [r3, #0]
 8002854:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8002858:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 800285c:	601a      	strne	r2, [r3, #0]
 800285e:	e7f1      	b.n	8002844 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8002860:	2003      	movs	r0, #3
}
 8002862:	4770      	bx	lr
 8002864:	40007000 	.word	0x40007000
 8002868:	20000000 	.word	0x20000000
 800286c:	000f4240 	.word	0x000f4240

08002870 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002870:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002872:	4d1e      	ldr	r5, [pc, #120]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002874:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002876:	00da      	lsls	r2, r3, #3
{
 8002878:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800287a:	d518      	bpl.n	80028ae <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800287c:	f7ff ffba 	bl	80027f4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002880:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002884:	d123      	bne.n	80028ce <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002886:	2c80      	cmp	r4, #128	; 0x80
 8002888:	d929      	bls.n	80028de <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800288a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800288c:	bf8c      	ite	hi
 800288e:	2002      	movhi	r0, #2
 8002890:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002892:	4a17      	ldr	r2, [pc, #92]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002894:	6813      	ldr	r3, [r2, #0]
 8002896:	f023 0307 	bic.w	r3, r3, #7
 800289a:	4303      	orrs	r3, r0
 800289c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800289e:	6813      	ldr	r3, [r2, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80028a4:	1a18      	subs	r0, r3, r0
 80028a6:	bf18      	it	ne
 80028a8:	2001      	movne	r0, #1
 80028aa:	b003      	add	sp, #12
 80028ac:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b4:	65ab      	str	r3, [r5, #88]	; 0x58
 80028b6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80028c0:	f7ff ff98 	bl	80027f4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80028c4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80028c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ca:	65ab      	str	r3, [r5, #88]	; 0x58
 80028cc:	e7d8      	b.n	8002880 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80028ce:	2c80      	cmp	r4, #128	; 0x80
 80028d0:	d807      	bhi.n	80028e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80028d2:	d008      	beq.n	80028e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80028d4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80028d8:	4258      	negs	r0, r3
 80028da:	4158      	adcs	r0, r3
 80028dc:	e7d9      	b.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028de:	2000      	movs	r0, #0
 80028e0:	e7d7      	b.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80028e2:	2003      	movs	r0, #3
 80028e4:	e7d5      	b.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80028e6:	2002      	movs	r0, #2
 80028e8:	e7d3      	b.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40022000 	.word	0x40022000

080028f4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f4:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_RCC_GetSysClockFreq+0x8c>)
 80028f6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028fa:	f012 020c 	ands.w	r2, r2, #12
 80028fe:	d005      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x18>
 8002900:	2a0c      	cmp	r2, #12
 8002902:	d115      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002904:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002908:	2901      	cmp	r1, #1
 800290a:	d118      	bne.n	800293e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800290c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800290e:	481d      	ldr	r0, [pc, #116]	; (8002984 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002910:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002912:	bf55      	itete	pl
 8002914:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002918:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800291a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800291e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002922:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002926:	b34a      	cbz	r2, 800297c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002928:	2a0c      	cmp	r2, #12
 800292a:	d009      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x4c>
 800292c:	2000      	movs	r0, #0
  return sysclockfreq;
 800292e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002930:	2a04      	cmp	r2, #4
 8002932:	d022      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x86>
 8002934:	2a08      	cmp	r2, #8
 8002936:	4814      	ldr	r0, [pc, #80]	; (8002988 <HAL_RCC_GetSysClockFreq+0x94>)
 8002938:	bf18      	it	ne
 800293a:	2000      	movne	r0, #0
 800293c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800293e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002946:	2a02      	cmp	r2, #2
 8002948:	d015      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 800294a:	490f      	ldr	r1, [pc, #60]	; (8002988 <HAL_RCC_GetSysClockFreq+0x94>)
 800294c:	2a03      	cmp	r2, #3
 800294e:	bf08      	it	eq
 8002950:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002952:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002954:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800295c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002960:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002964:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002966:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002968:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800296a:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800296c:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8002970:	fbb0 f0f3 	udiv	r0, r0, r3
 8002974:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002976:	4805      	ldr	r0, [pc, #20]	; (800298c <HAL_RCC_GetSysClockFreq+0x98>)
 8002978:	e7eb      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800297a:	4804      	ldr	r0, [pc, #16]	; (800298c <HAL_RCC_GetSysClockFreq+0x98>)
}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	08004ccc 	.word	0x08004ccc
 8002988:	007a1200 	.word	0x007a1200
 800298c:	00f42400 	.word	0x00f42400

08002990 <HAL_RCC_OscConfig>:
{
 8002990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002994:	4605      	mov	r5, r0
 8002996:	b918      	cbnz	r0, 80029a0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002998:	2001      	movs	r0, #1
}
 800299a:	b003      	add	sp, #12
 800299c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a0:	4ca7      	ldr	r4, [pc, #668]	; (8002c40 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029a2:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a4:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029a6:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029a8:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029aa:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ae:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029b2:	d53d      	bpl.n	8002a30 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029b4:	b11e      	cbz	r6, 80029be <HAL_RCC_OscConfig+0x2e>
 80029b6:	2e0c      	cmp	r6, #12
 80029b8:	d166      	bne.n	8002a88 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029ba:	2f01      	cmp	r7, #1
 80029bc:	d164      	bne.n	8002a88 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	0799      	lsls	r1, r3, #30
 80029c2:	d502      	bpl.n	80029ca <HAL_RCC_OscConfig+0x3a>
 80029c4:	69ab      	ldr	r3, [r5, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0e6      	beq.n	8002998 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	6a28      	ldr	r0, [r5, #32]
 80029ce:	071a      	lsls	r2, r3, #28
 80029d0:	bf56      	itet	pl
 80029d2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80029d6:	6823      	ldrmi	r3, [r4, #0]
 80029d8:	091b      	lsrpl	r3, r3, #4
 80029da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029de:	4283      	cmp	r3, r0
 80029e0:	d23b      	bcs.n	8002a5a <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029e2:	f7ff ff45 	bl	8002870 <RCC_SetFlashLatencyFromMSIRange>
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d1d6      	bne.n	8002998 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	f043 0308 	orr.w	r3, r3, #8
 80029f0:	6023      	str	r3, [r4, #0]
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	6a2a      	ldr	r2, [r5, #32]
 80029f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029fa:	4313      	orrs	r3, r2
 80029fc:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029fe:	6863      	ldr	r3, [r4, #4]
 8002a00:	69ea      	ldr	r2, [r5, #28]
 8002a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a0a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a0c:	f7ff ff72 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8002a10:	68a3      	ldr	r3, [r4, #8]
 8002a12:	4a8c      	ldr	r2, [pc, #560]	; (8002c44 <HAL_RCC_OscConfig+0x2b4>)
 8002a14:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a18:	5cd3      	ldrb	r3, [r2, r3]
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	40d8      	lsrs	r0, r3
 8002a20:	4b89      	ldr	r3, [pc, #548]	; (8002c48 <HAL_RCC_OscConfig+0x2b8>)
 8002a22:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002a24:	4b89      	ldr	r3, [pc, #548]	; (8002c4c <HAL_RCC_OscConfig+0x2bc>)
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	f7fe fe34 	bl	8001694 <HAL_InitTick>
        if(status != HAL_OK)
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d1b4      	bne.n	800299a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a30:	682b      	ldr	r3, [r5, #0]
 8002a32:	07d9      	lsls	r1, r3, #31
 8002a34:	d45f      	bmi.n	8002af6 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	682b      	ldr	r3, [r5, #0]
 8002a38:	079a      	lsls	r2, r3, #30
 8002a3a:	f100 809e 	bmi.w	8002b7a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3e:	682b      	ldr	r3, [r5, #0]
 8002a40:	0719      	lsls	r1, r3, #28
 8002a42:	f100 80d2 	bmi.w	8002bea <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a46:	682b      	ldr	r3, [r5, #0]
 8002a48:	075a      	lsls	r2, r3, #29
 8002a4a:	f100 8101 	bmi.w	8002c50 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f040 816a 	bne.w	8002d2a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002a56:	2000      	movs	r0, #0
 8002a58:	e79f      	b.n	800299a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	f043 0308 	orr.w	r3, r3, #8
 8002a60:	6023      	str	r3, [r4, #0]
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a68:	4303      	orrs	r3, r0
 8002a6a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a6c:	6863      	ldr	r3, [r4, #4]
 8002a6e:	69ea      	ldr	r2, [r5, #28]
 8002a70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a78:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a7a:	2e00      	cmp	r6, #0
 8002a7c:	d1c6      	bne.n	8002a0c <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a7e:	f7ff fef7 	bl	8002870 <RCC_SetFlashLatencyFromMSIRange>
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d0c2      	beq.n	8002a0c <HAL_RCC_OscConfig+0x7c>
 8002a86:	e787      	b.n	8002998 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a88:	69ab      	ldr	r3, [r5, #24]
 8002a8a:	b31b      	cbz	r3, 8002ad4 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002a94:	f7fe fe46 	bl	8001724 <HAL_GetTick>
 8002a98:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	079b      	lsls	r3, r3, #30
 8002a9e:	d511      	bpl.n	8002ac4 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	f043 0308 	orr.w	r3, r3, #8
 8002aa6:	6023      	str	r3, [r4, #0]
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	6a2a      	ldr	r2, [r5, #32]
 8002aac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab4:	6863      	ldr	r3, [r4, #4]
 8002ab6:	69ea      	ldr	r2, [r5, #28]
 8002ab8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002abc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ac0:	6063      	str	r3, [r4, #4]
 8002ac2:	e7b5      	b.n	8002a30 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ac4:	f7fe fe2e 	bl	8001724 <HAL_GetTick>
 8002ac8:	eba0 0008 	sub.w	r0, r0, r8
 8002acc:	2802      	cmp	r0, #2
 8002ace:	d9e4      	bls.n	8002a9a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	e762      	b.n	800299a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	f023 0301 	bic.w	r3, r3, #1
 8002ada:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002adc:	f7fe fe22 	bl	8001724 <HAL_GetTick>
 8002ae0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	0798      	lsls	r0, r3, #30
 8002ae6:	d5a3      	bpl.n	8002a30 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ae8:	f7fe fe1c 	bl	8001724 <HAL_GetTick>
 8002aec:	eba0 0008 	sub.w	r0, r0, r8
 8002af0:	2802      	cmp	r0, #2
 8002af2:	d9f6      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x152>
 8002af4:	e7ec      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002af6:	2e08      	cmp	r6, #8
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_OscConfig+0x172>
 8002afa:	2e0c      	cmp	r6, #12
 8002afc:	d108      	bne.n	8002b10 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002afe:	2f03      	cmp	r7, #3
 8002b00:	d106      	bne.n	8002b10 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	039b      	lsls	r3, r3, #14
 8002b06:	d596      	bpl.n	8002a36 <HAL_RCC_OscConfig+0xa6>
 8002b08:	686b      	ldr	r3, [r5, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d193      	bne.n	8002a36 <HAL_RCC_OscConfig+0xa6>
 8002b0e:	e743      	b.n	8002998 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b10:	686b      	ldr	r3, [r5, #4]
 8002b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b16:	d110      	bne.n	8002b3a <HAL_RCC_OscConfig+0x1aa>
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b20:	f7fe fe00 	bl	8001724 <HAL_GetTick>
 8002b24:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	0398      	lsls	r0, r3, #14
 8002b2a:	d484      	bmi.n	8002a36 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fdfa 	bl	8001724 <HAL_GetTick>
 8002b30:	eba0 0008 	sub.w	r0, r0, r8
 8002b34:	2864      	cmp	r0, #100	; 0x64
 8002b36:	d9f6      	bls.n	8002b26 <HAL_RCC_OscConfig+0x196>
 8002b38:	e7ca      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b3e:	d104      	bne.n	8002b4a <HAL_RCC_OscConfig+0x1ba>
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b46:	6023      	str	r3, [r4, #0]
 8002b48:	e7e6      	b.n	8002b18 <HAL_RCC_OscConfig+0x188>
 8002b4a:	6822      	ldr	r2, [r4, #0]
 8002b4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b50:	6022      	str	r2, [r4, #0]
 8002b52:	6822      	ldr	r2, [r4, #0]
 8002b54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b58:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1e0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fde1 	bl	8001724 <HAL_GetTick>
 8002b62:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	0399      	lsls	r1, r3, #14
 8002b68:	f57f af65 	bpl.w	8002a36 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7fe fdda 	bl	8001724 <HAL_GetTick>
 8002b70:	eba0 0008 	sub.w	r0, r0, r8
 8002b74:	2864      	cmp	r0, #100	; 0x64
 8002b76:	d9f5      	bls.n	8002b64 <HAL_RCC_OscConfig+0x1d4>
 8002b78:	e7aa      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b7a:	2e04      	cmp	r6, #4
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1f6>
 8002b7e:	2e0c      	cmp	r6, #12
 8002b80:	d110      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b82:	2f02      	cmp	r7, #2
 8002b84:	d10e      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	055a      	lsls	r2, r3, #21
 8002b8a:	d503      	bpl.n	8002b94 <HAL_RCC_OscConfig+0x204>
 8002b8c:	68eb      	ldr	r3, [r5, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f43f af02 	beq.w	8002998 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b94:	6863      	ldr	r3, [r4, #4]
 8002b96:	692a      	ldr	r2, [r5, #16]
 8002b98:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002b9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ba0:	6063      	str	r3, [r4, #4]
 8002ba2:	e74c      	b.n	8002a3e <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba4:	68eb      	ldr	r3, [r5, #12]
 8002ba6:	b17b      	cbz	r3, 8002bc8 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fdb8 	bl	8001724 <HAL_GetTick>
 8002bb4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	055b      	lsls	r3, r3, #21
 8002bba:	d4eb      	bmi.n	8002b94 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbc:	f7fe fdb2 	bl	8001724 <HAL_GetTick>
 8002bc0:	1bc0      	subs	r0, r0, r7
 8002bc2:	2802      	cmp	r0, #2
 8002bc4:	d9f7      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x226>
 8002bc6:	e783      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fda8 	bl	8001724 <HAL_GetTick>
 8002bd4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	0558      	lsls	r0, r3, #21
 8002bda:	f57f af30 	bpl.w	8002a3e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bde:	f7fe fda1 	bl	8001724 <HAL_GetTick>
 8002be2:	1bc0      	subs	r0, r0, r7
 8002be4:	2802      	cmp	r0, #2
 8002be6:	d9f6      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x246>
 8002be8:	e772      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bea:	696b      	ldr	r3, [r5, #20]
 8002bec:	b19b      	cbz	r3, 8002c16 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8002bee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fd93 	bl	8001724 <HAL_GetTick>
 8002bfe:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c00:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002c04:	079b      	lsls	r3, r3, #30
 8002c06:	f53f af1e 	bmi.w	8002a46 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c0a:	f7fe fd8b 	bl	8001724 <HAL_GetTick>
 8002c0e:	1bc0      	subs	r0, r0, r7
 8002c10:	2802      	cmp	r0, #2
 8002c12:	d9f5      	bls.n	8002c00 <HAL_RCC_OscConfig+0x270>
 8002c14:	e75c      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002c16:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002c22:	f7fe fd7f 	bl	8001724 <HAL_GetTick>
 8002c26:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c28:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002c2c:	0798      	lsls	r0, r3, #30
 8002c2e:	f57f af0a 	bpl.w	8002a46 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c32:	f7fe fd77 	bl	8001724 <HAL_GetTick>
 8002c36:	1bc0      	subs	r0, r0, r7
 8002c38:	2802      	cmp	r0, #2
 8002c3a:	d9f5      	bls.n	8002c28 <HAL_RCC_OscConfig+0x298>
 8002c3c:	e748      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	08004cb4 	.word	0x08004cb4
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000008 	.word	0x20000008
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c52:	00d9      	lsls	r1, r3, #3
 8002c54:	d429      	bmi.n	8002caa <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c68:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c6c:	4f89      	ldr	r7, [pc, #548]	; (8002e94 <HAL_RCC_OscConfig+0x504>)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	05da      	lsls	r2, r3, #23
 8002c72:	d51d      	bpl.n	8002cb0 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c74:	68ab      	ldr	r3, [r5, #8]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d12b      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x342>
 8002c7a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002c86:	f7fe fd4d 	bl	8001724 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002c8e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c90:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002c94:	0798      	lsls	r0, r3, #30
 8002c96:	d542      	bpl.n	8002d1e <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8002c98:	f1b8 0f00 	cmp.w	r8, #0
 8002c9c:	f43f aed7 	beq.w	8002a4e <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ca8:	e6d1      	b.n	8002a4e <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8002caa:	f04f 0800 	mov.w	r8, #0
 8002cae:	e7dd      	b.n	8002c6c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002cb8:	f7fe fd34 	bl	8001724 <HAL_GetTick>
 8002cbc:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	05db      	lsls	r3, r3, #23
 8002cc2:	d4d7      	bmi.n	8002c74 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc4:	f7fe fd2e 	bl	8001724 <HAL_GetTick>
 8002cc8:	eba0 0009 	sub.w	r0, r0, r9
 8002ccc:	2802      	cmp	r0, #2
 8002cce:	d9f6      	bls.n	8002cbe <HAL_RCC_OscConfig+0x32e>
 8002cd0:	e6fe      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	d106      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x354>
 8002cd6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002ce2:	e7ca      	b.n	8002c7a <HAL_RCC_OscConfig+0x2ea>
 8002ce4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002cf0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002cf4:	f022 0204 	bic.w	r2, r2, #4
 8002cf8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1c2      	bne.n	8002c86 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8002d00:	f7fe fd10 	bl	8001724 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002d08:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002d0e:	0799      	lsls	r1, r3, #30
 8002d10:	d5c2      	bpl.n	8002c98 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fe fd07 	bl	8001724 <HAL_GetTick>
 8002d16:	1bc0      	subs	r0, r0, r7
 8002d18:	4548      	cmp	r0, r9
 8002d1a:	d9f6      	bls.n	8002d0a <HAL_RCC_OscConfig+0x37a>
 8002d1c:	e6d8      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fe fd01 	bl	8001724 <HAL_GetTick>
 8002d22:	1bc0      	subs	r0, r0, r7
 8002d24:	4548      	cmp	r0, r9
 8002d26:	d9b3      	bls.n	8002c90 <HAL_RCC_OscConfig+0x300>
 8002d28:	e6d2      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	f040 808f 	bne.w	8002e4e <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8002d30:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002d34:	f003 0103 	and.w	r1, r3, #3
 8002d38:	4291      	cmp	r1, r2
 8002d3a:	d124      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d3c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002d3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d42:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d44:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002d48:	d11d      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d4a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002d4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d50:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002d54:	d117      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d56:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002d58:	3a07      	subs	r2, #7
 8002d5a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002d5e:	bf18      	it	ne
 8002d60:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d62:	4291      	cmp	r1, r2
 8002d64:	d10f      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d66:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002d68:	0852      	lsrs	r2, r2, #1
 8002d6a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002d6e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d70:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d76:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002d78:	0852      	lsrs	r2, r2, #1
 8002d7a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002d7e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d80:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002d84:	d04a      	beq.n	8002e1c <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d86:	2e0c      	cmp	r6, #12
 8002d88:	f43f ae06 	beq.w	8002998 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	f53f ae02 	bmi.w	8002998 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	f53f adfe 	bmi.w	8002998 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da2:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002da4:	f7fe fcbe 	bl	8001724 <HAL_GetTick>
 8002da8:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	019f      	lsls	r7, r3, #6
 8002dae:	d42f      	bmi.n	8002e10 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db0:	68e2      	ldr	r2, [r4, #12]
 8002db2:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <HAL_RCC_OscConfig+0x508>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002db8:	4313      	orrs	r3, r2
 8002dba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002dbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002dc0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002dc2:	3a01      	subs	r2, #1
 8002dc4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002dc8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002dca:	0912      	lsrs	r2, r2, #4
 8002dcc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002dd0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002dd2:	0852      	lsrs	r2, r2, #1
 8002dd4:	3a01      	subs	r2, #1
 8002dd6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002dda:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002ddc:	0852      	lsrs	r2, r2, #1
 8002dde:	3a01      	subs	r2, #1
 8002de0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002de4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dec:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dee:	68e3      	ldr	r3, [r4, #12]
 8002df0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df4:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002df6:	f7fe fc95 	bl	8001724 <HAL_GetTick>
 8002dfa:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	0198      	lsls	r0, r3, #6
 8002e00:	f53f ae29 	bmi.w	8002a56 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe fc8e 	bl	8001724 <HAL_GetTick>
 8002e08:	1b40      	subs	r0, r0, r5
 8002e0a:	2802      	cmp	r0, #2
 8002e0c:	d9f6      	bls.n	8002dfc <HAL_RCC_OscConfig+0x46c>
 8002e0e:	e65f      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fc88 	bl	8001724 <HAL_GetTick>
 8002e14:	1b80      	subs	r0, r0, r6
 8002e16:	2802      	cmp	r0, #2
 8002e18:	d9c7      	bls.n	8002daa <HAL_RCC_OscConfig+0x41a>
 8002e1a:	e659      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	0199      	lsls	r1, r3, #6
 8002e20:	f53f ae19 	bmi.w	8002a56 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e2a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e2c:	68e3      	ldr	r3, [r4, #12]
 8002e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e32:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002e34:	f7fe fc76 	bl	8001724 <HAL_GetTick>
 8002e38:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	019a      	lsls	r2, r3, #6
 8002e3e:	f53f ae0a 	bmi.w	8002a56 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fe fc6f 	bl	8001724 <HAL_GetTick>
 8002e46:	1b40      	subs	r0, r0, r5
 8002e48:	2802      	cmp	r0, #2
 8002e4a:	d9f6      	bls.n	8002e3a <HAL_RCC_OscConfig+0x4aa>
 8002e4c:	e640      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e4e:	2e0c      	cmp	r6, #12
 8002e50:	f43f ada2 	beq.w	8002998 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e62:	bf02      	ittt	eq
 8002e64:	68e3      	ldreq	r3, [r4, #12]
 8002e66:	f023 0303 	biceq.w	r3, r3, #3
 8002e6a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e6c:	68e3      	ldr	r3, [r4, #12]
 8002e6e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e76:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002e78:	f7fe fc54 	bl	8001724 <HAL_GetTick>
 8002e7c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	f57f ade8 	bpl.w	8002a56 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e86:	f7fe fc4d 	bl	8001724 <HAL_GetTick>
 8002e8a:	1b40      	subs	r0, r0, r5
 8002e8c:	2802      	cmp	r0, #2
 8002e8e:	d9f6      	bls.n	8002e7e <HAL_RCC_OscConfig+0x4ee>
 8002e90:	e61e      	b.n	8002ad0 <HAL_RCC_OscConfig+0x140>
 8002e92:	bf00      	nop
 8002e94:	40007000 	.word	0x40007000
 8002e98:	f99d808c 	.word	0xf99d808c

08002e9c <HAL_RCC_ClockConfig>:
{
 8002e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ea0:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	b910      	cbnz	r0, 8002eac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4a41      	ldr	r2, [pc, #260]	; (8002fb4 <HAL_RCC_ClockConfig+0x118>)
 8002eae:	6813      	ldr	r3, [r2, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	428b      	cmp	r3, r1
 8002eb6:	d32a      	bcc.n	8002f0e <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	07d9      	lsls	r1, r3, #31
 8002ebc:	d432      	bmi.n	8002f24 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebe:	6821      	ldr	r1, [r4, #0]
 8002ec0:	078a      	lsls	r2, r1, #30
 8002ec2:	d45c      	bmi.n	8002f7e <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec4:	4a3b      	ldr	r2, [pc, #236]	; (8002fb4 <HAL_RCC_ClockConfig+0x118>)
 8002ec6:	6813      	ldr	r3, [r2, #0]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	429e      	cmp	r6, r3
 8002ece:	d35e      	bcc.n	8002f8e <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	f011 0f04 	tst.w	r1, #4
 8002ed4:	4d38      	ldr	r5, [pc, #224]	; (8002fb8 <HAL_RCC_ClockConfig+0x11c>)
 8002ed6:	d165      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed8:	070b      	lsls	r3, r1, #28
 8002eda:	d506      	bpl.n	8002eea <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002edc:	68ab      	ldr	r3, [r5, #8]
 8002ede:	6922      	ldr	r2, [r4, #16]
 8002ee0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ee4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002ee8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eea:	f7ff fd03 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8002eee:	68ab      	ldr	r3, [r5, #8]
 8002ef0:	4a32      	ldr	r2, [pc, #200]	; (8002fbc <HAL_RCC_ClockConfig+0x120>)
 8002ef2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002efa:	5cd3      	ldrb	r3, [r2, r3]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	40d8      	lsrs	r0, r3
 8002f02:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <HAL_RCC_ClockConfig+0x124>)
 8002f04:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002f06:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <HAL_RCC_ClockConfig+0x128>)
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	f7fe bbc3 	b.w	8001694 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	6813      	ldr	r3, [r2, #0]
 8002f10:	f023 0307 	bic.w	r3, r3, #7
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f18:	6813      	ldr	r3, [r2, #0]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	4299      	cmp	r1, r3
 8002f20:	d1c1      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xa>
 8002f22:	e7c9      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f24:	6862      	ldr	r2, [r4, #4]
 8002f26:	4d24      	ldr	r5, [pc, #144]	; (8002fb8 <HAL_RCC_ClockConfig+0x11c>)
 8002f28:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2a:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2c:	d11b      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f32:	d0b8      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f34:	68ab      	ldr	r3, [r5, #8]
 8002f36:	f023 0303 	bic.w	r3, r3, #3
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8002f3e:	f7fe fbf1 	bl	8001724 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f42:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002f46:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f48:	68ab      	ldr	r3, [r5, #8]
 8002f4a:	6862      	ldr	r2, [r4, #4]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002f54:	d0b3      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f56:	f7fe fbe5 	bl	8001724 <HAL_GetTick>
 8002f5a:	1bc0      	subs	r0, r0, r7
 8002f5c:	4540      	cmp	r0, r8
 8002f5e:	d9f3      	bls.n	8002f48 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8002f60:	2003      	movs	r0, #3
}
 8002f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f66:	2a02      	cmp	r2, #2
 8002f68:	d102      	bne.n	8002f70 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f6e:	e7e0      	b.n	8002f32 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f70:	b912      	cbnz	r2, 8002f78 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f72:	f013 0f02 	tst.w	r3, #2
 8002f76:	e7dc      	b.n	8002f32 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f78:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002f7c:	e7d9      	b.n	8002f32 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f7e:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <HAL_RCC_ClockConfig+0x11c>)
 8002f80:	68a0      	ldr	r0, [r4, #8]
 8002f82:	6893      	ldr	r3, [r2, #8]
 8002f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f88:	4303      	orrs	r3, r0
 8002f8a:	6093      	str	r3, [r2, #8]
 8002f8c:	e79a      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	6813      	ldr	r3, [r2, #0]
 8002f90:	f023 0307 	bic.w	r3, r3, #7
 8002f94:	4333      	orrs	r3, r6
 8002f96:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f98:	6813      	ldr	r3, [r2, #0]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	429e      	cmp	r6, r3
 8002fa0:	d181      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xa>
 8002fa2:	e795      	b.n	8002ed0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	68ab      	ldr	r3, [r5, #8]
 8002fa6:	68e2      	ldr	r2, [r4, #12]
 8002fa8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60ab      	str	r3, [r5, #8]
 8002fb0:	e792      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x3c>
 8002fb2:	bf00      	nop
 8002fb4:	40022000 	.word	0x40022000
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	08004cb4 	.word	0x08004cb4
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	20000008 	.word	0x20000008

08002fc8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002fca:	4a06      	ldr	r2, [pc, #24]	; (8002fe4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	4a04      	ldr	r2, [pc, #16]	; (8002fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd6:	6810      	ldr	r0, [r2, #0]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
}
 8002fdc:	40d8      	lsrs	r0, r3
 8002fde:	4770      	bx	lr
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	08004cc4 	.word	0x08004cc4
 8002fe8:	20000000 	.word	0x20000000

08002fec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002fee:	4a06      	ldr	r2, [pc, #24]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002ff6:	5cd3      	ldrb	r3, [r2, r3]
 8002ff8:	4a04      	ldr	r2, [pc, #16]	; (800300c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ffa:	6810      	ldr	r0, [r2, #0]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
}
 8003000:	40d8      	lsrs	r0, r3
 8003002:	4770      	bx	lr
 8003004:	40021000 	.word	0x40021000
 8003008:	08004cc4 	.word	0x08004cc4
 800300c:	20000000 	.word	0x20000000

08003010 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003012:	4b45      	ldr	r3, [pc, #276]	; (8003128 <RCCEx_PLLSAI1_Config+0x118>)
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	f012 0f03 	tst.w	r2, #3
{
 800301a:	4605      	mov	r5, r0
 800301c:	460e      	mov	r6, r1
 800301e:	461c      	mov	r4, r3
 8003020:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003022:	d02a      	beq.n	800307a <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	f002 0203 	and.w	r2, r2, #3
 800302a:	4282      	cmp	r2, r0
 800302c:	d13c      	bne.n	80030a8 <RCCEx_PLLSAI1_Config+0x98>
       ||
 800302e:	2a00      	cmp	r2, #0
 8003030:	d03a      	beq.n	80030a8 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003032:	68db      	ldr	r3, [r3, #12]
       ||
 8003034:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003036:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800303a:	3301      	adds	r3, #1
       ||
 800303c:	4293      	cmp	r3, r2
 800303e:	d133      	bne.n	80030a8 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003046:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003048:	f7fe fb6c 	bl	8001724 <HAL_GetTick>
 800304c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	011a      	lsls	r2, r3, #4
 8003052:	d432      	bmi.n	80030ba <RCCEx_PLLSAI1_Config+0xaa>
 8003054:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003056:	2e00      	cmp	r6, #0
 8003058:	d036      	beq.n	80030c8 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800305a:	2e01      	cmp	r6, #1
 800305c:	d150      	bne.n	8003100 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800305e:	6922      	ldr	r2, [r4, #16]
 8003060:	6928      	ldr	r0, [r5, #16]
 8003062:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003066:	0840      	lsrs	r0, r0, #1
 8003068:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800306c:	3801      	subs	r0, #1
 800306e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8003072:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8003076:	6122      	str	r2, [r4, #16]
 8003078:	e032      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 800307a:	2802      	cmp	r0, #2
 800307c:	d010      	beq.n	80030a0 <RCCEx_PLLSAI1_Config+0x90>
 800307e:	2803      	cmp	r0, #3
 8003080:	d014      	beq.n	80030ac <RCCEx_PLLSAI1_Config+0x9c>
 8003082:	2801      	cmp	r0, #1
 8003084:	d110      	bne.n	80030a8 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	079f      	lsls	r7, r3, #30
 800308a:	d538      	bpl.n	80030fe <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800308c:	68e3      	ldr	r3, [r4, #12]
 800308e:	686a      	ldr	r2, [r5, #4]
 8003090:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003094:	3a01      	subs	r2, #1
 8003096:	4318      	orrs	r0, r3
 8003098:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800309c:	60e0      	str	r0, [r4, #12]
 800309e:	e7cf      	b.n	8003040 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030a6:	d1f1      	bne.n	800308c <RCCEx_PLLSAI1_Config+0x7c>
 80030a8:	2001      	movs	r0, #1
 80030aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	0391      	lsls	r1, r2, #14
 80030b0:	d4ec      	bmi.n	800308c <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80030b8:	e7f5      	b.n	80030a6 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ba:	f7fe fb33 	bl	8001724 <HAL_GetTick>
 80030be:	1bc0      	subs	r0, r0, r7
 80030c0:	2802      	cmp	r0, #2
 80030c2:	d9c4      	bls.n	800304e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80030c4:	2003      	movs	r0, #3
 80030c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030c8:	6921      	ldr	r1, [r4, #16]
 80030ca:	68eb      	ldr	r3, [r5, #12]
 80030cc:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 80030d0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80030d4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80030de:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030e6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7fe fb1c 	bl	8001724 <HAL_GetTick>
 80030ec:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	d513      	bpl.n	800311c <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030f4:	6923      	ldr	r3, [r4, #16]
 80030f6:	69aa      	ldr	r2, [r5, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	6123      	str	r3, [r4, #16]
 80030fc:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80030fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003100:	6923      	ldr	r3, [r4, #16]
 8003102:	6968      	ldr	r0, [r5, #20]
 8003104:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003108:	0840      	lsrs	r0, r0, #1
 800310a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800310e:	3801      	subs	r0, #1
 8003110:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8003114:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8003118:	6123      	str	r3, [r4, #16]
 800311a:	e7e1      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800311c:	f7fe fb02 	bl	8001724 <HAL_GetTick>
 8003120:	1b80      	subs	r0, r0, r6
 8003122:	2802      	cmp	r0, #2
 8003124:	d9e3      	bls.n	80030ee <RCCEx_PLLSAI1_Config+0xde>
 8003126:	e7cd      	b.n	80030c4 <RCCEx_PLLSAI1_Config+0xb4>
 8003128:	40021000 	.word	0x40021000

0800312c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800312e:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <RCCEx_PLLSAI2_Config+0xf8>)
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	f012 0f03 	tst.w	r2, #3
{
 8003136:	4605      	mov	r5, r0
 8003138:	460e      	mov	r6, r1
 800313a:	461c      	mov	r4, r3
 800313c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800313e:	d028      	beq.n	8003192 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	f002 0203 	and.w	r2, r2, #3
 8003146:	4282      	cmp	r2, r0
 8003148:	d13a      	bne.n	80031c0 <RCCEx_PLLSAI2_Config+0x94>
       ||
 800314a:	2a00      	cmp	r2, #0
 800314c:	d038      	beq.n	80031c0 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800314e:	68db      	ldr	r3, [r3, #12]
       ||
 8003150:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003152:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003156:	3301      	adds	r3, #1
       ||
 8003158:	4293      	cmp	r3, r2
 800315a:	d131      	bne.n	80031c0 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003162:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7fe fade 	bl	8001724 <HAL_GetTick>
 8003168:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	009a      	lsls	r2, r3, #2
 800316e:	d430      	bmi.n	80031d2 <RCCEx_PLLSAI2_Config+0xa6>
 8003170:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003172:	2e00      	cmp	r6, #0
 8003174:	d034      	beq.n	80031e0 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003176:	6963      	ldr	r3, [r4, #20]
 8003178:	6929      	ldr	r1, [r5, #16]
 800317a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800317e:	0849      	lsrs	r1, r1, #1
 8003180:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003184:	3901      	subs	r1, #1
 8003186:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800318a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800318e:	6163      	str	r3, [r4, #20]
 8003190:	e032      	b.n	80031f8 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8003192:	2802      	cmp	r0, #2
 8003194:	d010      	beq.n	80031b8 <RCCEx_PLLSAI2_Config+0x8c>
 8003196:	2803      	cmp	r0, #3
 8003198:	d014      	beq.n	80031c4 <RCCEx_PLLSAI2_Config+0x98>
 800319a:	2801      	cmp	r0, #1
 800319c:	d110      	bne.n	80031c0 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	079f      	lsls	r7, r3, #30
 80031a2:	d538      	bpl.n	8003216 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031a4:	68e3      	ldr	r3, [r4, #12]
 80031a6:	686a      	ldr	r2, [r5, #4]
 80031a8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80031ac:	3a01      	subs	r2, #1
 80031ae:	4318      	orrs	r0, r3
 80031b0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80031b4:	60e0      	str	r0, [r4, #12]
 80031b6:	e7d1      	b.n	800315c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031be:	d1f1      	bne.n	80031a4 <RCCEx_PLLSAI2_Config+0x78>
 80031c0:	2001      	movs	r0, #1
 80031c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	0391      	lsls	r1, r2, #14
 80031c8:	d4ec      	bmi.n	80031a4 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80031d0:	e7f5      	b.n	80031be <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031d2:	f7fe faa7 	bl	8001724 <HAL_GetTick>
 80031d6:	1bc0      	subs	r0, r0, r7
 80031d8:	2802      	cmp	r0, #2
 80031da:	d9c6      	bls.n	800316a <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 80031dc:	2003      	movs	r0, #3
 80031de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031e0:	6962      	ldr	r2, [r4, #20]
 80031e2:	68eb      	ldr	r3, [r5, #12]
 80031e4:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80031e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031ec:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 80031f6:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fe fa90 	bl	8001724 <HAL_GetTick>
 8003204:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	d505      	bpl.n	8003218 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800320c:	6963      	ldr	r3, [r4, #20]
 800320e:	696a      	ldr	r2, [r5, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	6163      	str	r3, [r4, #20]
 8003214:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8003216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003218:	f7fe fa84 	bl	8001724 <HAL_GetTick>
 800321c:	1b80      	subs	r0, r0, r6
 800321e:	2802      	cmp	r0, #2
 8003220:	d9f1      	bls.n	8003206 <RCCEx_PLLSAI2_Config+0xda>
 8003222:	e7db      	b.n	80031dc <RCCEx_PLLSAI2_Config+0xb0>
 8003224:	40021000 	.word	0x40021000

08003228 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003228:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800322c:	6806      	ldr	r6, [r0, #0]
 800322e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8003232:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003234:	d024      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003236:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8003238:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800323c:	d02c      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800323e:	d802      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003240:	b1c1      	cbz	r1, 8003274 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8003242:	2601      	movs	r6, #1
 8003244:	e01c      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003246:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800324a:	d00d      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800324c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003250:	d1f7      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003252:	4a4d      	ldr	r2, [pc, #308]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003254:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003256:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800325a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800325e:	430b      	orrs	r3, r1
 8003260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003264:	2600      	movs	r6, #0
 8003266:	e00b      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003268:	4a47      	ldr	r2, [pc, #284]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326a:	68d3      	ldr	r3, [r2, #12]
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	60d3      	str	r3, [r2, #12]
      break;
 8003272:	e7ee      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003274:	3004      	adds	r0, #4
 8003276:	f7ff fecb 	bl	8003010 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800327a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800327c:	2800      	cmp	r0, #0
 800327e:	d0e8      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	04d8      	lsls	r0, r3, #19
 8003284:	d506      	bpl.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003286:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003288:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800328c:	d074      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800328e:	d808      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003290:	b1a9      	cbz	r1, 80032be <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8003292:	2601      	movs	r6, #1
 8003294:	4635      	mov	r5, r6
 8003296:	e021      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003298:	2100      	movs	r1, #0
 800329a:	3020      	adds	r0, #32
 800329c:	f7ff ff46 	bl	800312c <RCCEx_PLLSAI2_Config>
 80032a0:	e7eb      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80032a2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80032a6:	d004      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80032a8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80032ac:	d1f1      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80032ae:	4635      	mov	r5, r6
 80032b0:	e009      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032b2:	4a35      	ldr	r2, [pc, #212]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b4:	68d3      	ldr	r3, [r2, #12]
 80032b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ba:	60d3      	str	r3, [r2, #12]
 80032bc:	e7f7      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032be:	1d20      	adds	r0, r4, #4
 80032c0:	f7ff fea6 	bl	8003010 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032c4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80032c6:	2d00      	cmp	r5, #0
 80032c8:	d15c      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032ca:	4a2f      	ldr	r2, [pc, #188]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032cc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80032ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80032d2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80032d6:	430b      	orrs	r3, r1
 80032d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	0399      	lsls	r1, r3, #14
 80032e0:	f140 814f 	bpl.w	8003582 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032e4:	4f28      	ldr	r7, [pc, #160]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e8:	00da      	lsls	r2, r3, #3
 80032ea:	f140 8176 	bpl.w	80035da <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80032ee:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800338c <HAL_RCCEx_PeriphCLKConfig+0x164>
 80032f6:	f8d9 3000 	ldr.w	r3, [r9]
 80032fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fe:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8003302:	f7fe fa0f 	bl	8001724 <HAL_GetTick>
 8003306:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003308:	f8d9 3000 	ldr.w	r3, [r9]
 800330c:	05db      	lsls	r3, r3, #23
 800330e:	d53f      	bpl.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8003310:	2d00      	cmp	r5, #0
 8003312:	d144      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003314:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003318:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800331c:	d015      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x122>
 800331e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003322:	4293      	cmp	r3, r2
 8003324:	d011      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003326:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800332a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800332e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003332:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003336:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800333a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800333e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003342:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800334a:	07d8      	lsls	r0, r3, #31
 800334c:	d509      	bpl.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 800334e:	f7fe f9e9 	bl	8001724 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003352:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003356:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003358:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800335c:	0799      	lsls	r1, r3, #30
 800335e:	f140 8109 	bpl.w	8003574 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003366:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800336a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003374:	4635      	mov	r5, r6
 8003376:	e012      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003378:	2100      	movs	r1, #0
 800337a:	f104 0020 	add.w	r0, r4, #32
 800337e:	f7ff fed5 	bl	800312c <RCCEx_PLLSAI2_Config>
 8003382:	e79f      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003384:	462e      	mov	r6, r5
 8003386:	e7a9      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003388:	40021000 	.word	0x40021000
 800338c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003390:	f7fe f9c8 	bl	8001724 <HAL_GetTick>
 8003394:	eba0 000a 	sub.w	r0, r0, sl
 8003398:	2802      	cmp	r0, #2
 800339a:	d9b5      	bls.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 800339c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800339e:	f1b8 0f00 	cmp.w	r8, #0
 80033a2:	d003      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033aa:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	07da      	lsls	r2, r3, #31
 80033b0:	d508      	bpl.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b2:	4990      	ldr	r1, [pc, #576]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80033b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80033b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80033ba:	f022 0203 	bic.w	r2, r2, #3
 80033be:	4302      	orrs	r2, r0
 80033c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c4:	079f      	lsls	r7, r3, #30
 80033c6:	d508      	bpl.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033c8:	498a      	ldr	r1, [pc, #552]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80033ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80033cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80033d0:	f022 020c 	bic.w	r2, r2, #12
 80033d4:	4302      	orrs	r2, r0
 80033d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033da:	075e      	lsls	r6, r3, #29
 80033dc:	d508      	bpl.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033de:	4985      	ldr	r1, [pc, #532]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80033e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80033e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80033e6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80033ea:	4302      	orrs	r2, r0
 80033ec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033f0:	0718      	lsls	r0, r3, #28
 80033f2:	d508      	bpl.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f4:	497f      	ldr	r1, [pc, #508]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80033f6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80033f8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80033fc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003400:	4302      	orrs	r2, r0
 8003402:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003406:	06d9      	lsls	r1, r3, #27
 8003408:	d508      	bpl.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800340a:	497a      	ldr	r1, [pc, #488]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800340c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800340e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003412:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003416:	4302      	orrs	r2, r0
 8003418:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800341c:	069a      	lsls	r2, r3, #26
 800341e:	d508      	bpl.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003420:	4974      	ldr	r1, [pc, #464]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003422:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003424:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003428:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800342c:	4302      	orrs	r2, r0
 800342e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003432:	059f      	lsls	r7, r3, #22
 8003434:	d508      	bpl.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003436:	496f      	ldr	r1, [pc, #444]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003438:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800343a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800343e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003442:	4302      	orrs	r2, r0
 8003444:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003448:	055e      	lsls	r6, r3, #21
 800344a:	d508      	bpl.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800344c:	4969      	ldr	r1, [pc, #420]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800344e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003450:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003454:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003458:	4302      	orrs	r2, r0
 800345a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800345e:	0658      	lsls	r0, r3, #25
 8003460:	d508      	bpl.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003462:	4964      	ldr	r1, [pc, #400]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003464:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003466:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800346a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800346e:	4302      	orrs	r2, r0
 8003470:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003474:	0619      	lsls	r1, r3, #24
 8003476:	d508      	bpl.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003478:	495e      	ldr	r1, [pc, #376]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800347a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800347c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003480:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003484:	4302      	orrs	r2, r0
 8003486:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800348a:	05da      	lsls	r2, r3, #23
 800348c:	d508      	bpl.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800348e:	4959      	ldr	r1, [pc, #356]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003492:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003496:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800349a:	4302      	orrs	r2, r0
 800349c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034a0:	049b      	lsls	r3, r3, #18
 80034a2:	d50f      	bpl.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034a4:	4a53      	ldr	r2, [pc, #332]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80034a6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80034a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80034ac:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80034b0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034b2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034ba:	d164      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034bc:	68d3      	ldr	r3, [r2, #12]
 80034be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034c2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	031f      	lsls	r7, r3, #12
 80034c8:	d50f      	bpl.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034ca:	4a4a      	ldr	r2, [pc, #296]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80034cc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80034ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80034d2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80034d6:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034d8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034e0:	d15c      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e2:	68d3      	ldr	r3, [r2, #12]
 80034e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	035e      	lsls	r6, r3, #13
 80034ee:	d50f      	bpl.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034f0:	4a40      	ldr	r2, [pc, #256]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80034f2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80034f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80034f8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80034fc:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034fe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003502:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003506:	d154      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003508:	68d3      	ldr	r3, [r2, #12]
 800350a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800350e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	0458      	lsls	r0, r3, #17
 8003514:	d512      	bpl.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003516:	4937      	ldr	r1, [pc, #220]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003518:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800351a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800351e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003522:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003524:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800352c:	d14c      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800352e:	2102      	movs	r1, #2
 8003530:	1d20      	adds	r0, r4, #4
 8003532:	f7ff fd6d 	bl	8003010 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003536:	2800      	cmp	r0, #0
 8003538:	bf18      	it	ne
 800353a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800353c:	6822      	ldr	r2, [r4, #0]
 800353e:	0411      	lsls	r1, r2, #16
 8003540:	d508      	bpl.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003542:	492c      	ldr	r1, [pc, #176]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003544:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003546:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800354a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800354e:	4303      	orrs	r3, r0
 8003550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003554:	03d3      	lsls	r3, r2, #15
 8003556:	d509      	bpl.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003558:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800355a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800355e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003562:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003566:	430b      	orrs	r3, r1
 8003568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800356c:	4628      	mov	r0, r5
 800356e:	b002      	add	sp, #8
 8003570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003574:	f7fe f8d6 	bl	8001724 <HAL_GetTick>
 8003578:	1b40      	subs	r0, r0, r5
 800357a:	4548      	cmp	r0, r9
 800357c:	f67f aeec 	bls.w	8003358 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003580:	e70c      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003582:	4635      	mov	r5, r6
 8003584:	e712      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003586:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800358a:	d19b      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800358c:	2101      	movs	r1, #1
 800358e:	1d20      	adds	r0, r4, #4
 8003590:	f7ff fd3e 	bl	8003010 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003594:	2800      	cmp	r0, #0
 8003596:	bf18      	it	ne
 8003598:	4605      	movne	r5, r0
 800359a:	e793      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800359c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80035a0:	d1a3      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035a2:	2101      	movs	r1, #1
 80035a4:	1d20      	adds	r0, r4, #4
 80035a6:	f7ff fd33 	bl	8003010 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80035aa:	2800      	cmp	r0, #0
 80035ac:	bf18      	it	ne
 80035ae:	4605      	movne	r5, r0
 80035b0:	e79b      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035b2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80035b6:	d1ab      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035b8:	2101      	movs	r1, #1
 80035ba:	1d20      	adds	r0, r4, #4
 80035bc:	f7ff fd28 	bl	8003010 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80035c0:	2800      	cmp	r0, #0
 80035c2:	bf18      	it	ne
 80035c4:	4605      	movne	r5, r0
 80035c6:	e7a3      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035c8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80035cc:	d1b6      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035ce:	2102      	movs	r1, #2
 80035d0:	f104 0020 	add.w	r0, r4, #32
 80035d4:	f7ff fdaa 	bl	800312c <RCCEx_PLLSAI2_Config>
 80035d8:	e7ad      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80035e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80035ec:	f04f 0801 	mov.w	r8, #1
 80035f0:	e67f      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xca>
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000

080035f8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f8:	6a03      	ldr	r3, [r0, #32]
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003600:	6a03      	ldr	r3, [r0, #32]
{
 8003602:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003604:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003606:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003608:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800360a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800360e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003612:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003614:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003616:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800361a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800361c:	4d1b      	ldr	r5, [pc, #108]	; (800368c <TIM_OC1_SetConfig+0x94>)
 800361e:	42a8      	cmp	r0, r5
 8003620:	d00f      	beq.n	8003642 <TIM_OC1_SetConfig+0x4a>
 8003622:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003626:	42a8      	cmp	r0, r5
 8003628:	d00b      	beq.n	8003642 <TIM_OC1_SetConfig+0x4a>
 800362a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800362e:	42a8      	cmp	r0, r5
 8003630:	d007      	beq.n	8003642 <TIM_OC1_SetConfig+0x4a>
 8003632:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003636:	42a8      	cmp	r0, r5
 8003638:	d003      	beq.n	8003642 <TIM_OC1_SetConfig+0x4a>
 800363a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800363e:	42a8      	cmp	r0, r5
 8003640:	d11e      	bne.n	8003680 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003642:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003644:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003648:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800364a:	4d10      	ldr	r5, [pc, #64]	; (800368c <TIM_OC1_SetConfig+0x94>)
 800364c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800364e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003652:	d00f      	beq.n	8003674 <TIM_OC1_SetConfig+0x7c>
 8003654:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003658:	42a8      	cmp	r0, r5
 800365a:	d00b      	beq.n	8003674 <TIM_OC1_SetConfig+0x7c>
 800365c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003660:	42a8      	cmp	r0, r5
 8003662:	d007      	beq.n	8003674 <TIM_OC1_SetConfig+0x7c>
 8003664:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003668:	42a8      	cmp	r0, r5
 800366a:	d003      	beq.n	8003674 <TIM_OC1_SetConfig+0x7c>
 800366c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003670:	42a8      	cmp	r0, r5
 8003672:	d105      	bne.n	8003680 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003674:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003678:	698e      	ldr	r6, [r1, #24]
 800367a:	694c      	ldr	r4, [r1, #20]
 800367c:	4334      	orrs	r4, r6
 800367e:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003680:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003682:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003684:	684a      	ldr	r2, [r1, #4]
 8003686:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003688:	6203      	str	r3, [r0, #32]
 800368a:	bd70      	pop	{r4, r5, r6, pc}
 800368c:	40012c00 	.word	0x40012c00

08003690 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003690:	6a03      	ldr	r3, [r0, #32]
 8003692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003696:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003698:	6a03      	ldr	r3, [r0, #32]
{
 800369a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800369c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800369e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036a6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80036aa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036ac:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80036ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036b6:	4d16      	ldr	r5, [pc, #88]	; (8003710 <TIM_OC3_SetConfig+0x80>)
 80036b8:	42a8      	cmp	r0, r5
 80036ba:	d003      	beq.n	80036c4 <TIM_OC3_SetConfig+0x34>
 80036bc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80036c0:	42a8      	cmp	r0, r5
 80036c2:	d10d      	bne.n	80036e0 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036c4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80036c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ce:	4d10      	ldr	r5, [pc, #64]	; (8003710 <TIM_OC3_SetConfig+0x80>)
 80036d0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80036d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d6:	d00e      	beq.n	80036f6 <TIM_OC3_SetConfig+0x66>
 80036d8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80036dc:	42a8      	cmp	r0, r5
 80036de:	d00a      	beq.n	80036f6 <TIM_OC3_SetConfig+0x66>
 80036e0:	4d0c      	ldr	r5, [pc, #48]	; (8003714 <TIM_OC3_SetConfig+0x84>)
 80036e2:	42a8      	cmp	r0, r5
 80036e4:	d007      	beq.n	80036f6 <TIM_OC3_SetConfig+0x66>
 80036e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80036ea:	42a8      	cmp	r0, r5
 80036ec:	d003      	beq.n	80036f6 <TIM_OC3_SetConfig+0x66>
 80036ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80036f2:	42a8      	cmp	r0, r5
 80036f4:	d106      	bne.n	8003704 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036f6:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036fa:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036fc:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036fe:	4334      	orrs	r4, r6
 8003700:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003704:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003706:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003708:	684a      	ldr	r2, [r1, #4]
 800370a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370c:	6203      	str	r3, [r0, #32]
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40014000 	.word	0x40014000

08003718 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003718:	6a03      	ldr	r3, [r0, #32]
 800371a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800371e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003720:	6a03      	ldr	r3, [r0, #32]
{
 8003722:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003724:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003726:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003728:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800372a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800372e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003732:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003736:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003738:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800373c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003740:	4d0e      	ldr	r5, [pc, #56]	; (800377c <TIM_OC4_SetConfig+0x64>)
 8003742:	42a8      	cmp	r0, r5
 8003744:	d00f      	beq.n	8003766 <TIM_OC4_SetConfig+0x4e>
 8003746:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800374a:	42a8      	cmp	r0, r5
 800374c:	d00b      	beq.n	8003766 <TIM_OC4_SetConfig+0x4e>
 800374e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003752:	42a8      	cmp	r0, r5
 8003754:	d007      	beq.n	8003766 <TIM_OC4_SetConfig+0x4e>
 8003756:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800375a:	42a8      	cmp	r0, r5
 800375c:	d003      	beq.n	8003766 <TIM_OC4_SetConfig+0x4e>
 800375e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003762:	42a8      	cmp	r0, r5
 8003764:	d104      	bne.n	8003770 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003766:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003768:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800376c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003770:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003772:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003774:	684a      	ldr	r2, [r1, #4]
 8003776:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003778:	6203      	str	r3, [r0, #32]
 800377a:	bd30      	pop	{r4, r5, pc}
 800377c:	40012c00 	.word	0x40012c00

08003780 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003780:	6a03      	ldr	r3, [r0, #32]
 8003782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003786:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003788:	6a03      	ldr	r3, [r0, #32]
{
 800378a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800378c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800378e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003790:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003792:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003796:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800379a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800379c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800379e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037a2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a6:	4d0f      	ldr	r5, [pc, #60]	; (80037e4 <TIM_OC5_SetConfig+0x64>)
 80037a8:	42a8      	cmp	r0, r5
 80037aa:	d00f      	beq.n	80037cc <TIM_OC5_SetConfig+0x4c>
 80037ac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80037b0:	42a8      	cmp	r0, r5
 80037b2:	d00b      	beq.n	80037cc <TIM_OC5_SetConfig+0x4c>
 80037b4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80037b8:	42a8      	cmp	r0, r5
 80037ba:	d007      	beq.n	80037cc <TIM_OC5_SetConfig+0x4c>
 80037bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80037c0:	42a8      	cmp	r0, r5
 80037c2:	d003      	beq.n	80037cc <TIM_OC5_SetConfig+0x4c>
 80037c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80037c8:	42a8      	cmp	r0, r5
 80037ca:	d104      	bne.n	80037d6 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037cc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037ce:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037d2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037d8:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037da:	684a      	ldr	r2, [r1, #4]
 80037dc:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037de:	6203      	str	r3, [r0, #32]
 80037e0:	bd30      	pop	{r4, r5, pc}
 80037e2:	bf00      	nop
 80037e4:	40012c00 	.word	0x40012c00

080037e8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80037e8:	6a03      	ldr	r3, [r0, #32]
 80037ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80037ee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f0:	6a03      	ldr	r3, [r0, #32]
{
 80037f2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037f6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037fa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80037fe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003802:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003806:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003808:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800380c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003810:	4d0e      	ldr	r5, [pc, #56]	; (800384c <TIM_OC6_SetConfig+0x64>)
 8003812:	42a8      	cmp	r0, r5
 8003814:	d00f      	beq.n	8003836 <TIM_OC6_SetConfig+0x4e>
 8003816:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800381a:	42a8      	cmp	r0, r5
 800381c:	d00b      	beq.n	8003836 <TIM_OC6_SetConfig+0x4e>
 800381e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003822:	42a8      	cmp	r0, r5
 8003824:	d007      	beq.n	8003836 <TIM_OC6_SetConfig+0x4e>
 8003826:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800382a:	42a8      	cmp	r0, r5
 800382c:	d003      	beq.n	8003836 <TIM_OC6_SetConfig+0x4e>
 800382e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003832:	42a8      	cmp	r0, r5
 8003834:	d104      	bne.n	8003840 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003836:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003838:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800383c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003840:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003842:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003844:	684a      	ldr	r2, [r1, #4]
 8003846:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003848:	6203      	str	r3, [r0, #32]
 800384a:	bd30      	pop	{r4, r5, pc}
 800384c:	40012c00 	.word	0x40012c00

08003850 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003852:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003858:	6891      	ldr	r1, [r2, #8]
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_TIM_Base_Start+0x2c>)
 800385c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385e:	2b06      	cmp	r3, #6
 8003860:	d006      	beq.n	8003870 <HAL_TIM_Base_Start+0x20>
 8003862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8003866:	bf1e      	ittt	ne
 8003868:	6813      	ldrne	r3, [r2, #0]
 800386a:	f043 0301 	orrne.w	r3, r3, #1
 800386e:	6013      	strne	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003870:	2301      	movs	r3, #1
 8003872:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8003876:	2000      	movs	r0, #0
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	00010007 	.word	0x00010007

08003880 <HAL_TIM_OC_MspInit>:
 8003880:	4770      	bx	lr
	...

08003884 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003884:	4a30      	ldr	r2, [pc, #192]	; (8003948 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003886:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003888:	4290      	cmp	r0, r2
 800388a:	d012      	beq.n	80038b2 <TIM_Base_SetConfig+0x2e>
 800388c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003890:	d00f      	beq.n	80038b2 <TIM_Base_SetConfig+0x2e>
 8003892:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003896:	4290      	cmp	r0, r2
 8003898:	d00b      	beq.n	80038b2 <TIM_Base_SetConfig+0x2e>
 800389a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800389e:	4290      	cmp	r0, r2
 80038a0:	d007      	beq.n	80038b2 <TIM_Base_SetConfig+0x2e>
 80038a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038a6:	4290      	cmp	r0, r2
 80038a8:	d003      	beq.n	80038b2 <TIM_Base_SetConfig+0x2e>
 80038aa:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80038ae:	4290      	cmp	r0, r2
 80038b0:	d119      	bne.n	80038e6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80038b2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038b8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ba:	4a23      	ldr	r2, [pc, #140]	; (8003948 <TIM_Base_SetConfig+0xc4>)
 80038bc:	4290      	cmp	r0, r2
 80038be:	d01d      	beq.n	80038fc <TIM_Base_SetConfig+0x78>
 80038c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038c4:	d01a      	beq.n	80038fc <TIM_Base_SetConfig+0x78>
 80038c6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80038ca:	4290      	cmp	r0, r2
 80038cc:	d016      	beq.n	80038fc <TIM_Base_SetConfig+0x78>
 80038ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038d2:	4290      	cmp	r0, r2
 80038d4:	d012      	beq.n	80038fc <TIM_Base_SetConfig+0x78>
 80038d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038da:	4290      	cmp	r0, r2
 80038dc:	d00e      	beq.n	80038fc <TIM_Base_SetConfig+0x78>
 80038de:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80038e2:	4290      	cmp	r0, r2
 80038e4:	d00a      	beq.n	80038fc <TIM_Base_SetConfig+0x78>
 80038e6:	4a19      	ldr	r2, [pc, #100]	; (800394c <TIM_Base_SetConfig+0xc8>)
 80038e8:	4290      	cmp	r0, r2
 80038ea:	d007      	beq.n	80038fc <TIM_Base_SetConfig+0x78>
 80038ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038f0:	4290      	cmp	r0, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0x78>
 80038f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038f8:	4290      	cmp	r0, r2
 80038fa:	d103      	bne.n	8003904 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003902:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003904:	694a      	ldr	r2, [r1, #20]
 8003906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800390a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800390c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800390e:	688b      	ldr	r3, [r1, #8]
 8003910:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003912:	680b      	ldr	r3, [r1, #0]
 8003914:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <TIM_Base_SetConfig+0xc4>)
 8003918:	4298      	cmp	r0, r3
 800391a:	d00f      	beq.n	800393c <TIM_Base_SetConfig+0xb8>
 800391c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003920:	4298      	cmp	r0, r3
 8003922:	d00b      	beq.n	800393c <TIM_Base_SetConfig+0xb8>
 8003924:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003928:	4298      	cmp	r0, r3
 800392a:	d007      	beq.n	800393c <TIM_Base_SetConfig+0xb8>
 800392c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003930:	4298      	cmp	r0, r3
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0xb8>
 8003934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003938:	4298      	cmp	r0, r3
 800393a:	d101      	bne.n	8003940 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800393c:	690b      	ldr	r3, [r1, #16]
 800393e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003940:	2301      	movs	r3, #1
 8003942:	6143      	str	r3, [r0, #20]
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40014000 	.word	0x40014000

08003950 <HAL_TIM_Base_Init>:
{
 8003950:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003952:	4604      	mov	r4, r0
 8003954:	b1a0      	cbz	r0, 8003980 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003956:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800395a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800395e:	b91b      	cbnz	r3, 8003968 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003960:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003964:	f7fd fe34 	bl	80015d0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	2302      	movs	r3, #2
 800396a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396e:	6820      	ldr	r0, [r4, #0]
 8003970:	1d21      	adds	r1, r4, #4
 8003972:	f7ff ff87 	bl	8003884 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003976:	2301      	movs	r3, #1
 8003978:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800397c:	2000      	movs	r0, #0
 800397e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003980:	2001      	movs	r0, #1
}
 8003982:	bd10      	pop	{r4, pc}

08003984 <HAL_TIM_OC_Init>:
{
 8003984:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003986:	4604      	mov	r4, r0
 8003988:	b1a0      	cbz	r0, 80039b4 <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800398a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800398e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003992:	b91b      	cbnz	r3, 800399c <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003994:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8003998:	f7ff ff72 	bl	8003880 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	2302      	movs	r3, #2
 800399e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80039a2:	6820      	ldr	r0, [r4, #0]
 80039a4:	1d21      	adds	r1, r4, #4
 80039a6:	f7ff ff6d 	bl	8003884 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80039b0:	2000      	movs	r0, #0
 80039b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80039b4:	2001      	movs	r0, #1
}
 80039b6:	bd10      	pop	{r4, pc}

080039b8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b8:	6a03      	ldr	r3, [r0, #32]
 80039ba:	f023 0310 	bic.w	r3, r3, #16
 80039be:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80039c0:	6a03      	ldr	r3, [r0, #32]
{
 80039c2:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 80039c4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80039c6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039ca:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80039ce:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039d6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80039d8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039e0:	4d16      	ldr	r5, [pc, #88]	; (8003a3c <TIM_OC2_SetConfig+0x84>)
 80039e2:	42a8      	cmp	r0, r5
 80039e4:	d003      	beq.n	80039ee <TIM_OC2_SetConfig+0x36>
 80039e6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80039ea:	42a8      	cmp	r0, r5
 80039ec:	d10d      	bne.n	8003a0a <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039ee:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80039f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f8:	4d10      	ldr	r5, [pc, #64]	; (8003a3c <TIM_OC2_SetConfig+0x84>)
 80039fa:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80039fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a00:	d00e      	beq.n	8003a20 <TIM_OC2_SetConfig+0x68>
 8003a02:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003a06:	42a8      	cmp	r0, r5
 8003a08:	d00a      	beq.n	8003a20 <TIM_OC2_SetConfig+0x68>
 8003a0a:	4d0d      	ldr	r5, [pc, #52]	; (8003a40 <TIM_OC2_SetConfig+0x88>)
 8003a0c:	42a8      	cmp	r0, r5
 8003a0e:	d007      	beq.n	8003a20 <TIM_OC2_SetConfig+0x68>
 8003a10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a14:	42a8      	cmp	r0, r5
 8003a16:	d003      	beq.n	8003a20 <TIM_OC2_SetConfig+0x68>
 8003a18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a1c:	42a8      	cmp	r0, r5
 8003a1e:	d106      	bne.n	8003a2e <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a20:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a24:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a26:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a28:	4334      	orrs	r4, r6
 8003a2a:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8003a2e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003a30:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003a32:	684a      	ldr	r2, [r1, #4]
 8003a34:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003a36:	6203      	str	r3, [r0, #32]
 8003a38:	bd70      	pop	{r4, r5, r6, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40014000 	.word	0x40014000

08003a44 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8003a44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a48:	2b01      	cmp	r3, #1
{
 8003a4a:	b510      	push	{r4, lr}
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003a52:	d010      	beq.n	8003a76 <HAL_TIM_OC_ConfigChannel+0x32>
 8003a54:	2301      	movs	r3, #1
  switch (Channel)
 8003a56:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8003a58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8003a60:	d01c      	beq.n	8003a9c <HAL_TIM_OC_ConfigChannel+0x58>
 8003a62:	d809      	bhi.n	8003a78 <HAL_TIM_OC_ConfigChannel+0x34>
 8003a64:	b192      	cbz	r2, 8003a8c <HAL_TIM_OC_ConfigChannel+0x48>
 8003a66:	2a04      	cmp	r2, #4
 8003a68:	d014      	beq.n	8003a94 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8003a6a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003a6c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003a72:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003a76:	bd10      	pop	{r4, pc}
  switch (Channel)
 8003a78:	2a10      	cmp	r2, #16
 8003a7a:	d013      	beq.n	8003aa4 <HAL_TIM_OC_ConfigChannel+0x60>
 8003a7c:	2a14      	cmp	r2, #20
 8003a7e:	d015      	beq.n	8003aac <HAL_TIM_OC_ConfigChannel+0x68>
 8003a80:	2a0c      	cmp	r2, #12
 8003a82:	d1f2      	bne.n	8003a6a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	f7ff fe47 	bl	8003718 <TIM_OC4_SetConfig>
      break;
 8003a8a:	e7ee      	b.n	8003a6a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a8c:	6820      	ldr	r0, [r4, #0]
 8003a8e:	f7ff fdb3 	bl	80035f8 <TIM_OC1_SetConfig>
      break;
 8003a92:	e7ea      	b.n	8003a6a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a94:	6820      	ldr	r0, [r4, #0]
 8003a96:	f7ff ff8f 	bl	80039b8 <TIM_OC2_SetConfig>
      break;
 8003a9a:	e7e6      	b.n	8003a6a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a9c:	6820      	ldr	r0, [r4, #0]
 8003a9e:	f7ff fdf7 	bl	8003690 <TIM_OC3_SetConfig>
      break;
 8003aa2:	e7e2      	b.n	8003a6a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003aa4:	6820      	ldr	r0, [r4, #0]
 8003aa6:	f7ff fe6b 	bl	8003780 <TIM_OC5_SetConfig>
      break;
 8003aaa:	e7de      	b.n	8003a6a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	f7ff fe9b 	bl	80037e8 <TIM_OC6_SetConfig>
      break;
 8003ab2:	e7da      	b.n	8003a6a <HAL_TIM_OC_ConfigChannel+0x26>

08003ab4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ab4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ab6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ab8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aba:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003abe:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003ac2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac4:	6083      	str	r3, [r0, #8]
 8003ac6:	bd10      	pop	{r4, pc}

08003ac8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003ac8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003acc:	2b01      	cmp	r3, #1
{
 8003ace:	b570      	push	{r4, r5, r6, lr}
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003ad6:	d017      	beq.n	8003b08 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003adc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003ae4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae6:	4b41      	ldr	r3, [pc, #260]	; (8003bec <HAL_TIM_ConfigClockSource+0x124>)
 8003ae8:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003aea:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003aec:	680b      	ldr	r3, [r1, #0]
 8003aee:	2b40      	cmp	r3, #64	; 0x40
 8003af0:	d065      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0xf6>
 8003af2:	d815      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x58>
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d00c      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x4a>
 8003af8:	d807      	bhi.n	8003b0a <HAL_TIM_ConfigClockSource+0x42>
 8003afa:	b153      	cbz	r3, 8003b12 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003afe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003b00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003b04:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003b08:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d001      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x4a>
 8003b0e:	2b30      	cmp	r3, #48	; 0x30
 8003b10:	d1f4      	bne.n	8003afc <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8003b12:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b14:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	e01a      	b.n	8003b56 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8003b20:	2b60      	cmp	r3, #96	; 0x60
 8003b22:	d034      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0xc6>
 8003b24:	d819      	bhi.n	8003b5a <HAL_TIM_ConfigClockSource+0x92>
 8003b26:	2b50      	cmp	r3, #80	; 0x50
 8003b28:	d1e8      	bne.n	8003afc <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2a:	684a      	ldr	r2, [r1, #4]
 8003b2c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003b2e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b30:	6a05      	ldr	r5, [r0, #32]
 8003b32:	f025 0501 	bic.w	r5, r5, #1
 8003b36:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b38:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b3a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b42:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003b46:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003b48:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b4a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003b4c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b52:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003b56:	6083      	str	r3, [r0, #8]
 8003b58:	e7d0      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 8003b5a:	2b70      	cmp	r3, #112	; 0x70
 8003b5c:	d00c      	beq.n	8003b78 <HAL_TIM_ConfigClockSource+0xb0>
 8003b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b62:	d1cb      	bne.n	8003afc <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8003b64:	68cb      	ldr	r3, [r1, #12]
 8003b66:	684a      	ldr	r2, [r1, #4]
 8003b68:	6889      	ldr	r1, [r1, #8]
 8003b6a:	f7ff ffa3 	bl	8003ab4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	6893      	ldr	r3, [r2, #8]
 8003b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b76:	e008      	b.n	8003b8a <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8003b78:	68cb      	ldr	r3, [r1, #12]
 8003b7a:	684a      	ldr	r2, [r1, #4]
 8003b7c:	6889      	ldr	r1, [r1, #8]
 8003b7e:	f7ff ff99 	bl	8003ab4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b82:	6822      	ldr	r2, [r4, #0]
 8003b84:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b8a:	6093      	str	r3, [r2, #8]
      break;
 8003b8c:	e7b6      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8e:	684d      	ldr	r5, [r1, #4]
 8003b90:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b92:	6a01      	ldr	r1, [r0, #32]
 8003b94:	f021 0110 	bic.w	r1, r1, #16
 8003b98:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b9a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003b9c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b9e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ba2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ba6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003baa:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003bae:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003bb0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003bb2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bb8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003bbc:	e7cb      	b.n	8003b56 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bbe:	684a      	ldr	r2, [r1, #4]
 8003bc0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003bc2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc4:	6a05      	ldr	r5, [r0, #32]
 8003bc6:	f025 0501 	bic.w	r5, r5, #1
 8003bca:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bcc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bce:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003bda:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003bdc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003bde:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003be0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003be6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003bea:	e7b4      	b.n	8003b56 <HAL_TIM_ConfigClockSource+0x8e>
 8003bec:	fffe0088 	.word	0xfffe0088

08003bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bf0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003bf4:	2b01      	cmp	r3, #1
{
 8003bf6:	b570      	push	{r4, r5, r6, lr}
 8003bf8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003bfc:	d039      	beq.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0x82>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c02:	4d1d      	ldr	r5, [pc, #116]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  tmpcr2 = htim->Instance->CR2;
 8003c04:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8003c06:	2201      	movs	r2, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c08:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8003c0a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 8003c0e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003c10:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c12:	d002      	beq.n	8003c1a <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8003c14:	4e19      	ldr	r6, [pc, #100]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8003c16:	42b3      	cmp	r3, r6
 8003c18:	d103      	bne.n	8003c22 <HAL_TIMEx_MasterConfigSynchronization+0x32>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c1a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c1c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c20:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c22:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c28:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2a:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8003c2c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2e:	d015      	beq.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d012      	beq.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8003c36:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00f      	beq.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8003c3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00b      	beq.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8003c44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d007      	beq.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8003c4c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d003      	beq.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8003c54:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d104      	bne.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0x76>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c5c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c5e:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c62:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003c72:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003c74:	bd70      	pop	{r4, r5, r6, pc}
 8003c76:	bf00      	nop
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40013400 	.word	0x40013400
 8003c80:	40000400 	.word	0x40000400

08003c84 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c84:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c86:	69c1      	ldr	r1, [r0, #28]
{
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c8c:	6883      	ldr	r3, [r0, #8]
 8003c8e:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c90:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c92:	4303      	orrs	r3, r0
 8003c94:	6960      	ldr	r0, [r4, #20]
 8003c96:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c98:	48ba      	ldr	r0, [pc, #744]	; (8003f84 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c9a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c9c:	4028      	ands	r0, r5
 8003c9e:	4303      	orrs	r3, r0
 8003ca0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca2:	6853      	ldr	r3, [r2, #4]
 8003ca4:	68e0      	ldr	r0, [r4, #12]
 8003ca6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003caa:	4303      	orrs	r3, r0
 8003cac:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cae:	4bb6      	ldr	r3, [pc, #728]	; (8003f88 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cb0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cb2:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cb4:	bf1c      	itt	ne
 8003cb6:	6a23      	ldrne	r3, [r4, #32]
 8003cb8:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cba:	6893      	ldr	r3, [r2, #8]
 8003cbc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003cc0:	4303      	orrs	r3, r0
 8003cc2:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cc4:	4bb1      	ldr	r3, [pc, #708]	; (8003f8c <UART_SetConfig+0x308>)
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d119      	bne.n	8003cfe <UART_SetConfig+0x7a>
 8003cca:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003cce:	4ab0      	ldr	r2, [pc, #704]	; (8003f90 <UART_SetConfig+0x30c>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003cdc:	5cd3      	ldrb	r3, [r2, r3]
 8003cde:	f040 8138 	bne.w	8003f52 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	f200 808f 	bhi.w	8003e06 <UART_SetConfig+0x182>
 8003ce8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003cec:	00ca011a 	.word	0x00ca011a
 8003cf0:	008d00f9 	.word	0x008d00f9
 8003cf4:	008d0114 	.word	0x008d0114
 8003cf8:	008d008d 	.word	0x008d008d
 8003cfc:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cfe:	4ba5      	ldr	r3, [pc, #660]	; (8003f94 <UART_SetConfig+0x310>)
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d107      	bne.n	8003d14 <UART_SetConfig+0x90>
 8003d04:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003d08:	4aa3      	ldr	r2, [pc, #652]	; (8003f98 <UART_SetConfig+0x314>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	e7e1      	b.n	8003cd8 <UART_SetConfig+0x54>
 8003d14:	4ba1      	ldr	r3, [pc, #644]	; (8003f9c <UART_SetConfig+0x318>)
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d123      	bne.n	8003d62 <UART_SetConfig+0xde>
 8003d1a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	f000 80f1 	beq.w	8003f0e <UART_SetConfig+0x28a>
 8003d2c:	d80b      	bhi.n	8003d46 <UART_SetConfig+0xc2>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80f3 	beq.w	8003f1a <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d34:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      default:
        ret = HAL_ERROR;
 8003d38:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003d3c:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d40:	f000 80f8 	beq.w	8003f34 <UART_SetConfig+0x2b0>
 8003d44:	e0a8      	b.n	8003e98 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	f000 80c6 	beq.w	8003ed8 <UART_SetConfig+0x254>
 8003d4c:	2b30      	cmp	r3, #48	; 0x30
 8003d4e:	d1f1      	bne.n	8003d34 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d50:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003d54:	f040 80b8 	bne.w	8003ec8 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003d58:	6860      	ldr	r0, [r4, #4]
 8003d5a:	0843      	lsrs	r3, r0, #1
 8003d5c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003d60:	e0c3      	b.n	8003eea <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d62:	4b8f      	ldr	r3, [pc, #572]	; (8003fa0 <UART_SetConfig+0x31c>)
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d11e      	bne.n	8003da6 <UART_SetConfig+0x122>
 8003d68:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	f000 80bb 	beq.w	8003ef0 <UART_SetConfig+0x26c>
 8003d7a:	d80a      	bhi.n	8003d92 <UART_SetConfig+0x10e>
 8003d7c:	b97b      	cbnz	r3, 8003d9e <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d7e:	4b82      	ldr	r3, [pc, #520]	; (8003f88 <UART_SetConfig+0x304>)
 8003d80:	429a      	cmp	r2, r3
 8003d82:	f040 80ca 	bne.w	8003f1a <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003d86:	f7ff f91f 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
        break;
 8003d8a:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8003d8c:	bbb0      	cbnz	r0, 8003dfc <UART_SetConfig+0x178>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	e03a      	b.n	8003e08 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	f000 809d 	beq.w	8003ed2 <UART_SetConfig+0x24e>
 8003d98:	2bc0      	cmp	r3, #192	; 0xc0
 8003d9a:	f000 80b0 	beq.w	8003efe <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d9e:	4b7a      	ldr	r3, [pc, #488]	; (8003f88 <UART_SetConfig+0x304>)
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d1c7      	bne.n	8003d34 <UART_SetConfig+0xb0>
 8003da4:	e02f      	b.n	8003e06 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da6:	4b7f      	ldr	r3, [pc, #508]	; (8003fa4 <UART_SetConfig+0x320>)
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d111      	bne.n	8003dd0 <UART_SetConfig+0x14c>
 8003dac:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dbc:	f000 8098 	beq.w	8003ef0 <UART_SetConfig+0x26c>
 8003dc0:	d9dc      	bls.n	8003d7c <UART_SetConfig+0xf8>
 8003dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc6:	f000 8084 	beq.w	8003ed2 <UART_SetConfig+0x24e>
 8003dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dce:	e7e4      	b.n	8003d9a <UART_SetConfig+0x116>
 8003dd0:	4b6d      	ldr	r3, [pc, #436]	; (8003f88 <UART_SetConfig+0x304>)
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d1ae      	bne.n	8003d34 <UART_SetConfig+0xb0>
 8003dd6:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de6:	f000 8083 	beq.w	8003ef0 <UART_SetConfig+0x26c>
 8003dea:	d9c7      	bls.n	8003d7c <UART_SetConfig+0xf8>
 8003dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df0:	d06f      	beq.n	8003ed2 <UART_SetConfig+0x24e>
 8003df2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df6:	e7d0      	b.n	8003d9a <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003df8:	486b      	ldr	r0, [pc, #428]	; (8003fa8 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dfa:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dfc:	6862      	ldr	r2, [r4, #4]
 8003dfe:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003e02:	4281      	cmp	r1, r0
 8003e04:	d905      	bls.n	8003e12 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8003e06:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003e0c:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8003e0e:	4610      	mov	r0, r2
 8003e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e12:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003e16:	d8f6      	bhi.n	8003e06 <UART_SetConfig+0x182>
        switch (clocksource)
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d82e      	bhi.n	8003e7a <UART_SetConfig+0x1f6>
 8003e1c:	e8df f003 	tbb	[pc, r3]
 8003e20:	2d1c2d05 	.word	0x2d1c2d05
 8003e24:	2d2d2d24 	.word	0x2d2d2d24
 8003e28:	27          	.byte	0x27
 8003e29:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 8003e2a:	f7ff f8cd 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e2e:	6862      	ldr	r2, [r4, #4]
 8003e30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e34:	0856      	lsrs	r6, r2, #1
 8003e36:	2700      	movs	r7, #0
 8003e38:	fbe1 6700 	umlal	r6, r7, r1, r0
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	4630      	mov	r0, r6
 8003e40:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003e42:	f7fc fddb 	bl	80009fc <__aeabi_uldivmod>
            break;
 8003e46:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e48:	4b58      	ldr	r3, [pc, #352]	; (8003fac <UART_SetConfig+0x328>)
 8003e4a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003e4e:	4299      	cmp	r1, r3
 8003e50:	d8d9      	bhi.n	8003e06 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	60d8      	str	r0, [r3, #12]
 8003e56:	e7d7      	b.n	8003e08 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003e58:	4855      	ldr	r0, [pc, #340]	; (8003fb0 <UART_SetConfig+0x32c>)
 8003e5a:	0855      	lsrs	r5, r2, #1
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2100      	movs	r1, #0
 8003e60:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003e62:	f141 0100 	adc.w	r1, r1, #0
 8003e66:	e7ec      	b.n	8003e42 <UART_SetConfig+0x1be>
            pclk = HAL_RCC_GetSysClockFreq();
 8003e68:	f7fe fd44 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8003e6c:	e7df      	b.n	8003e2e <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003e6e:	0850      	lsrs	r0, r2, #1
 8003e70:	2100      	movs	r1, #0
 8003e72:	2300      	movs	r3, #0
 8003e74:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8003e78:	e7f3      	b.n	8003e62 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8003e7a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	e7e3      	b.n	8003e48 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e80:	f7ff f8b4 	bl	8002fec <HAL_RCC_GetPCLK2Freq>
 8003e84:	e04e      	b.n	8003f24 <UART_SetConfig+0x2a0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e86:	f7ff f89f 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e8a:	6862      	ldr	r2, [r4, #4]
 8003e8c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e94:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e96:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e98:	f1a3 0010 	sub.w	r0, r3, #16
 8003e9c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003ea0:	4288      	cmp	r0, r1
 8003ea2:	d8b0      	bhi.n	8003e06 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8003ea4:	6821      	ldr	r1, [r4, #0]
 8003ea6:	60cb      	str	r3, [r1, #12]
 8003ea8:	e7ae      	b.n	8003e08 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eaa:	f7ff f89f 	bl	8002fec <HAL_RCC_GetPCLK2Freq>
 8003eae:	e7ec      	b.n	8003e8a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003eb0:	6860      	ldr	r0, [r4, #4]
 8003eb2:	0843      	lsrs	r3, r0, #1
 8003eb4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003eb8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ebc:	fbb3 f3f0 	udiv	r3, r3, r0
 8003ec0:	e7e8      	b.n	8003e94 <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetSysClockFreq();
 8003ec2:	f7fe fd17 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8003ec6:	e7e0      	b.n	8003e8a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ec8:	6860      	ldr	r0, [r4, #4]
 8003eca:	0843      	lsrs	r3, r0, #1
 8003ecc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003ed0:	e7f4      	b.n	8003ebc <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ed2:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <UART_SetConfig+0x304>)
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d08f      	beq.n	8003df8 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003edc:	d1e8      	bne.n	8003eb0 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003ede:	6860      	ldr	r0, [r4, #4]
 8003ee0:	0843      	lsrs	r3, r0, #1
 8003ee2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003ee6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003eea:	fbb3 f3f0 	udiv	r3, r3, r0
 8003eee:	e01f      	b.n	8003f30 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ef0:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <UART_SetConfig+0x304>)
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d10b      	bne.n	8003f0e <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003ef6:	f7fe fcfd 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
        break;
 8003efa:	2304      	movs	r3, #4
 8003efc:	e746      	b.n	8003d8c <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003efe:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <UART_SetConfig+0x304>)
 8003f00:	429a      	cmp	r2, r3
 8003f02:	f47f af25 	bne.w	8003d50 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003f06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	e776      	b.n	8003dfc <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f0e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003f12:	d1d6      	bne.n	8003ec2 <UART_SetConfig+0x23e>
        pclk = HAL_RCC_GetSysClockFreq();
 8003f14:	f7fe fcee 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8003f18:	e004      	b.n	8003f24 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003f1e:	d1b2      	bne.n	8003e86 <UART_SetConfig+0x202>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f20:	f7ff f852 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f24:	6861      	ldr	r1, [r4, #4]
 8003f26:	084a      	lsrs	r2, r1, #1
 8003f28:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003f2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f30:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f32:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f34:	f1a3 0010 	sub.w	r0, r3, #16
 8003f38:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003f3c:	4288      	cmp	r0, r1
 8003f3e:	f63f af62 	bhi.w	8003e06 <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f42:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8003f46:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f48:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	60c3      	str	r3, [r0, #12]
 8003f50:	e75a      	b.n	8003e08 <UART_SetConfig+0x184>
    switch (clocksource)
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	f63f af57 	bhi.w	8003e06 <UART_SetConfig+0x182>
 8003f58:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <UART_SetConfig+0x2dc>)
 8003f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5e:	bf00      	nop
 8003f60:	08003e87 	.word	0x08003e87
 8003f64:	08003eab 	.word	0x08003eab
 8003f68:	08003eb1 	.word	0x08003eb1
 8003f6c:	08003e07 	.word	0x08003e07
 8003f70:	08003ec3 	.word	0x08003ec3
 8003f74:	08003e07 	.word	0x08003e07
 8003f78:	08003e07 	.word	0x08003e07
 8003f7c:	08003e07 	.word	0x08003e07
 8003f80:	08003ec9 	.word	0x08003ec9
 8003f84:	efff69f3 	.word	0xefff69f3
 8003f88:	40008000 	.word	0x40008000
 8003f8c:	40013800 	.word	0x40013800
 8003f90:	08004cfc 	.word	0x08004cfc
 8003f94:	40004400 	.word	0x40004400
 8003f98:	08004d00 	.word	0x08004d00
 8003f9c:	40004800 	.word	0x40004800
 8003fa0:	40004c00 	.word	0x40004c00
 8003fa4:	40005000 	.word	0x40005000
 8003fa8:	00f42400 	.word	0x00f42400
 8003fac:	000ffcff 	.word	0x000ffcff
 8003fb0:	f4240000 	.word	0xf4240000

08003fb4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fb6:	07da      	lsls	r2, r3, #31
{
 8003fb8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fba:	d506      	bpl.n	8003fca <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fbc:	6801      	ldr	r1, [r0, #0]
 8003fbe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003fc0:	684a      	ldr	r2, [r1, #4]
 8003fc2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003fc6:	4322      	orrs	r2, r4
 8003fc8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fca:	079c      	lsls	r4, r3, #30
 8003fcc:	d506      	bpl.n	8003fdc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fce:	6801      	ldr	r1, [r0, #0]
 8003fd0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003fd2:	684a      	ldr	r2, [r1, #4]
 8003fd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fd8:	4322      	orrs	r2, r4
 8003fda:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fdc:	0759      	lsls	r1, r3, #29
 8003fde:	d506      	bpl.n	8003fee <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fe0:	6801      	ldr	r1, [r0, #0]
 8003fe2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003fe4:	684a      	ldr	r2, [r1, #4]
 8003fe6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fea:	4322      	orrs	r2, r4
 8003fec:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fee:	071a      	lsls	r2, r3, #28
 8003ff0:	d506      	bpl.n	8004000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ff2:	6801      	ldr	r1, [r0, #0]
 8003ff4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003ff6:	684a      	ldr	r2, [r1, #4]
 8003ff8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ffc:	4322      	orrs	r2, r4
 8003ffe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004000:	06dc      	lsls	r4, r3, #27
 8004002:	d506      	bpl.n	8004012 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004004:	6801      	ldr	r1, [r0, #0]
 8004006:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004008:	688a      	ldr	r2, [r1, #8]
 800400a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800400e:	4322      	orrs	r2, r4
 8004010:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004012:	0699      	lsls	r1, r3, #26
 8004014:	d506      	bpl.n	8004024 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004016:	6801      	ldr	r1, [r0, #0]
 8004018:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800401a:	688a      	ldr	r2, [r1, #8]
 800401c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004020:	4322      	orrs	r2, r4
 8004022:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004024:	065a      	lsls	r2, r3, #25
 8004026:	d50f      	bpl.n	8004048 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004028:	6801      	ldr	r1, [r0, #0]
 800402a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800402c:	684a      	ldr	r2, [r1, #4]
 800402e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004032:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004034:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004038:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800403a:	d105      	bne.n	8004048 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800403c:	684a      	ldr	r2, [r1, #4]
 800403e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004040:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004044:	4322      	orrs	r2, r4
 8004046:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004048:	061b      	lsls	r3, r3, #24
 800404a:	d506      	bpl.n	800405a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800404c:	6802      	ldr	r2, [r0, #0]
 800404e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004050:	6853      	ldr	r3, [r2, #4]
 8004052:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004056:	430b      	orrs	r3, r1
 8004058:	6053      	str	r3, [r2, #4]
 800405a:	bd10      	pop	{r4, pc}

0800405c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800405c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004060:	9d06      	ldr	r5, [sp, #24]
 8004062:	4604      	mov	r4, r0
 8004064:	460f      	mov	r7, r1
 8004066:	4616      	mov	r6, r2
 8004068:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406a:	6821      	ldr	r1, [r4, #0]
 800406c:	69ca      	ldr	r2, [r1, #28]
 800406e:	ea37 0302 	bics.w	r3, r7, r2
 8004072:	bf0c      	ite	eq
 8004074:	2201      	moveq	r2, #1
 8004076:	2200      	movne	r2, #0
 8004078:	42b2      	cmp	r2, r6
 800407a:	d002      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800407c:	2000      	movs	r0, #0
}
 800407e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004082:	1c68      	adds	r0, r5, #1
 8004084:	d0f2      	beq.n	800406c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004086:	f7fd fb4d 	bl	8001724 <HAL_GetTick>
 800408a:	eba0 0008 	sub.w	r0, r0, r8
 800408e:	4285      	cmp	r5, r0
 8004090:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004092:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004094:	d300      	bcc.n	8004098 <UART_WaitOnFlagUntilTimeout+0x3c>
 8004096:	b97d      	cbnz	r5, 80040b8 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004098:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800409c:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409e:	6883      	ldr	r3, [r0, #8]
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80040a6:	2320      	movs	r3, #32
 80040a8:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80040aa:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80040ac:	2300      	movs	r3, #0
 80040ae:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 80040b2:	2003      	movs	r0, #3
 80040b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040b8:	075a      	lsls	r2, r3, #29
 80040ba:	d5d6      	bpl.n	800406a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040bc:	69c3      	ldr	r3, [r0, #28]
 80040be:	051b      	lsls	r3, r3, #20
 80040c0:	d5d3      	bpl.n	800406a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040c6:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c8:	6803      	ldr	r3, [r0, #0]
 80040ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040ce:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d0:	6883      	ldr	r3, [r0, #8]
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80040d8:	2320      	movs	r3, #32
 80040da:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80040dc:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040de:	67e3      	str	r3, [r4, #124]	; 0x7c
 80040e0:	e7e4      	b.n	80040ac <UART_WaitOnFlagUntilTimeout+0x50>

080040e2 <UART_CheckIdleState>:
{
 80040e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040e4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e6:	2600      	movs	r6, #0
 80040e8:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80040ea:	f7fd fb1b 	bl	8001724 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80040f4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f6:	d415      	bmi.n	8004124 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	075b      	lsls	r3, r3, #29
 80040fe:	d50a      	bpl.n	8004116 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	2200      	movs	r2, #0
 8004108:	462b      	mov	r3, r5
 800410a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800410e:	4620      	mov	r0, r4
 8004110:	f7ff ffa4 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 8004114:	b990      	cbnz	r0, 800413c <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8004116:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004118:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800411a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800411c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8004120:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8004122:	e00c      	b.n	800413e <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004124:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	4632      	mov	r2, r6
 800412c:	4603      	mov	r3, r0
 800412e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004132:	4620      	mov	r0, r4
 8004134:	f7ff ff92 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 8004138:	2800      	cmp	r0, #0
 800413a:	d0dd      	beq.n	80040f8 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800413c:	2003      	movs	r0, #3
}
 800413e:	b002      	add	sp, #8
 8004140:	bd70      	pop	{r4, r5, r6, pc}

08004142 <HAL_UART_Init>:
{
 8004142:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004144:	4604      	mov	r4, r0
 8004146:	b340      	cbz	r0, 800419a <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004148:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800414a:	b91b      	cbnz	r3, 8004154 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800414c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8004150:	f7fd fa6e 	bl	8001630 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004154:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004156:	2324      	movs	r3, #36	; 0x24
 8004158:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800415a:	6813      	ldr	r3, [r2, #0]
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004162:	4620      	mov	r0, r4
 8004164:	f7ff fd8e 	bl	8003c84 <UART_SetConfig>
 8004168:	2801      	cmp	r0, #1
 800416a:	d016      	beq.n	800419a <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800416c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800416e:	b113      	cbz	r3, 8004176 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8004170:	4620      	mov	r0, r4
 8004172:	f7ff ff1f 	bl	8003fb4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800417e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004186:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800418e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004190:	601a      	str	r2, [r3, #0]
}
 8004192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004196:	f7ff bfa4 	b.w	80040e2 <UART_CheckIdleState>
}
 800419a:	2001      	movs	r0, #1
 800419c:	bd10      	pop	{r4, pc}
	...

080041a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80041a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80041a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80041a6:	e003      	b.n	80041b0 <LoopCopyDataInit>

080041a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80041aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80041ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80041ae:	3104      	adds	r1, #4

080041b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80041b0:	480b      	ldr	r0, [pc, #44]	; (80041e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80041b2:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80041b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80041b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80041b8:	d3f6      	bcc.n	80041a8 <CopyDataInit>
	ldr	r2, =_sbss
 80041ba:	4a0b      	ldr	r2, [pc, #44]	; (80041e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80041bc:	e002      	b.n	80041c4 <LoopFillZerobss>

080041be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80041be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80041c0:	f842 3b04 	str.w	r3, [r2], #4

080041c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <LoopForever+0x16>)
	cmp	r2, r3
 80041c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80041c8:	d3f9      	bcc.n	80041be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80041ca:	f7fd f98f 	bl	80014ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041ce:	f000 f811 	bl	80041f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80041d2:	f7fd f8ef 	bl	80013b4 <main>

080041d6 <LoopForever>:

LoopForever:
    b LoopForever
 80041d6:	e7fe      	b.n	80041d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80041d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80041dc:	080050f0 	.word	0x080050f0
	ldr	r0, =_sdata
 80041e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80041e4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80041e8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80041ec:	200002f4 	.word	0x200002f4

080041f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80041f0:	e7fe      	b.n	80041f0 <ADC1_2_IRQHandler>
	...

080041f4 <__libc_init_array>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4e0d      	ldr	r6, [pc, #52]	; (800422c <__libc_init_array+0x38>)
 80041f8:	4c0d      	ldr	r4, [pc, #52]	; (8004230 <__libc_init_array+0x3c>)
 80041fa:	1ba4      	subs	r4, r4, r6
 80041fc:	10a4      	asrs	r4, r4, #2
 80041fe:	2500      	movs	r5, #0
 8004200:	42a5      	cmp	r5, r4
 8004202:	d109      	bne.n	8004218 <__libc_init_array+0x24>
 8004204:	4e0b      	ldr	r6, [pc, #44]	; (8004234 <__libc_init_array+0x40>)
 8004206:	4c0c      	ldr	r4, [pc, #48]	; (8004238 <__libc_init_array+0x44>)
 8004208:	f000 fd48 	bl	8004c9c <_init>
 800420c:	1ba4      	subs	r4, r4, r6
 800420e:	10a4      	asrs	r4, r4, #2
 8004210:	2500      	movs	r5, #0
 8004212:	42a5      	cmp	r5, r4
 8004214:	d105      	bne.n	8004222 <__libc_init_array+0x2e>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800421c:	4798      	blx	r3
 800421e:	3501      	adds	r5, #1
 8004220:	e7ee      	b.n	8004200 <__libc_init_array+0xc>
 8004222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004226:	4798      	blx	r3
 8004228:	3501      	adds	r5, #1
 800422a:	e7f2      	b.n	8004212 <__libc_init_array+0x1e>
 800422c:	080050e8 	.word	0x080050e8
 8004230:	080050e8 	.word	0x080050e8
 8004234:	080050e8 	.word	0x080050e8
 8004238:	080050ec 	.word	0x080050ec

0800423c <memset>:
 800423c:	4402      	add	r2, r0
 800423e:	4603      	mov	r3, r0
 8004240:	4293      	cmp	r3, r2
 8004242:	d100      	bne.n	8004246 <memset+0xa>
 8004244:	4770      	bx	lr
 8004246:	f803 1b01 	strb.w	r1, [r3], #1
 800424a:	e7f9      	b.n	8004240 <memset+0x4>

0800424c <sinf>:
 800424c:	ee10 3a10 	vmov	r3, s0
 8004250:	b507      	push	{r0, r1, r2, lr}
 8004252:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <sinf+0x7c>)
 8004254:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004258:	4293      	cmp	r3, r2
 800425a:	dc05      	bgt.n	8004268 <sinf+0x1c>
 800425c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80042cc <sinf+0x80>
 8004260:	2000      	movs	r0, #0
 8004262:	f000 fc1d 	bl	8004aa0 <__kernel_sinf>
 8004266:	e004      	b.n	8004272 <sinf+0x26>
 8004268:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800426c:	db04      	blt.n	8004278 <sinf+0x2c>
 800426e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004272:	b003      	add	sp, #12
 8004274:	f85d fb04 	ldr.w	pc, [sp], #4
 8004278:	4668      	mov	r0, sp
 800427a:	f000 f829 	bl	80042d0 <__ieee754_rem_pio2f>
 800427e:	f000 0003 	and.w	r0, r0, #3
 8004282:	2801      	cmp	r0, #1
 8004284:	d008      	beq.n	8004298 <sinf+0x4c>
 8004286:	2802      	cmp	r0, #2
 8004288:	d00d      	beq.n	80042a6 <sinf+0x5a>
 800428a:	b9b0      	cbnz	r0, 80042ba <sinf+0x6e>
 800428c:	2001      	movs	r0, #1
 800428e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004292:	ed9d 0a00 	vldr	s0, [sp]
 8004296:	e7e4      	b.n	8004262 <sinf+0x16>
 8004298:	eddd 0a01 	vldr	s1, [sp, #4]
 800429c:	ed9d 0a00 	vldr	s0, [sp]
 80042a0:	f000 f942 	bl	8004528 <__kernel_cosf>
 80042a4:	e7e5      	b.n	8004272 <sinf+0x26>
 80042a6:	2001      	movs	r0, #1
 80042a8:	eddd 0a01 	vldr	s1, [sp, #4]
 80042ac:	ed9d 0a00 	vldr	s0, [sp]
 80042b0:	f000 fbf6 	bl	8004aa0 <__kernel_sinf>
 80042b4:	eeb1 0a40 	vneg.f32	s0, s0
 80042b8:	e7db      	b.n	8004272 <sinf+0x26>
 80042ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80042be:	ed9d 0a00 	vldr	s0, [sp]
 80042c2:	f000 f931 	bl	8004528 <__kernel_cosf>
 80042c6:	e7f5      	b.n	80042b4 <sinf+0x68>
 80042c8:	3f490fd8 	.word	0x3f490fd8
 80042cc:	00000000 	.word	0x00000000

080042d0 <__ieee754_rem_pio2f>:
 80042d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d2:	ee10 6a10 	vmov	r6, s0
 80042d6:	4b86      	ldr	r3, [pc, #536]	; (80044f0 <__ieee754_rem_pio2f+0x220>)
 80042d8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80042dc:	429c      	cmp	r4, r3
 80042de:	b087      	sub	sp, #28
 80042e0:	4605      	mov	r5, r0
 80042e2:	dc05      	bgt.n	80042f0 <__ieee754_rem_pio2f+0x20>
 80042e4:	2300      	movs	r3, #0
 80042e6:	ed85 0a00 	vstr	s0, [r5]
 80042ea:	6043      	str	r3, [r0, #4]
 80042ec:	2000      	movs	r0, #0
 80042ee:	e020      	b.n	8004332 <__ieee754_rem_pio2f+0x62>
 80042f0:	4b80      	ldr	r3, [pc, #512]	; (80044f4 <__ieee754_rem_pio2f+0x224>)
 80042f2:	429c      	cmp	r4, r3
 80042f4:	dc38      	bgt.n	8004368 <__ieee754_rem_pio2f+0x98>
 80042f6:	2e00      	cmp	r6, #0
 80042f8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80044f8 <__ieee754_rem_pio2f+0x228>
 80042fc:	4b7f      	ldr	r3, [pc, #508]	; (80044fc <__ieee754_rem_pio2f+0x22c>)
 80042fe:	f024 040f 	bic.w	r4, r4, #15
 8004302:	dd18      	ble.n	8004336 <__ieee754_rem_pio2f+0x66>
 8004304:	429c      	cmp	r4, r3
 8004306:	ee70 7a47 	vsub.f32	s15, s0, s14
 800430a:	bf09      	itett	eq
 800430c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8004500 <__ieee754_rem_pio2f+0x230>
 8004310:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8004504 <__ieee754_rem_pio2f+0x234>
 8004314:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004318:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8004508 <__ieee754_rem_pio2f+0x238>
 800431c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004320:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004324:	edc0 6a00 	vstr	s13, [r0]
 8004328:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800432c:	edc0 7a01 	vstr	s15, [r0, #4]
 8004330:	2001      	movs	r0, #1
 8004332:	b007      	add	sp, #28
 8004334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004336:	429c      	cmp	r4, r3
 8004338:	ee70 7a07 	vadd.f32	s15, s0, s14
 800433c:	bf09      	itett	eq
 800433e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8004500 <__ieee754_rem_pio2f+0x230>
 8004342:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8004504 <__ieee754_rem_pio2f+0x234>
 8004346:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800434a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8004508 <__ieee754_rem_pio2f+0x238>
 800434e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004352:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004356:	edc0 6a00 	vstr	s13, [r0]
 800435a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800435e:	edc0 7a01 	vstr	s15, [r0, #4]
 8004362:	f04f 30ff 	mov.w	r0, #4294967295
 8004366:	e7e4      	b.n	8004332 <__ieee754_rem_pio2f+0x62>
 8004368:	4b68      	ldr	r3, [pc, #416]	; (800450c <__ieee754_rem_pio2f+0x23c>)
 800436a:	429c      	cmp	r4, r3
 800436c:	dc71      	bgt.n	8004452 <__ieee754_rem_pio2f+0x182>
 800436e:	f000 fbdf 	bl	8004b30 <fabsf>
 8004372:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004510 <__ieee754_rem_pio2f+0x240>
 8004376:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800437a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800437e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004382:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004386:	ee17 0a90 	vmov	r0, s15
 800438a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80044f8 <__ieee754_rem_pio2f+0x228>
 800438e:	eeb1 7a46 	vneg.f32	s14, s12
 8004392:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004396:	281f      	cmp	r0, #31
 8004398:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004504 <__ieee754_rem_pio2f+0x234>
 800439c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80043a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80043a4:	ee16 3a90 	vmov	r3, s13
 80043a8:	dc1c      	bgt.n	80043e4 <__ieee754_rem_pio2f+0x114>
 80043aa:	1e47      	subs	r7, r0, #1
 80043ac:	4959      	ldr	r1, [pc, #356]	; (8004514 <__ieee754_rem_pio2f+0x244>)
 80043ae:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80043b2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80043b6:	428a      	cmp	r2, r1
 80043b8:	d014      	beq.n	80043e4 <__ieee754_rem_pio2f+0x114>
 80043ba:	602b      	str	r3, [r5, #0]
 80043bc:	ed95 7a00 	vldr	s14, [r5]
 80043c0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80043c4:	2e00      	cmp	r6, #0
 80043c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80043ca:	ed85 0a01 	vstr	s0, [r5, #4]
 80043ce:	dab0      	bge.n	8004332 <__ieee754_rem_pio2f+0x62>
 80043d0:	eeb1 7a47 	vneg.f32	s14, s14
 80043d4:	eeb1 0a40 	vneg.f32	s0, s0
 80043d8:	ed85 7a00 	vstr	s14, [r5]
 80043dc:	ed85 0a01 	vstr	s0, [r5, #4]
 80043e0:	4240      	negs	r0, r0
 80043e2:	e7a6      	b.n	8004332 <__ieee754_rem_pio2f+0x62>
 80043e4:	15e4      	asrs	r4, r4, #23
 80043e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80043ea:	1aa2      	subs	r2, r4, r2
 80043ec:	2a08      	cmp	r2, #8
 80043ee:	dde4      	ble.n	80043ba <__ieee754_rem_pio2f+0xea>
 80043f0:	eddf 7a43 	vldr	s15, [pc, #268]	; 8004500 <__ieee754_rem_pio2f+0x230>
 80043f4:	eef0 6a40 	vmov.f32	s13, s0
 80043f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80043fc:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004400:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004404:	eddf 7a40 	vldr	s15, [pc, #256]	; 8004508 <__ieee754_rem_pio2f+0x238>
 8004408:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800440c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8004410:	eef0 7a40 	vmov.f32	s15, s0
 8004414:	ee15 3a90 	vmov	r3, s11
 8004418:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800441c:	1aa4      	subs	r4, r4, r2
 800441e:	2c19      	cmp	r4, #25
 8004420:	dc04      	bgt.n	800442c <__ieee754_rem_pio2f+0x15c>
 8004422:	edc5 5a00 	vstr	s11, [r5]
 8004426:	eeb0 0a66 	vmov.f32	s0, s13
 800442a:	e7c7      	b.n	80043bc <__ieee754_rem_pio2f+0xec>
 800442c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004518 <__ieee754_rem_pio2f+0x248>
 8004430:	eeb0 0a66 	vmov.f32	s0, s13
 8004434:	eea7 0a25 	vfma.f32	s0, s14, s11
 8004438:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800443c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004440:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800451c <__ieee754_rem_pio2f+0x24c>
 8004444:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8004448:	ee30 7a67 	vsub.f32	s14, s0, s15
 800444c:	ed85 7a00 	vstr	s14, [r5]
 8004450:	e7b4      	b.n	80043bc <__ieee754_rem_pio2f+0xec>
 8004452:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004456:	db06      	blt.n	8004466 <__ieee754_rem_pio2f+0x196>
 8004458:	ee70 7a40 	vsub.f32	s15, s0, s0
 800445c:	edc0 7a01 	vstr	s15, [r0, #4]
 8004460:	edc0 7a00 	vstr	s15, [r0]
 8004464:	e742      	b.n	80042ec <__ieee754_rem_pio2f+0x1c>
 8004466:	15e2      	asrs	r2, r4, #23
 8004468:	3a86      	subs	r2, #134	; 0x86
 800446a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004476:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004520 <__ieee754_rem_pio2f+0x250>
 800447a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800447e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004482:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004486:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800448a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800448e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004492:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004496:	ed8d 7a04 	vstr	s14, [sp, #16]
 800449a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800449e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a6:	edcd 7a05 	vstr	s15, [sp, #20]
 80044aa:	d11e      	bne.n	80044ea <__ieee754_rem_pio2f+0x21a>
 80044ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80044b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b4:	bf14      	ite	ne
 80044b6:	2302      	movne	r3, #2
 80044b8:	2301      	moveq	r3, #1
 80044ba:	491a      	ldr	r1, [pc, #104]	; (8004524 <__ieee754_rem_pio2f+0x254>)
 80044bc:	9101      	str	r1, [sp, #4]
 80044be:	2102      	movs	r1, #2
 80044c0:	9100      	str	r1, [sp, #0]
 80044c2:	a803      	add	r0, sp, #12
 80044c4:	4629      	mov	r1, r5
 80044c6:	f000 f88d 	bl	80045e4 <__kernel_rem_pio2f>
 80044ca:	2e00      	cmp	r6, #0
 80044cc:	f6bf af31 	bge.w	8004332 <__ieee754_rem_pio2f+0x62>
 80044d0:	edd5 7a00 	vldr	s15, [r5]
 80044d4:	eef1 7a67 	vneg.f32	s15, s15
 80044d8:	edc5 7a00 	vstr	s15, [r5]
 80044dc:	edd5 7a01 	vldr	s15, [r5, #4]
 80044e0:	eef1 7a67 	vneg.f32	s15, s15
 80044e4:	edc5 7a01 	vstr	s15, [r5, #4]
 80044e8:	e77a      	b.n	80043e0 <__ieee754_rem_pio2f+0x110>
 80044ea:	2303      	movs	r3, #3
 80044ec:	e7e5      	b.n	80044ba <__ieee754_rem_pio2f+0x1ea>
 80044ee:	bf00      	nop
 80044f0:	3f490fd8 	.word	0x3f490fd8
 80044f4:	4016cbe3 	.word	0x4016cbe3
 80044f8:	3fc90f80 	.word	0x3fc90f80
 80044fc:	3fc90fd0 	.word	0x3fc90fd0
 8004500:	37354400 	.word	0x37354400
 8004504:	37354443 	.word	0x37354443
 8004508:	2e85a308 	.word	0x2e85a308
 800450c:	43490f80 	.word	0x43490f80
 8004510:	3f22f984 	.word	0x3f22f984
 8004514:	08004d10 	.word	0x08004d10
 8004518:	2e85a300 	.word	0x2e85a300
 800451c:	248d3132 	.word	0x248d3132
 8004520:	43800000 	.word	0x43800000
 8004524:	08004d90 	.word	0x08004d90

08004528 <__kernel_cosf>:
 8004528:	ee10 3a10 	vmov	r3, s0
 800452c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004530:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004538:	da05      	bge.n	8004546 <__kernel_cosf+0x1e>
 800453a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800453e:	ee17 2a90 	vmov	r2, s15
 8004542:	2a00      	cmp	r2, #0
 8004544:	d03b      	beq.n	80045be <__kernel_cosf+0x96>
 8004546:	ee20 7a00 	vmul.f32	s14, s0, s0
 800454a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80045c4 <__kernel_cosf+0x9c>
 800454e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80045c8 <__kernel_cosf+0xa0>
 8004552:	eddf 5a1e 	vldr	s11, [pc, #120]	; 80045cc <__kernel_cosf+0xa4>
 8004556:	4a1e      	ldr	r2, [pc, #120]	; (80045d0 <__kernel_cosf+0xa8>)
 8004558:	eea7 6a27 	vfma.f32	s12, s14, s15
 800455c:	4293      	cmp	r3, r2
 800455e:	ee60 0a20 	vmul.f32	s1, s0, s1
 8004562:	eee7 5a06 	vfma.f32	s11, s14, s12
 8004566:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80045d4 <__kernel_cosf+0xac>
 800456a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800456e:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80045d8 <__kernel_cosf+0xb0>
 8004572:	eee7 5a06 	vfma.f32	s11, s14, s12
 8004576:	ed9f 6a19 	vldr	s12, [pc, #100]	; 80045dc <__kernel_cosf+0xb4>
 800457a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800457e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8004582:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004586:	dc06      	bgt.n	8004596 <__kernel_cosf+0x6e>
 8004588:	eed7 0a06 	vfnms.f32	s1, s14, s12
 800458c:	eed7 0a25 	vfnms.f32	s1, s14, s11
 8004590:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8004594:	4770      	bx	lr
 8004596:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <__kernel_cosf+0xb8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	bfda      	itte	le
 800459c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80045a0:	ee07 3a90 	vmovle	s15, r3
 80045a4:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 80045a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80045ac:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80045b0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80045b4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80045b8:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80045bc:	4770      	bx	lr
 80045be:	eeb0 0a66 	vmov.f32	s0, s13
 80045c2:	4770      	bx	lr
 80045c4:	310f74f6 	.word	0x310f74f6
 80045c8:	ad47d74e 	.word	0xad47d74e
 80045cc:	b493f27c 	.word	0xb493f27c
 80045d0:	3e999999 	.word	0x3e999999
 80045d4:	37d00d01 	.word	0x37d00d01
 80045d8:	bab60b61 	.word	0xbab60b61
 80045dc:	3d2aaaab 	.word	0x3d2aaaab
 80045e0:	3f480000 	.word	0x3f480000

080045e4 <__kernel_rem_pio2f>:
 80045e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e8:	ed2d 8b04 	vpush	{d8-d9}
 80045ec:	b0d7      	sub	sp, #348	; 0x15c
 80045ee:	468b      	mov	fp, r1
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	9964      	ldr	r1, [sp, #400]	; 0x190
 80045f4:	4bcb      	ldr	r3, [pc, #812]	; (8004924 <__kernel_rem_pio2f+0x340>)
 80045f6:	9002      	str	r0, [sp, #8]
 80045f8:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 80045fc:	9b01      	ldr	r3, [sp, #4]
 80045fe:	9e65      	ldr	r6, [sp, #404]	; 0x194
 8004600:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8004934 <__kernel_rem_pio2f+0x350>
 8004604:	3b01      	subs	r3, #1
 8004606:	1ed0      	subs	r0, r2, #3
 8004608:	2408      	movs	r4, #8
 800460a:	fb90 f0f4 	sdiv	r0, r0, r4
 800460e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004612:	1c45      	adds	r5, r0, #1
 8004614:	1ac7      	subs	r7, r0, r3
 8004616:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800461a:	eb0a 0e03 	add.w	lr, sl, r3
 800461e:	ac1a      	add	r4, sp, #104	; 0x68
 8004620:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 8004624:	2200      	movs	r2, #0
 8004626:	4572      	cmp	r2, lr
 8004628:	dd0f      	ble.n	800464a <__kernel_rem_pio2f+0x66>
 800462a:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 800462e:	2400      	movs	r4, #0
 8004630:	4554      	cmp	r4, sl
 8004632:	dc26      	bgt.n	8004682 <__kernel_rem_pio2f+0x9e>
 8004634:	9a01      	ldr	r2, [sp, #4]
 8004636:	9f02      	ldr	r7, [sp, #8]
 8004638:	eddf 7abe 	vldr	s15, [pc, #760]	; 8004934 <__kernel_rem_pio2f+0x350>
 800463c:	4422      	add	r2, r4
 800463e:	a91a      	add	r1, sp, #104	; 0x68
 8004640:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004644:	f04f 0c00 	mov.w	ip, #0
 8004648:	e015      	b.n	8004676 <__kernel_rem_pio2f+0x92>
 800464a:	42d7      	cmn	r7, r2
 800464c:	bf5d      	ittte	pl
 800464e:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 8004652:	ee07 1a90 	vmovpl	s15, r1
 8004656:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800465a:	eef0 7a47 	vmovmi.f32	s15, s14
 800465e:	ece4 7a01 	vstmia	r4!, {s15}
 8004662:	3201      	adds	r2, #1
 8004664:	e7df      	b.n	8004626 <__kernel_rem_pio2f+0x42>
 8004666:	ecf7 6a01 	vldmia	r7!, {s13}
 800466a:	ed32 7a01 	vldmdb	r2!, {s14}
 800466e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004672:	f10c 0c01 	add.w	ip, ip, #1
 8004676:	459c      	cmp	ip, r3
 8004678:	ddf5      	ble.n	8004666 <__kernel_rem_pio2f+0x82>
 800467a:	ecee 7a01 	vstmia	lr!, {s15}
 800467e:	3401      	adds	r4, #1
 8004680:	e7d6      	b.n	8004630 <__kernel_rem_pio2f+0x4c>
 8004682:	aa06      	add	r2, sp, #24
 8004684:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004688:	9204      	str	r2, [sp, #16]
 800468a:	eddf 8aa7 	vldr	s17, [pc, #668]	; 8004928 <__kernel_rem_pio2f+0x344>
 800468e:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 800492c <__kernel_rem_pio2f+0x348>
 8004692:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 8004696:	9203      	str	r2, [sp, #12]
 8004698:	4657      	mov	r7, sl
 800469a:	aa56      	add	r2, sp, #344	; 0x158
 800469c:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 80046a0:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80046a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80046a8:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 80046ac:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80046b0:	aa56      	add	r2, sp, #344	; 0x158
 80046b2:	eb02 0008 	add.w	r0, r2, r8
 80046b6:	384c      	subs	r0, #76	; 0x4c
 80046b8:	2200      	movs	r2, #0
 80046ba:	1abc      	subs	r4, r7, r2
 80046bc:	2c00      	cmp	r4, #0
 80046be:	dc4a      	bgt.n	8004756 <__kernel_rem_pio2f+0x172>
 80046c0:	4628      	mov	r0, r5
 80046c2:	9305      	str	r3, [sp, #20]
 80046c4:	f000 fa7e 	bl	8004bc4 <scalbnf>
 80046c8:	eeb0 8a40 	vmov.f32	s16, s0
 80046cc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80046d0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80046d4:	f000 fa34 	bl	8004b40 <floorf>
 80046d8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80046dc:	eea0 8a67 	vfms.f32	s16, s0, s15
 80046e0:	2d00      	cmp	r5, #0
 80046e2:	9b05      	ldr	r3, [sp, #20]
 80046e4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80046e8:	ee17 9a90 	vmov	r9, s15
 80046ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046f0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80046f4:	dd44      	ble.n	8004780 <__kernel_rem_pio2f+0x19c>
 80046f6:	1e78      	subs	r0, r7, #1
 80046f8:	aa06      	add	r2, sp, #24
 80046fa:	f1c5 0408 	rsb	r4, r5, #8
 80046fe:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8004702:	fa46 f204 	asr.w	r2, r6, r4
 8004706:	4491      	add	r9, r2
 8004708:	40a2      	lsls	r2, r4
 800470a:	1ab6      	subs	r6, r6, r2
 800470c:	aa06      	add	r2, sp, #24
 800470e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8004712:	f1c5 0207 	rsb	r2, r5, #7
 8004716:	4116      	asrs	r6, r2
 8004718:	2e00      	cmp	r6, #0
 800471a:	dd40      	ble.n	800479e <__kernel_rem_pio2f+0x1ba>
 800471c:	2400      	movs	r4, #0
 800471e:	f109 0901 	add.w	r9, r9, #1
 8004722:	4620      	mov	r0, r4
 8004724:	42a7      	cmp	r7, r4
 8004726:	dc75      	bgt.n	8004814 <__kernel_rem_pio2f+0x230>
 8004728:	2d00      	cmp	r5, #0
 800472a:	dd05      	ble.n	8004738 <__kernel_rem_pio2f+0x154>
 800472c:	2d01      	cmp	r5, #1
 800472e:	f000 8086 	beq.w	800483e <__kernel_rem_pio2f+0x25a>
 8004732:	2d02      	cmp	r5, #2
 8004734:	f000 808d 	beq.w	8004852 <__kernel_rem_pio2f+0x26e>
 8004738:	2e02      	cmp	r6, #2
 800473a:	d130      	bne.n	800479e <__kernel_rem_pio2f+0x1ba>
 800473c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004740:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004744:	b358      	cbz	r0, 800479e <__kernel_rem_pio2f+0x1ba>
 8004746:	4628      	mov	r0, r5
 8004748:	9305      	str	r3, [sp, #20]
 800474a:	f000 fa3b 	bl	8004bc4 <scalbnf>
 800474e:	9b05      	ldr	r3, [sp, #20]
 8004750:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004754:	e023      	b.n	800479e <__kernel_rem_pio2f+0x1ba>
 8004756:	ee60 7a28 	vmul.f32	s15, s0, s17
 800475a:	ac06      	add	r4, sp, #24
 800475c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004764:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004768:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800476c:	ee10 1a10 	vmov	r1, s0
 8004770:	ed30 0a01 	vldmdb	r0!, {s0}
 8004774:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8004778:	ee37 0a80 	vadd.f32	s0, s15, s0
 800477c:	3201      	adds	r2, #1
 800477e:	e79c      	b.n	80046ba <__kernel_rem_pio2f+0xd6>
 8004780:	d105      	bne.n	800478e <__kernel_rem_pio2f+0x1aa>
 8004782:	1e7a      	subs	r2, r7, #1
 8004784:	a906      	add	r1, sp, #24
 8004786:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800478a:	1236      	asrs	r6, r6, #8
 800478c:	e7c4      	b.n	8004718 <__kernel_rem_pio2f+0x134>
 800478e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004792:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479a:	da39      	bge.n	8004810 <__kernel_rem_pio2f+0x22c>
 800479c:	2600      	movs	r6, #0
 800479e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80047a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a6:	f040 808d 	bne.w	80048c4 <__kernel_rem_pio2f+0x2e0>
 80047aa:	1e7c      	subs	r4, r7, #1
 80047ac:	4620      	mov	r0, r4
 80047ae:	2200      	movs	r2, #0
 80047b0:	4550      	cmp	r0, sl
 80047b2:	da55      	bge.n	8004860 <__kernel_rem_pio2f+0x27c>
 80047b4:	2a00      	cmp	r2, #0
 80047b6:	d164      	bne.n	8004882 <__kernel_rem_pio2f+0x29e>
 80047b8:	2401      	movs	r4, #1
 80047ba:	f06f 0003 	mvn.w	r0, #3
 80047be:	fb00 f204 	mul.w	r2, r0, r4
 80047c2:	9904      	ldr	r1, [sp, #16]
 80047c4:	588a      	ldr	r2, [r1, r2]
 80047c6:	2a00      	cmp	r2, #0
 80047c8:	d050      	beq.n	800486c <__kernel_rem_pio2f+0x288>
 80047ca:	aa56      	add	r2, sp, #344	; 0x158
 80047cc:	4490      	add	r8, r2
 80047ce:	9a01      	ldr	r2, [sp, #4]
 80047d0:	a91a      	add	r1, sp, #104	; 0x68
 80047d2:	443a      	add	r2, r7
 80047d4:	1c78      	adds	r0, r7, #1
 80047d6:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 80047da:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80047de:	4427      	add	r7, r4
 80047e0:	42b8      	cmp	r0, r7
 80047e2:	f73f af5a 	bgt.w	800469a <__kernel_rem_pio2f+0xb6>
 80047e6:	9903      	ldr	r1, [sp, #12]
 80047e8:	9e02      	ldr	r6, [sp, #8]
 80047ea:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80047ee:	9105      	str	r1, [sp, #20]
 80047f0:	ee07 1a90 	vmov	s15, r1
 80047f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047f8:	2400      	movs	r4, #0
 80047fa:	ece2 7a01 	vstmia	r2!, {s15}
 80047fe:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8004934 <__kernel_rem_pio2f+0x350>
 8004802:	4696      	mov	lr, r2
 8004804:	429c      	cmp	r4, r3
 8004806:	dd33      	ble.n	8004870 <__kernel_rem_pio2f+0x28c>
 8004808:	ece8 7a01 	vstmia	r8!, {s15}
 800480c:	3001      	adds	r0, #1
 800480e:	e7e7      	b.n	80047e0 <__kernel_rem_pio2f+0x1fc>
 8004810:	2602      	movs	r6, #2
 8004812:	e783      	b.n	800471c <__kernel_rem_pio2f+0x138>
 8004814:	aa06      	add	r2, sp, #24
 8004816:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800481a:	b948      	cbnz	r0, 8004830 <__kernel_rem_pio2f+0x24c>
 800481c:	b12a      	cbz	r2, 800482a <__kernel_rem_pio2f+0x246>
 800481e:	a906      	add	r1, sp, #24
 8004820:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8004824:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8004828:	2201      	movs	r2, #1
 800482a:	3401      	adds	r4, #1
 800482c:	4610      	mov	r0, r2
 800482e:	e779      	b.n	8004724 <__kernel_rem_pio2f+0x140>
 8004830:	a906      	add	r1, sp, #24
 8004832:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8004836:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800483a:	4602      	mov	r2, r0
 800483c:	e7f5      	b.n	800482a <__kernel_rem_pio2f+0x246>
 800483e:	1e7c      	subs	r4, r7, #1
 8004840:	aa06      	add	r2, sp, #24
 8004842:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8004846:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800484a:	a906      	add	r1, sp, #24
 800484c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8004850:	e772      	b.n	8004738 <__kernel_rem_pio2f+0x154>
 8004852:	1e7c      	subs	r4, r7, #1
 8004854:	aa06      	add	r2, sp, #24
 8004856:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800485a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800485e:	e7f4      	b.n	800484a <__kernel_rem_pio2f+0x266>
 8004860:	a906      	add	r1, sp, #24
 8004862:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004866:	3801      	subs	r0, #1
 8004868:	430a      	orrs	r2, r1
 800486a:	e7a1      	b.n	80047b0 <__kernel_rem_pio2f+0x1cc>
 800486c:	3401      	adds	r4, #1
 800486e:	e7a6      	b.n	80047be <__kernel_rem_pio2f+0x1da>
 8004870:	ecf6 6a01 	vldmia	r6!, {s13}
 8004874:	ed3e 7a01 	vldmdb	lr!, {s14}
 8004878:	3401      	adds	r4, #1
 800487a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800487e:	e7c1      	b.n	8004804 <__kernel_rem_pio2f+0x220>
 8004880:	3c01      	subs	r4, #1
 8004882:	ab06      	add	r3, sp, #24
 8004884:	3d08      	subs	r5, #8
 8004886:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f8      	beq.n	8004880 <__kernel_rem_pio2f+0x29c>
 800488e:	4628      	mov	r0, r5
 8004890:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004894:	f000 f996 	bl	8004bc4 <scalbnf>
 8004898:	00a3      	lsls	r3, r4, #2
 800489a:	aa42      	add	r2, sp, #264	; 0x108
 800489c:	3304      	adds	r3, #4
 800489e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004928 <__kernel_rem_pio2f+0x344>
 80048a2:	18d0      	adds	r0, r2, r3
 80048a4:	4622      	mov	r2, r4
 80048a6:	2a00      	cmp	r2, #0
 80048a8:	da46      	bge.n	8004938 <__kernel_rem_pio2f+0x354>
 80048aa:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 80048ae:	2200      	movs	r2, #0
 80048b0:	1aa5      	subs	r5, r4, r2
 80048b2:	d460      	bmi.n	8004976 <__kernel_rem_pio2f+0x392>
 80048b4:	a942      	add	r1, sp, #264	; 0x108
 80048b6:	4f1e      	ldr	r7, [pc, #120]	; (8004930 <__kernel_rem_pio2f+0x34c>)
 80048b8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004934 <__kernel_rem_pio2f+0x350>
 80048bc:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80048c0:	2000      	movs	r0, #0
 80048c2:	e050      	b.n	8004966 <__kernel_rem_pio2f+0x382>
 80048c4:	4268      	negs	r0, r5
 80048c6:	eeb0 0a48 	vmov.f32	s0, s16
 80048ca:	f000 f97b 	bl	8004bc4 <scalbnf>
 80048ce:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800492c <__kernel_rem_pio2f+0x348>
 80048d2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80048d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048da:	db19      	blt.n	8004910 <__kernel_rem_pio2f+0x32c>
 80048dc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004928 <__kernel_rem_pio2f+0x344>
 80048e0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80048e4:	aa06      	add	r2, sp, #24
 80048e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048ea:	1c7c      	adds	r4, r7, #1
 80048ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048f0:	3508      	adds	r5, #8
 80048f2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80048f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80048fe:	ee10 3a10 	vmov	r3, s0
 8004902:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8004906:	ee17 3a90 	vmov	r3, s15
 800490a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800490e:	e7be      	b.n	800488e <__kernel_rem_pio2f+0x2aa>
 8004910:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004914:	aa06      	add	r2, sp, #24
 8004916:	ee10 3a10 	vmov	r3, s0
 800491a:	463c      	mov	r4, r7
 800491c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8004920:	e7b5      	b.n	800488e <__kernel_rem_pio2f+0x2aa>
 8004922:	bf00      	nop
 8004924:	080050d4 	.word	0x080050d4
 8004928:	3b800000 	.word	0x3b800000
 800492c:	43800000 	.word	0x43800000
 8004930:	080050a8 	.word	0x080050a8
 8004934:	00000000 	.word	0x00000000
 8004938:	a906      	add	r1, sp, #24
 800493a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800493e:	9101      	str	r1, [sp, #4]
 8004940:	ee07 1a90 	vmov	s15, r1
 8004944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004948:	3a01      	subs	r2, #1
 800494a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800494e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004952:	ed60 7a01 	vstmdb	r0!, {s15}
 8004956:	e7a6      	b.n	80048a6 <__kernel_rem_pio2f+0x2c2>
 8004958:	ecf7 6a01 	vldmia	r7!, {s13}
 800495c:	ecb5 7a01 	vldmia	r5!, {s14}
 8004960:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004964:	3001      	adds	r0, #1
 8004966:	4550      	cmp	r0, sl
 8004968:	dc01      	bgt.n	800496e <__kernel_rem_pio2f+0x38a>
 800496a:	4290      	cmp	r0, r2
 800496c:	ddf4      	ble.n	8004958 <__kernel_rem_pio2f+0x374>
 800496e:	ecee 7a01 	vstmia	lr!, {s15}
 8004972:	3201      	adds	r2, #1
 8004974:	e79c      	b.n	80048b0 <__kernel_rem_pio2f+0x2cc>
 8004976:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004978:	2a03      	cmp	r2, #3
 800497a:	d843      	bhi.n	8004a04 <__kernel_rem_pio2f+0x420>
 800497c:	e8df f002 	tbb	[pc, r2]
 8004980:	021d1d37 	.word	0x021d1d37
 8004984:	aa2e      	add	r2, sp, #184	; 0xb8
 8004986:	4413      	add	r3, r2
 8004988:	461a      	mov	r2, r3
 800498a:	4620      	mov	r0, r4
 800498c:	2800      	cmp	r0, #0
 800498e:	dc55      	bgt.n	8004a3c <__kernel_rem_pio2f+0x458>
 8004990:	461a      	mov	r2, r3
 8004992:	4620      	mov	r0, r4
 8004994:	2801      	cmp	r0, #1
 8004996:	dc61      	bgt.n	8004a5c <__kernel_rem_pio2f+0x478>
 8004998:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 8004934 <__kernel_rem_pio2f+0x350>
 800499c:	2c01      	cmp	r4, #1
 800499e:	dc6d      	bgt.n	8004a7c <__kernel_rem_pio2f+0x498>
 80049a0:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80049a4:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80049a8:	2e00      	cmp	r6, #0
 80049aa:	d16d      	bne.n	8004a88 <__kernel_rem_pio2f+0x4a4>
 80049ac:	edcb 6a00 	vstr	s13, [fp]
 80049b0:	ed8b 7a01 	vstr	s14, [fp, #4]
 80049b4:	edcb 7a02 	vstr	s15, [fp, #8]
 80049b8:	e024      	b.n	8004a04 <__kernel_rem_pio2f+0x420>
 80049ba:	aa2e      	add	r2, sp, #184	; 0xb8
 80049bc:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8004934 <__kernel_rem_pio2f+0x350>
 80049c0:	4413      	add	r3, r2
 80049c2:	4622      	mov	r2, r4
 80049c4:	2a00      	cmp	r2, #0
 80049c6:	da2a      	bge.n	8004a1e <__kernel_rem_pio2f+0x43a>
 80049c8:	b37e      	cbz	r6, 8004a2a <__kernel_rem_pio2f+0x446>
 80049ca:	eef1 7a47 	vneg.f32	s15, s14
 80049ce:	edcb 7a00 	vstr	s15, [fp]
 80049d2:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80049d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049da:	aa2f      	add	r2, sp, #188	; 0xbc
 80049dc:	2301      	movs	r3, #1
 80049de:	429c      	cmp	r4, r3
 80049e0:	da26      	bge.n	8004a30 <__kernel_rem_pio2f+0x44c>
 80049e2:	b10e      	cbz	r6, 80049e8 <__kernel_rem_pio2f+0x404>
 80049e4:	eef1 7a67 	vneg.f32	s15, s15
 80049e8:	edcb 7a01 	vstr	s15, [fp, #4]
 80049ec:	e00a      	b.n	8004a04 <__kernel_rem_pio2f+0x420>
 80049ee:	aa2e      	add	r2, sp, #184	; 0xb8
 80049f0:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 8004934 <__kernel_rem_pio2f+0x350>
 80049f4:	4413      	add	r3, r2
 80049f6:	2c00      	cmp	r4, #0
 80049f8:	da0b      	bge.n	8004a12 <__kernel_rem_pio2f+0x42e>
 80049fa:	b10e      	cbz	r6, 8004a00 <__kernel_rem_pio2f+0x41c>
 80049fc:	eef1 7a67 	vneg.f32	s15, s15
 8004a00:	edcb 7a00 	vstr	s15, [fp]
 8004a04:	f009 0007 	and.w	r0, r9, #7
 8004a08:	b057      	add	sp, #348	; 0x15c
 8004a0a:	ecbd 8b04 	vpop	{d8-d9}
 8004a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a12:	ed33 7a01 	vldmdb	r3!, {s14}
 8004a16:	3c01      	subs	r4, #1
 8004a18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a1c:	e7eb      	b.n	80049f6 <__kernel_rem_pio2f+0x412>
 8004a1e:	ed73 7a01 	vldmdb	r3!, {s15}
 8004a22:	3a01      	subs	r2, #1
 8004a24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a28:	e7cc      	b.n	80049c4 <__kernel_rem_pio2f+0x3e0>
 8004a2a:	eef0 7a47 	vmov.f32	s15, s14
 8004a2e:	e7ce      	b.n	80049ce <__kernel_rem_pio2f+0x3ea>
 8004a30:	ecb2 7a01 	vldmia	r2!, {s14}
 8004a34:	3301      	adds	r3, #1
 8004a36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a3a:	e7d0      	b.n	80049de <__kernel_rem_pio2f+0x3fa>
 8004a3c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8004a40:	ed52 7a02 	vldr	s15, [r2, #-8]
 8004a44:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004a48:	3801      	subs	r0, #1
 8004a4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a52:	ed62 7a01 	vstmdb	r2!, {s15}
 8004a56:	ed02 7a01 	vstr	s14, [r2, #-4]
 8004a5a:	e797      	b.n	800498c <__kernel_rem_pio2f+0x3a8>
 8004a5c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8004a60:	ed52 7a02 	vldr	s15, [r2, #-8]
 8004a64:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004a68:	3801      	subs	r0, #1
 8004a6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a72:	ed62 7a01 	vstmdb	r2!, {s15}
 8004a76:	ed02 7a01 	vstr	s14, [r2, #-4]
 8004a7a:	e78b      	b.n	8004994 <__kernel_rem_pio2f+0x3b0>
 8004a7c:	ed33 7a01 	vldmdb	r3!, {s14}
 8004a80:	3c01      	subs	r4, #1
 8004a82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a86:	e789      	b.n	800499c <__kernel_rem_pio2f+0x3b8>
 8004a88:	eef1 6a66 	vneg.f32	s13, s13
 8004a8c:	eeb1 7a47 	vneg.f32	s14, s14
 8004a90:	edcb 6a00 	vstr	s13, [fp]
 8004a94:	ed8b 7a01 	vstr	s14, [fp, #4]
 8004a98:	eef1 7a67 	vneg.f32	s15, s15
 8004a9c:	e78a      	b.n	80049b4 <__kernel_rem_pio2f+0x3d0>
 8004a9e:	bf00      	nop

08004aa0 <__kernel_sinf>:
 8004aa0:	ee10 3a10 	vmov	r3, s0
 8004aa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004aa8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004aac:	da04      	bge.n	8004ab8 <__kernel_sinf+0x18>
 8004aae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004ab2:	ee17 3a90 	vmov	r3, s15
 8004ab6:	b35b      	cbz	r3, 8004b10 <__kernel_sinf+0x70>
 8004ab8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004abc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004b14 <__kernel_sinf+0x74>
 8004ac0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004b18 <__kernel_sinf+0x78>
 8004ac4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004ac8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004b1c <__kernel_sinf+0x7c>
 8004acc:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004ad0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004b20 <__kernel_sinf+0x80>
 8004ad4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004ad8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004b24 <__kernel_sinf+0x84>
 8004adc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004ae0:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004ae4:	b930      	cbnz	r0, 8004af4 <__kernel_sinf+0x54>
 8004ae6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004b28 <__kernel_sinf+0x88>
 8004aea:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004aee:	eea6 0a86 	vfma.f32	s0, s13, s12
 8004af2:	4770      	bx	lr
 8004af4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004af8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004afc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004b00:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8004b04:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004b2c <__kernel_sinf+0x8c>
 8004b08:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004b0c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	2f2ec9d3 	.word	0x2f2ec9d3
 8004b18:	b2d72f34 	.word	0xb2d72f34
 8004b1c:	3638ef1b 	.word	0x3638ef1b
 8004b20:	b9500d01 	.word	0xb9500d01
 8004b24:	3c088889 	.word	0x3c088889
 8004b28:	be2aaaab 	.word	0xbe2aaaab
 8004b2c:	3e2aaaab 	.word	0x3e2aaaab

08004b30 <fabsf>:
 8004b30:	ee10 3a10 	vmov	r3, s0
 8004b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b38:	ee00 3a10 	vmov	s0, r3
 8004b3c:	4770      	bx	lr
	...

08004b40 <floorf>:
 8004b40:	ee10 3a10 	vmov	r3, s0
 8004b44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004b48:	0dca      	lsrs	r2, r1, #23
 8004b4a:	3a7f      	subs	r2, #127	; 0x7f
 8004b4c:	2a16      	cmp	r2, #22
 8004b4e:	dc2a      	bgt.n	8004ba6 <floorf+0x66>
 8004b50:	2a00      	cmp	r2, #0
 8004b52:	da11      	bge.n	8004b78 <floorf+0x38>
 8004b54:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004bb8 <floorf+0x78>
 8004b58:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004b5c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b64:	dd05      	ble.n	8004b72 <floorf+0x32>
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	da23      	bge.n	8004bb2 <floorf+0x72>
 8004b6a:	4a14      	ldr	r2, [pc, #80]	; (8004bbc <floorf+0x7c>)
 8004b6c:	2900      	cmp	r1, #0
 8004b6e:	bf18      	it	ne
 8004b70:	4613      	movne	r3, r2
 8004b72:	ee00 3a10 	vmov	s0, r3
 8004b76:	4770      	bx	lr
 8004b78:	4911      	ldr	r1, [pc, #68]	; (8004bc0 <floorf+0x80>)
 8004b7a:	4111      	asrs	r1, r2
 8004b7c:	420b      	tst	r3, r1
 8004b7e:	d0fa      	beq.n	8004b76 <floorf+0x36>
 8004b80:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004bb8 <floorf+0x78>
 8004b84:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004b88:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b90:	ddef      	ble.n	8004b72 <floorf+0x32>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	bfbe      	ittt	lt
 8004b96:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004b9a:	fa40 f202 	asrlt.w	r2, r0, r2
 8004b9e:	189b      	addlt	r3, r3, r2
 8004ba0:	ea23 0301 	bic.w	r3, r3, r1
 8004ba4:	e7e5      	b.n	8004b72 <floorf+0x32>
 8004ba6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004baa:	d3e4      	bcc.n	8004b76 <floorf+0x36>
 8004bac:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004bb0:	4770      	bx	lr
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e7dd      	b.n	8004b72 <floorf+0x32>
 8004bb6:	bf00      	nop
 8004bb8:	7149f2ca 	.word	0x7149f2ca
 8004bbc:	bf800000 	.word	0xbf800000
 8004bc0:	007fffff 	.word	0x007fffff

08004bc4 <scalbnf>:
 8004bc4:	b508      	push	{r3, lr}
 8004bc6:	ee10 2a10 	vmov	r2, s0
 8004bca:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8004bce:	ed2d 8b02 	vpush	{d8}
 8004bd2:	eef0 0a40 	vmov.f32	s1, s0
 8004bd6:	d004      	beq.n	8004be2 <scalbnf+0x1e>
 8004bd8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004bdc:	d306      	bcc.n	8004bec <scalbnf+0x28>
 8004bde:	ee70 0a00 	vadd.f32	s1, s0, s0
 8004be2:	ecbd 8b02 	vpop	{d8}
 8004be6:	eeb0 0a60 	vmov.f32	s0, s1
 8004bea:	bd08      	pop	{r3, pc}
 8004bec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bf0:	d21c      	bcs.n	8004c2c <scalbnf+0x68>
 8004bf2:	4b1f      	ldr	r3, [pc, #124]	; (8004c70 <scalbnf+0xac>)
 8004bf4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004c74 <scalbnf+0xb0>
 8004bf8:	4298      	cmp	r0, r3
 8004bfa:	ee60 0a27 	vmul.f32	s1, s0, s15
 8004bfe:	db10      	blt.n	8004c22 <scalbnf+0x5e>
 8004c00:	ee10 2a90 	vmov	r2, s1
 8004c04:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8004c08:	3b19      	subs	r3, #25
 8004c0a:	4403      	add	r3, r0
 8004c0c:	2bfe      	cmp	r3, #254	; 0xfe
 8004c0e:	dd0f      	ble.n	8004c30 <scalbnf+0x6c>
 8004c10:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8004c78 <scalbnf+0xb4>
 8004c14:	eeb0 0a48 	vmov.f32	s0, s16
 8004c18:	f000 f834 	bl	8004c84 <copysignf>
 8004c1c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8004c20:	e7df      	b.n	8004be2 <scalbnf+0x1e>
 8004c22:	eddf 7a16 	vldr	s15, [pc, #88]	; 8004c7c <scalbnf+0xb8>
 8004c26:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8004c2a:	e7da      	b.n	8004be2 <scalbnf+0x1e>
 8004c2c:	0ddb      	lsrs	r3, r3, #23
 8004c2e:	e7ec      	b.n	8004c0a <scalbnf+0x46>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	dd06      	ble.n	8004c42 <scalbnf+0x7e>
 8004c34:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8004c38:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004c3c:	ee00 3a90 	vmov	s1, r3
 8004c40:	e7cf      	b.n	8004be2 <scalbnf+0x1e>
 8004c42:	f113 0f16 	cmn.w	r3, #22
 8004c46:	da06      	bge.n	8004c56 <scalbnf+0x92>
 8004c48:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004c4c:	4298      	cmp	r0, r3
 8004c4e:	dcdf      	bgt.n	8004c10 <scalbnf+0x4c>
 8004c50:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8004c7c <scalbnf+0xb8>
 8004c54:	e7de      	b.n	8004c14 <scalbnf+0x50>
 8004c56:	3319      	adds	r3, #25
 8004c58:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8004c5c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004c60:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004c80 <scalbnf+0xbc>
 8004c64:	ee07 3a10 	vmov	s14, r3
 8004c68:	ee67 0a27 	vmul.f32	s1, s14, s15
 8004c6c:	e7b9      	b.n	8004be2 <scalbnf+0x1e>
 8004c6e:	bf00      	nop
 8004c70:	ffff3cb0 	.word	0xffff3cb0
 8004c74:	4c000000 	.word	0x4c000000
 8004c78:	7149f2ca 	.word	0x7149f2ca
 8004c7c:	0da24260 	.word	0x0da24260
 8004c80:	33000000 	.word	0x33000000

08004c84 <copysignf>:
 8004c84:	ee10 3a10 	vmov	r3, s0
 8004c88:	ee10 2a90 	vmov	r2, s1
 8004c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c90:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004c94:	4313      	orrs	r3, r2
 8004c96:	ee00 3a10 	vmov	s0, r3
 8004c9a:	4770      	bx	lr

08004c9c <_init>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	bf00      	nop
 8004ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca2:	bc08      	pop	{r3}
 8004ca4:	469e      	mov	lr, r3
 8004ca6:	4770      	bx	lr

08004ca8 <_fini>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	bf00      	nop
 8004cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cae:	bc08      	pop	{r3}
 8004cb0:	469e      	mov	lr, r3
 8004cb2:	4770      	bx	lr
